<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#
var programFiles = Environment.GetEnvironmentVariable("PROGRAMFILES(X86)") ?? Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
Assembly officeAssembly = Assembly.ReflectionOnlyLoadFrom (programFiles + @"\Microsoft Visual Studio 10.0\Visual Studio Tools for Office\PIA\Office14\Office.dll");
Assembly outlookAssembly = Assembly.ReflectionOnlyLoadFrom(programFiles + @"\Microsoft Visual Studio 10.0\Visual Studio Tools for Office\PIA\Office14\Microsoft.Office.Interop.Outlook.dll");
#>
using VSTOContrib.Extensions.Proxies;

//<#=outlookAssembly.FullName#>
namespace VSTOContrib.Outlook.Extensions.Proxies
{
	/// <summary>
	/// Provides cleanup extension methods for interfaces exposed by Microsoft.Office.Interop.Outlook.dll
	/// </summary>
	public static class OutlookCleanupExtensions
	{
<# 
	foreach (var outlookInterface in outlookAssembly.GetTypes().Where(t => t.IsInterface))
	{
#>
		/// <summary>
		/// Wrapper interface for <#= outlookInterface.Name #> which adds IDispose to the interface
		/// </summary>
		public static Interfaces.I<#= outlookInterface.Name #> WithComCleanupProxy(this <#= outlookInterface.FullName #> resource)
		{
			return resource.WithComCleanupProxy<<#= outlookInterface.FullName #>, Interfaces.I<#= outlookInterface.Name #>>();
		}

<# 
	} 
#>
	}
}