using System.Runtime.CompilerServices;
using Office.Utility.Extensions;

// ReSharper disable InconsistentNaming
namespace Office.Utility.Proxies
{
    /// <summary>
    /// Wrapper interface for IAccessible which adds IDispose to the interface
    /// </summary>
    public class IAccessibleProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IAccessible _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IAccessible which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IAccessibleProxy(Microsoft.Office.Core.IAccessible proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _IMsoDispObj which adds IDispose to the interface
    /// </summary>
    public class _IMsoDispObjProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._IMsoDispObj _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._IMsoDispObj which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _IMsoDispObjProxy(Microsoft.Office.Core._IMsoDispObj proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _IMsoOleAccDispObj which adds IDispose to the interface
    /// </summary>
    public class _IMsoOleAccDispObjProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._IMsoOleAccDispObj _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._IMsoOleAccDispObj which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _IMsoOleAccDispObjProxy(Microsoft.Office.Core._IMsoOleAccDispObj proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBars which adds IDispose to the interface
    /// </summary>
    public class _CommandBarsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBars _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBars which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarsProxy(Microsoft.Office.Core._CommandBars proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisableCustomize(System.Boolean pvarfDisableCustomize)
        {
            _proxyTarget.DisableCustomize = pvarfDisableCustomize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisableAskAQuestionDropdown()
        {
            return _proxyTarget.DisableAskAQuestionDropdown;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisableAskAQuestionDropdown(System.Boolean pvarfDisableAskAQuestionDropdown)
        {
            _proxyTarget.DisableAskAQuestionDropdown = pvarfDisableAskAQuestionDropdown;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ExecuteMso(System.String idMso)
        {
            _proxyTarget.ExecuteMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean GetEnabledMso(System.String idMso)
        {
            return _proxyTarget.GetEnabledMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean GetVisibleMso(System.String idMso)
        {
            return _proxyTarget.GetVisibleMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean GetPressedMso(System.String idMso)
        {
            return _proxyTarget.GetPressedMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetLabelMso(System.String idMso)
        {
            return _proxyTarget.GetLabelMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetScreentipMso(System.String idMso)
        {
            return _proxyTarget.GetScreentipMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetSupertipMso(System.String idMso)
        {
            return _proxyTarget.GetSupertipMso(idMso);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual stdole.IPictureDisp GetImageMso(System.String idMso, System.Int32 Width, System.Int32 Height)
        {
            return _proxyTarget.GetImageMso(idMso, Width, Height);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CommitRenderingTransaction(System.Int32 hwnd)
        {
            _proxyTarget.CommitRenderingTransaction(hwnd);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarControlProxy get_ActionControl()
        {
            return new CommandBarControlProxy(_proxyTarget.ActionControl);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_ActiveMenuBar()
        {
            return new CommandBarProxy(_proxyTarget.ActiveMenuBar);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarProxy Add(System.Object Name, System.Object Position, System.Object MenuBar, System.Object Temporary)
        {
            return new CommandBarProxy(_proxyTarget.Add(Name, Position, MenuBar, Temporary));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisplayTooltips()
        {
            return _proxyTarget.DisplayTooltips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayTooltips(System.Boolean pvarfDisplayTooltips)
        {
            _proxyTarget.DisplayTooltips = pvarfDisplayTooltips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisplayKeysInTooltips()
        {
            return _proxyTarget.DisplayKeysInTooltips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayKeysInTooltips(System.Boolean pvarfDisplayKeys)
        {
            _proxyTarget.DisplayKeysInTooltips = pvarfDisplayKeys;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy FindControl(System.Object Type, System.Object Id, System.Object Tag, System.Object Visible)
        {
            return new CommandBarControlProxy(_proxyTarget.FindControl(Type, Id, Tag, Visible));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CommandBarProxy this[System.Object Index]
		{
			get { return new CommandBarProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_LargeButtons()
        {
            return _proxyTarget.LargeButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LargeButtons(System.Boolean pvarfLargeButtons)
        {
            _proxyTarget.LargeButtons = pvarfLargeButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoMenuAnimation get_MenuAnimationStyle()
        {
            return _proxyTarget.MenuAnimationStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MenuAnimationStyle(Microsoft.Office.Core.MsoMenuAnimation pma)
        {
            _proxyTarget.MenuAnimationStyle = pma;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ReleaseFocus()
        {
            _proxyTarget.ReleaseFocus();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_IdsString(System.Int32 ids, out System.String pbstrName)
        {
            return _proxyTarget.IdsString[ids, out pbstrName];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_TmcGetName(System.Int32 tmc, out System.String pbstrName)
        {
            return _proxyTarget.TmcGetName[tmc, out pbstrName];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AdaptiveMenus()
        {
            return _proxyTarget.AdaptiveMenus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AdaptiveMenus(System.Boolean pvarfAdaptiveMenus)
        {
            _proxyTarget.AdaptiveMenus = pvarfAdaptiveMenus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlsProxy FindControls(System.Object Type, System.Object Id, System.Object Tag, System.Object Visible)
        {
            return new CommandBarControlsProxy(_proxyTarget.FindControls(Type, Id, Tag, Visible));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarProxy AddEx(System.Object TbidOrName, System.Object Position, System.Object MenuBar, System.Object Temporary, System.Object TbtrProtection)
        {
            return new CommandBarProxy(_proxyTarget.AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisplayFonts()
        {
            return _proxyTarget.DisplayFonts;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayFonts(System.Boolean pvarfDisplayFonts)
        {
            _proxyTarget.DisplayFonts = pvarfDisplayFonts;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisableCustomize()
        {
            return _proxyTarget.DisableCustomize;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBar which adds IDispose to the interface
    /// </summary>
    public class CommandBarProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBar _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBar which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarProxy(Microsoft.Office.Core.CommandBar proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 pdx)
        {
            _proxyTarget.Width = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AdaptiveMenu()
        {
            return _proxyTarget.AdaptiveMenu;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AdaptiveMenu(System.Boolean pvarfAdaptiveMenu)
        {
            _proxyTarget.AdaptiveMenu = pvarfAdaptiveMenu;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_InstanceIdPtr()
        {
            return _proxyTarget.InstanceIdPtr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean pvarfEnabled)
        {
            _proxyTarget.Enabled = pvarfEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy FindControl(System.Object Type, System.Object Id, System.Object Tag, System.Object Visible, System.Object Recursive)
        {
            return new CommandBarControlProxy(_proxyTarget.FindControl(Type, Id, Tag, Visible, Recursive));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 pdy)
        {
            _proxyTarget.Height = pdy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InstanceId()
        {
            return _proxyTarget.InstanceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Int32 pxpLeft)
        {
            _proxyTarget.Left = pxpLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String pbstrName)
        {
            _proxyTarget.Name = pbstrName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NameLocal()
        {
            return _proxyTarget.NameLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NameLocal(System.String pbstrNameLocal)
        {
            _proxyTarget.NameLocal = pbstrNameLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBarPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.MsoBarPosition ppos)
        {
            _proxyTarget.Position = ppos;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_RowIndex()
        {
            return _proxyTarget.RowIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RowIndex(System.Int32 piRow)
        {
            _proxyTarget.RowIndex = piRow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBarProtection get_Protection()
        {
            return _proxyTarget.Protection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Protection(Microsoft.Office.Core.MsoBarProtection pprot)
        {
            _proxyTarget.Protection = pprot;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowPopup(System.Object x, System.Object y)
        {
            _proxyTarget.ShowPopup(x, y);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Int32 pypTop)
        {
            _proxyTarget.Top = pypTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBarType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Context()
        {
            return _proxyTarget.Context;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Context(System.String pbstrContext)
        {
            _proxyTarget.Context = pbstrContext;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarControlsProxy get_Controls()
        {
            return new CommandBarControlsProxy(_proxyTarget.Controls);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBarControls which adds IDispose to the interface
    /// </summary>
    public class CommandBarControlsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBarControls _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBarControls which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarControlsProxy(Microsoft.Office.Core.CommandBarControls proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Add(System.Object Type, System.Object Id, System.Object Parameter, System.Object Before, System.Object Temporary)
        {
            return new CommandBarControlProxy(_proxyTarget.Add(Type, Id, Parameter, Before, Temporary));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CommandBarControlProxy this[System.Object Index]
		{
			get { return new CommandBarControlProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_Parent()
        {
            return new CommandBarProxy(_proxyTarget.Parent);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBarControl which adds IDispose to the interface
    /// </summary>
    public class CommandBarControlProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBarControl _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBarControl which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarControlProxy(Microsoft.Office.Core.CommandBarControl proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetFocus()
        {
            _proxyTarget.SetFocus();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tag(System.String pbstrTag)
        {
            _proxyTarget.Tag = pbstrTag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TooltipText()
        {
            return _proxyTarget.TooltipText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TooltipText(System.String pbstrTooltip)
        {
            _proxyTarget.TooltipText = pbstrTooltip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 pdx)
        {
            _proxyTarget.Width = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsPriorityDropped()
        {
            return _proxyTarget.IsPriorityDropped;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved1()
        {
            _proxyTarget.Reserved1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved2()
        {
            _proxyTarget.Reserved2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved3()
        {
            _proxyTarget.Reserved3();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved4()
        {
            _proxyTarget.Reserved4();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved5()
        {
            _proxyTarget.Reserved5();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved6()
        {
            _proxyTarget.Reserved6();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved7()
        {
            _proxyTarget.Reserved7();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Control()
        {
            return _proxyTarget.Control;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Copy(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Copy(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object Temporary)
        {
            _proxyTarget.Delete(Temporary);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DescriptionText()
        {
            return _proxyTarget.DescriptionText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DescriptionText(System.String pbstrText)
        {
            _proxyTarget.DescriptionText = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean pvarfEnabled)
        {
            _proxyTarget.Enabled = pvarfEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 pdy)
        {
            _proxyTarget.Height = pdy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_HelpContextId()
        {
            return _proxyTarget.HelpContextId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpContextId(System.Int32 pid)
        {
            _proxyTarget.HelpContextId = pid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HelpFile()
        {
            return _proxyTarget.HelpFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpFile(System.String pbstrFilename)
        {
            _proxyTarget.HelpFile = pbstrFilename;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InstanceId()
        {
            return _proxyTarget.InstanceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Move(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Move(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlOLEUsage get_OLEUsage()
        {
            return _proxyTarget.OLEUsage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OLEUsage(Microsoft.Office.Core.MsoControlOLEUsage pcou)
        {
            _proxyTarget.OLEUsage = pcou;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_OnAction()
        {
            return _proxyTarget.OnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OnAction(System.String pbstrOnAction)
        {
            _proxyTarget.OnAction = pbstrOnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_Parent()
        {
            return new CommandBarProxy(_proxyTarget.Parent);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Parameter()
        {
            return _proxyTarget.Parameter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Parameter(System.String pbstrParam)
        {
            _proxyTarget.Parameter = pbstrParam;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Priority()
        {
            return _proxyTarget.Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Priority(System.Int32 pnPri)
        {
            _proxyTarget.Priority = pnPri;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BeginGroup()
        {
            return _proxyTarget.BeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginGroup(System.Boolean pvarfBeginGroup)
        {
            _proxyTarget.BeginGroup = pvarfBeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstrCaption)
        {
            _proxyTarget.Caption = pbstrCaption;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarButton which adds IDispose to the interface
    /// </summary>
    public class _CommandBarButtonProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarButton _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarButton which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarButtonProxy(Microsoft.Office.Core._CommandBarButton proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoButtonState get_State()
        {
            return _proxyTarget.State;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_State(Microsoft.Office.Core.MsoButtonState pstate)
        {
            _proxyTarget.State = pstate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoButtonStyle get_Style()
        {
            return _proxyTarget.Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Style(Microsoft.Office.Core.MsoButtonStyle pstyle)
        {
            _proxyTarget.Style = pstyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCommandBarButtonHyperlinkType get_HyperlinkType()
        {
            return _proxyTarget.HyperlinkType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HyperlinkType(Microsoft.Office.Core.MsoCommandBarButtonHyperlinkType phlType)
        {
            _proxyTarget.HyperlinkType = phlType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual stdole.IPictureDisp get_Picture()
        {
            return _proxyTarget.Picture;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Picture(stdole.IPictureDisp ppdispPicture)
        {
            _proxyTarget.Picture = ppdispPicture;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual stdole.IPictureDisp get_Mask()
        {
            return _proxyTarget.Mask;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Mask(stdole.IPictureDisp ppipictdispMask)
        {
            _proxyTarget.Mask = ppipictdispMask;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_InstanceIdPtr()
        {
            return _proxyTarget.InstanceIdPtr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetFocus()
        {
            _proxyTarget.SetFocus();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tag(System.String pbstrTag)
        {
            _proxyTarget.Tag = pbstrTag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TooltipText()
        {
            return _proxyTarget.TooltipText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TooltipText(System.String pbstrTooltip)
        {
            _proxyTarget.TooltipText = pbstrTooltip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 pdx)
        {
            _proxyTarget.Width = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsPriorityDropped()
        {
            return _proxyTarget.IsPriorityDropped;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved1()
        {
            _proxyTarget.Reserved1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved2()
        {
            _proxyTarget.Reserved2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved3()
        {
            _proxyTarget.Reserved3();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved4()
        {
            _proxyTarget.Reserved4();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved5()
        {
            _proxyTarget.Reserved5();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved6()
        {
            _proxyTarget.Reserved6();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved7()
        {
            _proxyTarget.Reserved7();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltInFace()
        {
            return _proxyTarget.BuiltInFace;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BuiltInFace(System.Boolean pvarfBuiltIn)
        {
            _proxyTarget.BuiltInFace = pvarfBuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CopyFace()
        {
            _proxyTarget.CopyFace();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_FaceId()
        {
            return _proxyTarget.FaceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FaceId(System.Int32 pid)
        {
            _proxyTarget.FaceId = pid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PasteFace()
        {
            _proxyTarget.PasteFace();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ShortcutText()
        {
            return _proxyTarget.ShortcutText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShortcutText(System.String pbstrText)
        {
            _proxyTarget.ShortcutText = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Control()
        {
            return _proxyTarget.Control;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Copy(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Copy(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object Temporary)
        {
            _proxyTarget.Delete(Temporary);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DescriptionText()
        {
            return _proxyTarget.DescriptionText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DescriptionText(System.String pbstrText)
        {
            _proxyTarget.DescriptionText = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean pvarfEnabled)
        {
            _proxyTarget.Enabled = pvarfEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 pdy)
        {
            _proxyTarget.Height = pdy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_HelpContextId()
        {
            return _proxyTarget.HelpContextId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpContextId(System.Int32 pid)
        {
            _proxyTarget.HelpContextId = pid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HelpFile()
        {
            return _proxyTarget.HelpFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpFile(System.String pbstrFilename)
        {
            _proxyTarget.HelpFile = pbstrFilename;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InstanceId()
        {
            return _proxyTarget.InstanceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Move(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Move(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlOLEUsage get_OLEUsage()
        {
            return _proxyTarget.OLEUsage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OLEUsage(Microsoft.Office.Core.MsoControlOLEUsage pcou)
        {
            _proxyTarget.OLEUsage = pcou;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_OnAction()
        {
            return _proxyTarget.OnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OnAction(System.String pbstrOnAction)
        {
            _proxyTarget.OnAction = pbstrOnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_Parent()
        {
            return new CommandBarProxy(_proxyTarget.Parent);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Parameter()
        {
            return _proxyTarget.Parameter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Parameter(System.String pbstrParam)
        {
            _proxyTarget.Parameter = pbstrParam;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Priority()
        {
            return _proxyTarget.Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Priority(System.Int32 pnPri)
        {
            _proxyTarget.Priority = pnPri;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BeginGroup()
        {
            return _proxyTarget.BeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginGroup(System.Boolean pvarfBeginGroup)
        {
            _proxyTarget.BeginGroup = pvarfBeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstrCaption)
        {
            _proxyTarget.Caption = pbstrCaption;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBarPopup which adds IDispose to the interface
    /// </summary>
    public class CommandBarPopupProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBarPopup _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBarPopup which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarPopupProxy(Microsoft.Office.Core.CommandBarPopup proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetFocus()
        {
            _proxyTarget.SetFocus();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tag(System.String pbstrTag)
        {
            _proxyTarget.Tag = pbstrTag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TooltipText()
        {
            return _proxyTarget.TooltipText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TooltipText(System.String pbstrTooltip)
        {
            _proxyTarget.TooltipText = pbstrTooltip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 pdx)
        {
            _proxyTarget.Width = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsPriorityDropped()
        {
            return _proxyTarget.IsPriorityDropped;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved1()
        {
            _proxyTarget.Reserved1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved2()
        {
            _proxyTarget.Reserved2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved3()
        {
            _proxyTarget.Reserved3();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved4()
        {
            _proxyTarget.Reserved4();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved5()
        {
            _proxyTarget.Reserved5();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved6()
        {
            _proxyTarget.Reserved6();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved7()
        {
            _proxyTarget.Reserved7();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_CommandBar()
        {
            return new CommandBarProxy(_proxyTarget.CommandBar);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarControlsProxy get_Controls()
        {
            return new CommandBarControlsProxy(_proxyTarget.Controls);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoOLEMenuGroup get_OLEMenuGroup()
        {
            return _proxyTarget.OLEMenuGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OLEMenuGroup(Microsoft.Office.Core.MsoOLEMenuGroup pomg)
        {
            _proxyTarget.OLEMenuGroup = pomg;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_InstanceIdPtr()
        {
            return _proxyTarget.InstanceIdPtr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Control()
        {
            return _proxyTarget.Control;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Copy(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Copy(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object Temporary)
        {
            _proxyTarget.Delete(Temporary);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DescriptionText()
        {
            return _proxyTarget.DescriptionText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DescriptionText(System.String pbstrText)
        {
            _proxyTarget.DescriptionText = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean pvarfEnabled)
        {
            _proxyTarget.Enabled = pvarfEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 pdy)
        {
            _proxyTarget.Height = pdy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_HelpContextId()
        {
            return _proxyTarget.HelpContextId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpContextId(System.Int32 pid)
        {
            _proxyTarget.HelpContextId = pid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HelpFile()
        {
            return _proxyTarget.HelpFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpFile(System.String pbstrFilename)
        {
            _proxyTarget.HelpFile = pbstrFilename;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InstanceId()
        {
            return _proxyTarget.InstanceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Move(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Move(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlOLEUsage get_OLEUsage()
        {
            return _proxyTarget.OLEUsage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OLEUsage(Microsoft.Office.Core.MsoControlOLEUsage pcou)
        {
            _proxyTarget.OLEUsage = pcou;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_OnAction()
        {
            return _proxyTarget.OnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OnAction(System.String pbstrOnAction)
        {
            _proxyTarget.OnAction = pbstrOnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_Parent()
        {
            return new CommandBarProxy(_proxyTarget.Parent);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Parameter()
        {
            return _proxyTarget.Parameter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Parameter(System.String pbstrParam)
        {
            _proxyTarget.Parameter = pbstrParam;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Priority()
        {
            return _proxyTarget.Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Priority(System.Int32 pnPri)
        {
            _proxyTarget.Priority = pnPri;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BeginGroup()
        {
            return _proxyTarget.BeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginGroup(System.Boolean pvarfBeginGroup)
        {
            _proxyTarget.BeginGroup = pvarfBeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstrCaption)
        {
            _proxyTarget.Caption = pbstrCaption;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarComboBox which adds IDispose to the interface
    /// </summary>
    public class _CommandBarComboBoxProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarComboBox _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarComboBox which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarComboBoxProxy(Microsoft.Office.Core._CommandBarComboBox proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ListCount()
        {
            return _proxyTarget.ListCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ListHeaderCount()
        {
            return _proxyTarget.ListHeaderCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ListHeaderCount(System.Int32 pcItems)
        {
            _proxyTarget.ListHeaderCount = pcItems;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ListIndex()
        {
            return _proxyTarget.ListIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ListIndex(System.Int32 pi)
        {
            _proxyTarget.ListIndex = pi;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RemoveItem(System.Int32 Index)
        {
            _proxyTarget.RemoveItem(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoComboStyle get_Style()
        {
            return _proxyTarget.Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Style(Microsoft.Office.Core.MsoComboStyle pstyle)
        {
            _proxyTarget.Style = pstyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstrText)
        {
            _proxyTarget.Text = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_InstanceIdPtr()
        {
            return _proxyTarget.InstanceIdPtr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetFocus()
        {
            _proxyTarget.SetFocus();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tag(System.String pbstrTag)
        {
            _proxyTarget.Tag = pbstrTag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TooltipText()
        {
            return _proxyTarget.TooltipText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TooltipText(System.String pbstrTooltip)
        {
            _proxyTarget.TooltipText = pbstrTooltip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 pdx)
        {
            _proxyTarget.Width = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsPriorityDropped()
        {
            return _proxyTarget.IsPriorityDropped;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved1()
        {
            _proxyTarget.Reserved1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved2()
        {
            _proxyTarget.Reserved2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved3()
        {
            _proxyTarget.Reserved3();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved4()
        {
            _proxyTarget.Reserved4();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved5()
        {
            _proxyTarget.Reserved5();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved6()
        {
            _proxyTarget.Reserved6();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved7()
        {
            _proxyTarget.Reserved7();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddItem(System.String Text, System.Object Index)
        {
            _proxyTarget.AddItem(Text, Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Clear()
        {
            _proxyTarget.Clear();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_DropDownLines()
        {
            return _proxyTarget.DropDownLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DropDownLines(System.Int32 pcLines)
        {
            _proxyTarget.DropDownLines = pcLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_DropDownWidth()
        {
            return _proxyTarget.DropDownWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DropDownWidth(System.Int32 pdx)
        {
            _proxyTarget.DropDownWidth = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_List(System.Int32 Index)
        {
            return _proxyTarget.List[Index];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_List(System.Int32 Index, System.String pbstrItem)
        {
            _proxyTarget.List[Index] = pbstrItem;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Control()
        {
            return _proxyTarget.Control;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Copy(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Copy(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object Temporary)
        {
            _proxyTarget.Delete(Temporary);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DescriptionText()
        {
            return _proxyTarget.DescriptionText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DescriptionText(System.String pbstrText)
        {
            _proxyTarget.DescriptionText = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean pvarfEnabled)
        {
            _proxyTarget.Enabled = pvarfEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 pdy)
        {
            _proxyTarget.Height = pdy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_HelpContextId()
        {
            return _proxyTarget.HelpContextId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpContextId(System.Int32 pid)
        {
            _proxyTarget.HelpContextId = pid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HelpFile()
        {
            return _proxyTarget.HelpFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpFile(System.String pbstrFilename)
        {
            _proxyTarget.HelpFile = pbstrFilename;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InstanceId()
        {
            return _proxyTarget.InstanceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Move(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Move(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlOLEUsage get_OLEUsage()
        {
            return _proxyTarget.OLEUsage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OLEUsage(Microsoft.Office.Core.MsoControlOLEUsage pcou)
        {
            _proxyTarget.OLEUsage = pcou;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_OnAction()
        {
            return _proxyTarget.OnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OnAction(System.String pbstrOnAction)
        {
            _proxyTarget.OnAction = pbstrOnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_Parent()
        {
            return new CommandBarProxy(_proxyTarget.Parent);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Parameter()
        {
            return _proxyTarget.Parameter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Parameter(System.String pbstrParam)
        {
            _proxyTarget.Parameter = pbstrParam;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Priority()
        {
            return _proxyTarget.Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Priority(System.Int32 pnPri)
        {
            _proxyTarget.Priority = pnPri;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BeginGroup()
        {
            return _proxyTarget.BeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginGroup(System.Boolean pvarfBeginGroup)
        {
            _proxyTarget.BeginGroup = pvarfBeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstrCaption)
        {
            _proxyTarget.Caption = pbstrCaption;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarActiveX which adds IDispose to the interface
    /// </summary>
    public class _CommandBarActiveXProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarActiveX _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarActiveX which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarActiveXProxy(Microsoft.Office.Core._CommandBarActiveX proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetFocus()
        {
            _proxyTarget.SetFocus();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tag(System.String pbstrTag)
        {
            _proxyTarget.Tag = pbstrTag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TooltipText()
        {
            return _proxyTarget.TooltipText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TooltipText(System.String pbstrTooltip)
        {
            _proxyTarget.TooltipText = pbstrTooltip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 pdx)
        {
            _proxyTarget.Width = pdx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsPriorityDropped()
        {
            return _proxyTarget.IsPriorityDropped;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved1()
        {
            _proxyTarget.Reserved1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved2()
        {
            _proxyTarget.Reserved2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved3()
        {
            _proxyTarget.Reserved3();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved4()
        {
            _proxyTarget.Reserved4();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved5()
        {
            _proxyTarget.Reserved5();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved6()
        {
            _proxyTarget.Reserved6();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reserved7()
        {
            _proxyTarget.Reserved7();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ControlCLSID()
        {
            return _proxyTarget.ControlCLSID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ControlCLSID(System.String pbstrClsid)
        {
            _proxyTarget.ControlCLSID = pbstrClsid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_QueryControlInterface(System.String bstrIid)
        {
            return _proxyTarget.QueryControlInterface[bstrIid];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetInnerObjectFactory(System.Object pUnk)
        {
            _proxyTarget.SetInnerObjectFactory(pUnk);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EnsureControl()
        {
            _proxyTarget.EnsureControl();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InitWith(System.Object arg0)
        {
            _proxyTarget.InitWith = arg0;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_InstanceIdPtr()
        {
            return _proxyTarget.InstanceIdPtr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Control()
        {
            return _proxyTarget.Control;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Copy(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Copy(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object Temporary)
        {
            _proxyTarget.Delete(Temporary);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DescriptionText()
        {
            return _proxyTarget.DescriptionText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DescriptionText(System.String pbstrText)
        {
            _proxyTarget.DescriptionText = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean pvarfEnabled)
        {
            _proxyTarget.Enabled = pvarfEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 pdy)
        {
            _proxyTarget.Height = pdy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_HelpContextId()
        {
            return _proxyTarget.HelpContextId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpContextId(System.Int32 pid)
        {
            _proxyTarget.HelpContextId = pid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HelpFile()
        {
            return _proxyTarget.HelpFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HelpFile(System.String pbstrFilename)
        {
            _proxyTarget.HelpFile = pbstrFilename;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InstanceId()
        {
            return _proxyTarget.InstanceId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CommandBarControlProxy Move(System.Object Bar, System.Object Before)
        {
            return new CommandBarControlProxy(_proxyTarget.Move(Bar, Before));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoControlOLEUsage get_OLEUsage()
        {
            return _proxyTarget.OLEUsage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OLEUsage(Microsoft.Office.Core.MsoControlOLEUsage pcou)
        {
            _proxyTarget.OLEUsage = pcou;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_OnAction()
        {
            return _proxyTarget.OnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OnAction(System.String pbstrOnAction)
        {
            _proxyTarget.OnAction = pbstrOnAction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CommandBarProxy get_Parent()
        {
            return new CommandBarProxy(_proxyTarget.Parent);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Parameter()
        {
            return _proxyTarget.Parameter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Parameter(System.String pbstrParam)
        {
            _proxyTarget.Parameter = pbstrParam;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Priority()
        {
            return _proxyTarget.Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Priority(System.Int32 pnPri)
        {
            _proxyTarget.Priority = pnPri;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accParent()
        {
            return _proxyTarget.accParent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accChildCount()
        {
            return _proxyTarget.accChildCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accChild(System.Object varChild)
        {
            return _proxyTarget.accChild[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accName(System.Object varChild)
        {
            return _proxyTarget.accName[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accValue(System.Object varChild)
        {
            return _proxyTarget.accValue[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDescription(System.Object varChild)
        {
            return _proxyTarget.accDescription[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accRole(System.Object varChild)
        {
            return _proxyTarget.accRole[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accState(System.Object varChild)
        {
            return _proxyTarget.accState[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accHelp(System.Object varChild)
        {
            return _proxyTarget.accHelp[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_accHelpTopic(out System.String pszHelpFile, System.Object varChild)
        {
            return _proxyTarget.accHelpTopic[out pszHelpFile, varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accKeyboardShortcut(System.Object varChild)
        {
            return _proxyTarget.accKeyboardShortcut[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accFocus()
        {
            return _proxyTarget.accFocus;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_accSelection()
        {
            return _proxyTarget.accSelection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_accDefaultAction(System.Object varChild)
        {
            return _proxyTarget.accDefaultAction[varChild];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accSelect(System.Int32 flagsSelect, System.Object varChild)
        {
            _proxyTarget.accSelect(flagsSelect, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accLocation(out System.Int32 pxLeft, out System.Int32 pyTop, out System.Int32 pcxWidth, out System.Int32 pcyHeight, System.Object varChild)
        {
            _proxyTarget.accLocation(out pxLeft, out pyTop, out pcxWidth, out pcyHeight, varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accNavigate(System.Int32 navDir, System.Object varStart)
        {
            return _proxyTarget.accNavigate(navDir, varStart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object accHitTest(System.Int32 xLeft, System.Int32 yTop)
        {
            return _proxyTarget.accHitTest(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void accDoDefaultAction(System.Object varChild)
        {
            _proxyTarget.accDoDefaultAction(varChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accName(System.Object varChild, System.String pszName)
        {
            _proxyTarget.accName[varChild] = pszName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_accValue(System.Object varChild, System.String pszValue)
        {
            _proxyTarget.accValue[varChild] = pszValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BeginGroup()
        {
            return _proxyTarget.BeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginGroup(System.Boolean pvarfBeginGroup)
        {
            _proxyTarget.BeginGroup = pvarfBeginGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstrCaption)
        {
            _proxyTarget.Caption = pbstrCaption;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Adjustments which adds IDispose to the interface
    /// </summary>
    public class AdjustmentsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Adjustments _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Adjustments which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public AdjustmentsProxy(Microsoft.Office.Core.Adjustments proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual System.Single this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
			set { _proxyTarget[Index] = value; }
		}
        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CalloutFormat which adds IDispose to the interface
    /// </summary>
    public class CalloutFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CalloutFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CalloutFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CalloutFormatProxy(Microsoft.Office.Core.CalloutFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AutomaticLength()
        {
            _proxyTarget.AutomaticLength();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CustomDrop(System.Single Drop)
        {
            _proxyTarget.CustomDrop(Drop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CustomLength(System.Single Length)
        {
            _proxyTarget.CustomLength(Length);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PresetDrop(Microsoft.Office.Core.MsoCalloutDropType DropType)
        {
            _proxyTarget.PresetDrop(DropType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Accent()
        {
            return _proxyTarget.Accent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Accent(Microsoft.Office.Core.MsoTriState Accent)
        {
            _proxyTarget.Accent = Accent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCalloutAngleType get_Angle()
        {
            return _proxyTarget.Angle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Angle(Microsoft.Office.Core.MsoCalloutAngleType Angle)
        {
            _proxyTarget.Angle = Angle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_AutoAttach()
        {
            return _proxyTarget.AutoAttach;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoAttach(Microsoft.Office.Core.MsoTriState AutoAttach)
        {
            _proxyTarget.AutoAttach = AutoAttach;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_AutoLength()
        {
            return _proxyTarget.AutoLength;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Border()
        {
            return _proxyTarget.Border;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Border(Microsoft.Office.Core.MsoTriState Border)
        {
            _proxyTarget.Border = Border;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Drop()
        {
            return _proxyTarget.Drop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCalloutDropType get_DropType()
        {
            return _proxyTarget.DropType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Gap()
        {
            return _proxyTarget.Gap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Gap(System.Single Gap)
        {
            _proxyTarget.Gap = Gap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Length()
        {
            return _proxyTarget.Length;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCalloutType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoCalloutType Type)
        {
            _proxyTarget.Type = Type;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ColorFormat which adds IDispose to the interface
    /// </summary>
    public class ColorFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ColorFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ColorFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ColorFormatProxy(Microsoft.Office.Core.ColorFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_RGB()
        {
            return _proxyTarget.RGB;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RGB(System.Int32 RGB)
        {
            _proxyTarget.RGB = RGB;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SchemeColor()
        {
            return _proxyTarget.SchemeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SchemeColor(System.Int32 SchemeColor)
        {
            _proxyTarget.SchemeColor = SchemeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoColorType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_TintAndShade()
        {
            return _proxyTarget.TintAndShade;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TintAndShade(System.Single pValue)
        {
            _proxyTarget.TintAndShade = pValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoThemeColorIndex get_ObjectThemeColor()
        {
            return _proxyTarget.ObjectThemeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ObjectThemeColor(Microsoft.Office.Core.MsoThemeColorIndex ObjectThemeColor)
        {
            _proxyTarget.ObjectThemeColor = ObjectThemeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Brightness()
        {
            return _proxyTarget.Brightness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Brightness(System.Single Brightness)
        {
            _proxyTarget.Brightness = Brightness;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ConnectorFormat which adds IDispose to the interface
    /// </summary>
    public class ConnectorFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ConnectorFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ConnectorFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ConnectorFormatProxy(Microsoft.Office.Core.ConnectorFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void BeginConnect(Microsoft.Office.Core.Shape ConnectedShape, System.Int32 ConnectionSite)
        {
            _proxyTarget.BeginConnect(ConnectedShape, ConnectionSite);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void BeginDisconnect()
        {
            _proxyTarget.BeginDisconnect();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EndConnect(Microsoft.Office.Core.Shape ConnectedShape, System.Int32 ConnectionSite)
        {
            _proxyTarget.EndConnect(ConnectedShape, ConnectionSite);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EndDisconnect()
        {
            _proxyTarget.EndDisconnect();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_BeginConnected()
        {
            return _proxyTarget.BeginConnected;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_BeginConnectedShape()
        {
            return new ShapeProxy(_proxyTarget.BeginConnectedShape);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_BeginConnectionSite()
        {
            return _proxyTarget.BeginConnectionSite;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_EndConnected()
        {
            return _proxyTarget.EndConnected;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_EndConnectedShape()
        {
            return new ShapeProxy(_proxyTarget.EndConnectedShape);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_EndConnectionSite()
        {
            return _proxyTarget.EndConnectionSite;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoConnectorType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoConnectorType Type)
        {
            _proxyTarget.Type = Type;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FillFormat which adds IDispose to the interface
    /// </summary>
    public class FillFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FillFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FillFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FillFormatProxy(Microsoft.Office.Core.FillFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GradientStopsProxy get_GradientStops()
        {
            return new GradientStopsProxy(_proxyTarget.GradientStops);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_TextureOffsetX()
        {
            return _proxyTarget.TextureOffsetX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextureOffsetX(System.Single TextureOffsetX)
        {
            _proxyTarget.TextureOffsetX = TextureOffsetX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_TextureOffsetY()
        {
            return _proxyTarget.TextureOffsetY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextureOffsetY(System.Single TextureOffsetY)
        {
            _proxyTarget.TextureOffsetY = TextureOffsetY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextureAlignment get_TextureAlignment()
        {
            return _proxyTarget.TextureAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextureAlignment(Microsoft.Office.Core.MsoTextureAlignment TextureAlignment)
        {
            _proxyTarget.TextureAlignment = TextureAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_TextureHorizontalScale()
        {
            return _proxyTarget.TextureHorizontalScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextureHorizontalScale(System.Single HorizontalScale)
        {
            _proxyTarget.TextureHorizontalScale = HorizontalScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_TextureVerticalScale()
        {
            return _proxyTarget.TextureVerticalScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextureVerticalScale(System.Single VerticalScale)
        {
            _proxyTarget.TextureVerticalScale = VerticalScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_TextureTile()
        {
            return _proxyTarget.TextureTile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextureTile(Microsoft.Office.Core.MsoTriState TextureTile)
        {
            _proxyTarget.TextureTile = TextureTile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_RotateWithObject()
        {
            return _proxyTarget.RotateWithObject;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RotateWithObject(Microsoft.Office.Core.MsoTriState RotateWithObject)
        {
            _proxyTarget.RotateWithObject = RotateWithObject;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PictureEffectsProxy get_PictureEffects()
        {
            return new PictureEffectsProxy(_proxyTarget.PictureEffects);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_GradientAngle()
        {
            return _proxyTarget.GradientAngle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_GradientAngle(System.Single GradientAngle)
        {
            _proxyTarget.GradientAngle = GradientAngle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Background()
        {
            _proxyTarget.Background();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void OneColorGradient(Microsoft.Office.Core.MsoGradientStyle Style, System.Int32 Variant, System.Single Degree)
        {
            _proxyTarget.OneColorGradient(Style, Variant, Degree);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Patterned(Microsoft.Office.Core.MsoPatternType Pattern)
        {
            _proxyTarget.Patterned(Pattern);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PresetGradient(Microsoft.Office.Core.MsoGradientStyle Style, System.Int32 Variant, Microsoft.Office.Core.MsoPresetGradientType PresetGradientType)
        {
            _proxyTarget.PresetGradient(Style, Variant, PresetGradientType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PresetTextured(Microsoft.Office.Core.MsoPresetTexture PresetTexture)
        {
            _proxyTarget.PresetTextured(PresetTexture);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Solid()
        {
            _proxyTarget.Solid();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void TwoColorGradient(Microsoft.Office.Core.MsoGradientStyle Style, System.Int32 Variant)
        {
            _proxyTarget.TwoColorGradient(Style, Variant);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void UserPicture(System.String PictureFile)
        {
            _proxyTarget.UserPicture(PictureFile);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void UserTextured(System.String TextureFile)
        {
            _proxyTarget.UserTextured(TextureFile);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_BackColor()
        {
            return new ColorFormatProxy(_proxyTarget.BackColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BackColor(Microsoft.Office.Core.ColorFormat BackColor)
        {
            _proxyTarget.BackColor = BackColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_ForeColor()
        {
            return new ColorFormatProxy(_proxyTarget.ForeColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ForeColor(Microsoft.Office.Core.ColorFormat ForeColor)
        {
            _proxyTarget.ForeColor = ForeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoGradientColorType get_GradientColorType()
        {
            return _proxyTarget.GradientColorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_GradientDegree()
        {
            return _proxyTarget.GradientDegree;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoGradientStyle get_GradientStyle()
        {
            return _proxyTarget.GradientStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_GradientVariant()
        {
            return _proxyTarget.GradientVariant;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPatternType get_Pattern()
        {
            return _proxyTarget.Pattern;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetGradientType get_PresetGradientType()
        {
            return _proxyTarget.PresetGradientType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetTexture get_PresetTexture()
        {
            return _proxyTarget.PresetTexture;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TextureName()
        {
            return _proxyTarget.TextureName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextureType get_TextureType()
        {
            return _proxyTarget.TextureType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Transparency()
        {
            return _proxyTarget.Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Transparency(System.Single Transparency)
        {
            _proxyTarget.Transparency = Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFillType get_Type()
        {
            return _proxyTarget.Type;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FreeformBuilder which adds IDispose to the interface
    /// </summary>
    public class FreeformBuilderProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FreeformBuilder _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FreeformBuilder which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FreeformBuilderProxy(Microsoft.Office.Core.FreeformBuilder proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddNodes(Microsoft.Office.Core.MsoSegmentType SegmentType, Microsoft.Office.Core.MsoEditingType EditingType, System.Single X1, System.Single Y1, System.Single X2, System.Single Y2, System.Single X3, System.Single Y3)
        {
            _proxyTarget.AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy ConvertToShape()
        {
            return new ShapeProxy(_proxyTarget.ConvertToShape());
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for GroupShapes which adds IDispose to the interface
    /// </summary>
    public class GroupShapesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.GroupShapes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.GroupShapes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public GroupShapesProxy(Microsoft.Office.Core.GroupShapes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Item(System.Object Index)
        {
            return new ShapeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeRangeProxy Range(System.Object Index)
        {
            return new ShapeRangeProxy(_proxyTarget.Range(Index));
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for LineFormat which adds IDispose to the interface
    /// </summary>
    public class LineFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.LineFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.LineFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public LineFormatProxy(Microsoft.Office.Core.LineFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Weight()
        {
            return _proxyTarget.Weight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Weight(System.Single Weight)
        {
            _proxyTarget.Weight = Weight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_InsetPen()
        {
            return _proxyTarget.InsetPen;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InsetPen(Microsoft.Office.Core.MsoTriState InsetPen)
        {
            _proxyTarget.InsetPen = InsetPen;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_BackColor()
        {
            return new ColorFormatProxy(_proxyTarget.BackColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BackColor(Microsoft.Office.Core.ColorFormat BackColor)
        {
            _proxyTarget.BackColor = BackColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoArrowheadLength get_BeginArrowheadLength()
        {
            return _proxyTarget.BeginArrowheadLength;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginArrowheadLength(Microsoft.Office.Core.MsoArrowheadLength BeginArrowheadLength)
        {
            _proxyTarget.BeginArrowheadLength = BeginArrowheadLength;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoArrowheadStyle get_BeginArrowheadStyle()
        {
            return _proxyTarget.BeginArrowheadStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginArrowheadStyle(Microsoft.Office.Core.MsoArrowheadStyle BeginArrowheadStyle)
        {
            _proxyTarget.BeginArrowheadStyle = BeginArrowheadStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoArrowheadWidth get_BeginArrowheadWidth()
        {
            return _proxyTarget.BeginArrowheadWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BeginArrowheadWidth(Microsoft.Office.Core.MsoArrowheadWidth BeginArrowheadWidth)
        {
            _proxyTarget.BeginArrowheadWidth = BeginArrowheadWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoLineDashStyle get_DashStyle()
        {
            return _proxyTarget.DashStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DashStyle(Microsoft.Office.Core.MsoLineDashStyle DashStyle)
        {
            _proxyTarget.DashStyle = DashStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoArrowheadLength get_EndArrowheadLength()
        {
            return _proxyTarget.EndArrowheadLength;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_EndArrowheadLength(Microsoft.Office.Core.MsoArrowheadLength EndArrowheadLength)
        {
            _proxyTarget.EndArrowheadLength = EndArrowheadLength;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoArrowheadStyle get_EndArrowheadStyle()
        {
            return _proxyTarget.EndArrowheadStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_EndArrowheadStyle(Microsoft.Office.Core.MsoArrowheadStyle EndArrowheadStyle)
        {
            _proxyTarget.EndArrowheadStyle = EndArrowheadStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoArrowheadWidth get_EndArrowheadWidth()
        {
            return _proxyTarget.EndArrowheadWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_EndArrowheadWidth(Microsoft.Office.Core.MsoArrowheadWidth EndArrowheadWidth)
        {
            _proxyTarget.EndArrowheadWidth = EndArrowheadWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_ForeColor()
        {
            return new ColorFormatProxy(_proxyTarget.ForeColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ForeColor(Microsoft.Office.Core.ColorFormat ForeColor)
        {
            _proxyTarget.ForeColor = ForeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPatternType get_Pattern()
        {
            return _proxyTarget.Pattern;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Pattern(Microsoft.Office.Core.MsoPatternType Pattern)
        {
            _proxyTarget.Pattern = Pattern;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoLineStyle get_Style()
        {
            return _proxyTarget.Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Style(Microsoft.Office.Core.MsoLineStyle Style)
        {
            _proxyTarget.Style = Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Transparency()
        {
            return _proxyTarget.Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Transparency(System.Single Transparency)
        {
            _proxyTarget.Transparency = Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ShapeNode which adds IDispose to the interface
    /// </summary>
    public class ShapeNodeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ShapeNode _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ShapeNode which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ShapeNodeProxy(Microsoft.Office.Core.ShapeNode proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoEditingType get_EditingType()
        {
            return _proxyTarget.EditingType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Points()
        {
            return _proxyTarget.Points;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSegmentType get_SegmentType()
        {
            return _proxyTarget.SegmentType;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ShapeNodes which adds IDispose to the interface
    /// </summary>
    public class ShapeNodesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ShapeNodes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ShapeNodes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ShapeNodesProxy(Microsoft.Office.Core.ShapeNodes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeNodeProxy Item(System.Object Index)
        {
            return new ShapeNodeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Int32 Index)
        {
            _proxyTarget.Delete(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Insert(System.Int32 Index, Microsoft.Office.Core.MsoSegmentType SegmentType, Microsoft.Office.Core.MsoEditingType EditingType, System.Single X1, System.Single Y1, System.Single X2, System.Single Y2, System.Single X3, System.Single Y3)
        {
            _proxyTarget.Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetEditingType(System.Int32 Index, Microsoft.Office.Core.MsoEditingType EditingType)
        {
            _proxyTarget.SetEditingType(Index, EditingType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetPosition(System.Int32 Index, System.Single X1, System.Single Y1)
        {
            _proxyTarget.SetPosition(Index, X1, Y1);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetSegmentType(System.Int32 Index, Microsoft.Office.Core.MsoSegmentType SegmentType)
        {
            _proxyTarget.SetSegmentType(Index, SegmentType);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PictureFormat which adds IDispose to the interface
    /// </summary>
    public class PictureFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PictureFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PictureFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PictureFormatProxy(Microsoft.Office.Core.PictureFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementBrightness(System.Single Increment)
        {
            _proxyTarget.IncrementBrightness(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementContrast(System.Single Increment)
        {
            _proxyTarget.IncrementContrast(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Brightness()
        {
            return _proxyTarget.Brightness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Brightness(System.Single Brightness)
        {
            _proxyTarget.Brightness = Brightness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPictureColorType get_ColorType()
        {
            return _proxyTarget.ColorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ColorType(Microsoft.Office.Core.MsoPictureColorType ColorType)
        {
            _proxyTarget.ColorType = ColorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Contrast()
        {
            return _proxyTarget.Contrast;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Contrast(System.Single Contrast)
        {
            _proxyTarget.Contrast = Contrast;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_CropBottom()
        {
            return _proxyTarget.CropBottom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CropBottom(System.Single CropBottom)
        {
            _proxyTarget.CropBottom = CropBottom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_CropLeft()
        {
            return _proxyTarget.CropLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CropLeft(System.Single CropLeft)
        {
            _proxyTarget.CropLeft = CropLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_CropRight()
        {
            return _proxyTarget.CropRight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CropRight(System.Single CropRight)
        {
            _proxyTarget.CropRight = CropRight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_CropTop()
        {
            return _proxyTarget.CropTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CropTop(System.Single CropTop)
        {
            _proxyTarget.CropTop = CropTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_TransparencyColor()
        {
            return _proxyTarget.TransparencyColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TransparencyColor(System.Int32 TransparencyColor)
        {
            _proxyTarget.TransparencyColor = TransparencyColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_TransparentBackground()
        {
            return _proxyTarget.TransparentBackground;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TransparentBackground(Microsoft.Office.Core.MsoTriState TransparentBackground)
        {
            _proxyTarget.TransparentBackground = TransparentBackground;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CropProxy get_Crop()
        {
            return new CropProxy(_proxyTarget.Crop);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ShadowFormat which adds IDispose to the interface
    /// </summary>
    public class ShadowFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ShadowFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ShadowFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ShadowFormatProxy(Microsoft.Office.Core.ShadowFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementOffsetX(System.Single Increment)
        {
            _proxyTarget.IncrementOffsetX(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementOffsetY(System.Single Increment)
        {
            _proxyTarget.IncrementOffsetY(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_ForeColor()
        {
            return new ColorFormatProxy(_proxyTarget.ForeColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ForeColor(Microsoft.Office.Core.ColorFormat ForeColor)
        {
            _proxyTarget.ForeColor = ForeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Obscured()
        {
            return _proxyTarget.Obscured;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Obscured(Microsoft.Office.Core.MsoTriState Obscured)
        {
            _proxyTarget.Obscured = Obscured;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_OffsetX()
        {
            return _proxyTarget.OffsetX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OffsetX(System.Single OffsetX)
        {
            _proxyTarget.OffsetX = OffsetX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_OffsetY()
        {
            return _proxyTarget.OffsetY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OffsetY(System.Single OffsetY)
        {
            _proxyTarget.OffsetY = OffsetY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Transparency()
        {
            return _proxyTarget.Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Transparency(System.Single Transparency)
        {
            _proxyTarget.Transparency = Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoShadowType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoShadowType Type)
        {
            _proxyTarget.Type = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoShadowStyle get_Style()
        {
            return _proxyTarget.Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Style(Microsoft.Office.Core.MsoShadowStyle ShadowStyle)
        {
            _proxyTarget.Style = ShadowStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Blur()
        {
            return _proxyTarget.Blur;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Blur(System.Single Blur)
        {
            _proxyTarget.Blur = Blur;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Size()
        {
            return _proxyTarget.Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Size(System.Single Size)
        {
            _proxyTarget.Size = Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_RotateWithShape()
        {
            return _proxyTarget.RotateWithShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RotateWithShape(Microsoft.Office.Core.MsoTriState RotateWithShape)
        {
            _proxyTarget.RotateWithShape = RotateWithShape;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Script which adds IDispose to the interface
    /// </summary>
    public class ScriptProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Script _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Script which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ScriptProxy(Microsoft.Office.Core.Script proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Extended()
        {
            return _proxyTarget.Extended;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Extended(System.String Extended)
        {
            _proxyTarget.Extended = Extended;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Id(System.String Id)
        {
            _proxyTarget.Id = Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoScriptLanguage get_Language()
        {
            return _proxyTarget.Language;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Language(Microsoft.Office.Core.MsoScriptLanguage Language)
        {
            _proxyTarget.Language = Language;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoScriptLocation get_Location()
        {
            return _proxyTarget.Location;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Shape()
        {
            return _proxyTarget.Shape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ScriptText()
        {
            return _proxyTarget.ScriptText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ScriptText(System.String Script)
        {
            _proxyTarget.ScriptText = Script;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Scripts which adds IDispose to the interface
    /// </summary>
    public class ScriptsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Scripts _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Scripts which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ScriptsProxy(Microsoft.Office.Core.Scripts proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ScriptProxy Item(System.Object Index)
        {
            return new ScriptProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ScriptProxy Add(System.Object Anchor, Microsoft.Office.Core.MsoScriptLocation Location, Microsoft.Office.Core.MsoScriptLanguage Language, System.String Id, System.String Extended, System.String ScriptText)
        {
            return new ScriptProxy(_proxyTarget.Add(Anchor, Location, Language, Id, Extended, ScriptText));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Shape which adds IDispose to the interface
    /// </summary>
    public class ShapeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Shape _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Shape which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ShapeProxy(Microsoft.Office.Core.Shape proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ReflectionFormatProxy get_Reflection()
        {
            return new ReflectionFormatProxy(_proxyTarget.Reflection);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasSmartArt()
        {
            return _proxyTarget.HasSmartArt;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtProxy get_SmartArt()
        {
            return new SmartArtProxy(_proxyTarget.SmartArt);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ConvertTextToSmartArt(Microsoft.Office.Core.SmartArtLayout Layout)
        {
            _proxyTarget.ConvertTextToSmartArt(Layout);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Title(System.String Title)
        {
            _proxyTarget.Title = Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ZOrderPosition()
        {
            return _proxyTarget.ZOrderPosition;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ScriptProxy get_Script()
        {
            return new ScriptProxy(_proxyTarget.Script);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_AlternativeText()
        {
            return _proxyTarget.AlternativeText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AlternativeText(System.String AlternativeText)
        {
            _proxyTarget.AlternativeText = AlternativeText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasDiagram()
        {
            return _proxyTarget.HasDiagram;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDiagramProxy get_Diagram()
        {
            return new IMsoDiagramProxy(_proxyTarget.Diagram);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasDiagramNode()
        {
            return _proxyTarget.HasDiagramNode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodeProxy get_DiagramNode()
        {
            return new DiagramNodeProxy(_proxyTarget.DiagramNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Child()
        {
            return _proxyTarget.Child;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_ParentGroup()
        {
            return new ShapeProxy(_proxyTarget.ParentGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CanvasShapesProxy get_CanvasItems()
        {
            return new CanvasShapesProxy(_proxyTarget.CanvasItems);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropLeft(System.Single Increment)
        {
            _proxyTarget.CanvasCropLeft(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropTop(System.Single Increment)
        {
            _proxyTarget.CanvasCropTop(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropRight(System.Single Increment)
        {
            _proxyTarget.CanvasCropRight(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropBottom(System.Single Increment)
        {
            _proxyTarget.CanvasCropBottom(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RTF(System.String arg0)
        {
            _proxyTarget.RTF = arg0;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextFrame2Proxy get_TextFrame2()
        {
            return new TextFrame2Proxy(_proxyTarget.TextFrame2);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Cut()
        {
            _proxyTarget.Cut();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Copy()
        {
            _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasChart()
        {
            return _proxyTarget.HasChart;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartProxy get_Chart()
        {
            return new IMsoChartProxy(_proxyTarget.Chart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoShapeStyleIndex get_ShapeStyle()
        {
            return _proxyTarget.ShapeStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShapeStyle(Microsoft.Office.Core.MsoShapeStyleIndex ShapeStyle)
        {
            _proxyTarget.ShapeStyle = ShapeStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBackgroundStyleIndex get_BackgroundStyle()
        {
            return _proxyTarget.BackgroundStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BackgroundStyle(Microsoft.Office.Core.MsoBackgroundStyleIndex BackgroundStyle)
        {
            _proxyTarget.BackgroundStyle = BackgroundStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SoftEdgeFormatProxy get_SoftEdge()
        {
            return new SoftEdgeFormatProxy(_proxyTarget.SoftEdge);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GlowFormatProxy get_Glow()
        {
            return new GlowFormatProxy(_proxyTarget.Glow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GroupShapesProxy get_GroupItems()
        {
            return new GroupShapesProxy(_proxyTarget.GroupItems);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Single Height)
        {
            _proxyTarget.Height = Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HorizontalFlip()
        {
            return _proxyTarget.HorizontalFlip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Single Left)
        {
            _proxyTarget.Left = Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual LineFormatProxy get_Line()
        {
            return new LineFormatProxy(_proxyTarget.Line);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_LockAspectRatio()
        {
            return _proxyTarget.LockAspectRatio;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LockAspectRatio(Microsoft.Office.Core.MsoTriState LockAspectRatio)
        {
            _proxyTarget.LockAspectRatio = LockAspectRatio;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String Name)
        {
            _proxyTarget.Name = Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeNodesProxy get_Nodes()
        {
            return new ShapeNodesProxy(_proxyTarget.Nodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Rotation()
        {
            return _proxyTarget.Rotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Rotation(System.Single Rotation)
        {
            _proxyTarget.Rotation = Rotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PictureFormatProxy get_PictureFormat()
        {
            return new PictureFormatProxy(_proxyTarget.PictureFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShadowFormatProxy get_Shadow()
        {
            return new ShadowFormatProxy(_proxyTarget.Shadow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextEffectFormatProxy get_TextEffect()
        {
            return new TextEffectFormatProxy(_proxyTarget.TextEffect);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextFrameProxy get_TextFrame()
        {
            return new TextFrameProxy(_proxyTarget.TextFrame);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThreeDFormatProxy get_ThreeD()
        {
            return new ThreeDFormatProxy(_proxyTarget.ThreeD);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Single Top)
        {
            _proxyTarget.Top = Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoShapeType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_VerticalFlip()
        {
            return _proxyTarget.VerticalFlip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Vertices()
        {
            return _proxyTarget.Vertices;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Single Width)
        {
            _proxyTarget.Width = Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Apply()
        {
            _proxyTarget.Apply();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Duplicate()
        {
            return new ShapeProxy(_proxyTarget.Duplicate());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Flip(Microsoft.Office.Core.MsoFlipCmd FlipCmd)
        {
            _proxyTarget.Flip(FlipCmd);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementLeft(System.Single Increment)
        {
            _proxyTarget.IncrementLeft(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotation(System.Single Increment)
        {
            _proxyTarget.IncrementRotation(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementTop(System.Single Increment)
        {
            _proxyTarget.IncrementTop(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PickUp()
        {
            _proxyTarget.PickUp();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RerouteConnections()
        {
            _proxyTarget.RerouteConnections();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ScaleHeight(System.Single Factor, Microsoft.Office.Core.MsoTriState RelativeToOriginalSize, Microsoft.Office.Core.MsoScaleFrom fScale)
        {
            _proxyTarget.ScaleHeight(Factor, RelativeToOriginalSize, fScale);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ScaleWidth(System.Single Factor, Microsoft.Office.Core.MsoTriState RelativeToOriginalSize, Microsoft.Office.Core.MsoScaleFrom fScale)
        {
            _proxyTarget.ScaleWidth(Factor, RelativeToOriginalSize, fScale);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select(System.Object Replace)
        {
            _proxyTarget.Select(Replace);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetShapesDefaultProperties()
        {
            _proxyTarget.SetShapesDefaultProperties();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeRangeProxy Ungroup()
        {
            return new ShapeRangeProxy(_proxyTarget.Ungroup());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ZOrder(Microsoft.Office.Core.MsoZOrderCmd ZOrderCmd)
        {
            _proxyTarget.ZOrder(ZOrderCmd);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual AdjustmentsProxy get_Adjustments()
        {
            return new AdjustmentsProxy(_proxyTarget.Adjustments);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoAutoShapeType get_AutoShapeType()
        {
            return _proxyTarget.AutoShapeType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoShapeType(Microsoft.Office.Core.MsoAutoShapeType AutoShapeType)
        {
            _proxyTarget.AutoShapeType = AutoShapeType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBlackWhiteMode get_BlackWhiteMode()
        {
            return _proxyTarget.BlackWhiteMode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BlackWhiteMode(Microsoft.Office.Core.MsoBlackWhiteMode BlackWhiteMode)
        {
            _proxyTarget.BlackWhiteMode = BlackWhiteMode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CalloutFormatProxy get_Callout()
        {
            return new CalloutFormatProxy(_proxyTarget.Callout);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ConnectionSiteCount()
        {
            return _proxyTarget.ConnectionSiteCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Connector()
        {
            return _proxyTarget.Connector;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ConnectorFormatProxy get_ConnectorFormat()
        {
            return new ConnectorFormatProxy(_proxyTarget.ConnectorFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FillFormatProxy get_Fill()
        {
            return new FillFormatProxy(_proxyTarget.Fill);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ShapeRange which adds IDispose to the interface
    /// </summary>
    public class ShapeRangeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ShapeRange _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ShapeRange which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ShapeRangeProxy(Microsoft.Office.Core.ShapeRange proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartProxy get_Chart()
        {
            return new IMsoChartProxy(_proxyTarget.Chart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoShapeStyleIndex get_ShapeStyle()
        {
            return _proxyTarget.ShapeStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShapeStyle(Microsoft.Office.Core.MsoShapeStyleIndex ShapeStyle)
        {
            _proxyTarget.ShapeStyle = ShapeStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBackgroundStyleIndex get_BackgroundStyle()
        {
            return _proxyTarget.BackgroundStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BackgroundStyle(Microsoft.Office.Core.MsoBackgroundStyleIndex BackgroundStyle)
        {
            _proxyTarget.BackgroundStyle = BackgroundStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SoftEdgeFormatProxy get_SoftEdge()
        {
            return new SoftEdgeFormatProxy(_proxyTarget.SoftEdge);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GlowFormatProxy get_Glow()
        {
            return new GlowFormatProxy(_proxyTarget.Glow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ReflectionFormatProxy get_Reflection()
        {
            return new ReflectionFormatProxy(_proxyTarget.Reflection);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Title(System.String Title)
        {
            _proxyTarget.Title = Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoShapeType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_VerticalFlip()
        {
            return _proxyTarget.VerticalFlip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Vertices()
        {
            return _proxyTarget.Vertices;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Single Width)
        {
            _proxyTarget.Width = Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ZOrderPosition()
        {
            return _proxyTarget.ZOrderPosition;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ScriptProxy get_Script()
        {
            return new ScriptProxy(_proxyTarget.Script);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_AlternativeText()
        {
            return _proxyTarget.AlternativeText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AlternativeText(System.String AlternativeText)
        {
            _proxyTarget.AlternativeText = AlternativeText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasDiagram()
        {
            return _proxyTarget.HasDiagram;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDiagramProxy get_Diagram()
        {
            return new IMsoDiagramProxy(_proxyTarget.Diagram);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasDiagramNode()
        {
            return _proxyTarget.HasDiagramNode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodeProxy get_DiagramNode()
        {
            return new DiagramNodeProxy(_proxyTarget.DiagramNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Child()
        {
            return _proxyTarget.Child;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_ParentGroup()
        {
            return new ShapeProxy(_proxyTarget.ParentGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CanvasShapesProxy get_CanvasItems()
        {
            return new CanvasShapesProxy(_proxyTarget.CanvasItems);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropLeft(System.Single Increment)
        {
            _proxyTarget.CanvasCropLeft(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropTop(System.Single Increment)
        {
            _proxyTarget.CanvasCropTop(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropRight(System.Single Increment)
        {
            _proxyTarget.CanvasCropRight(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CanvasCropBottom(System.Single Increment)
        {
            _proxyTarget.CanvasCropBottom(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RTF(System.String arg0)
        {
            _proxyTarget.RTF = arg0;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextFrame2Proxy get_TextFrame2()
        {
            return new TextFrame2Proxy(_proxyTarget.TextFrame2);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Cut()
        {
            _proxyTarget.Cut();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Copy()
        {
            _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasChart()
        {
            return _proxyTarget.HasChart;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBlackWhiteMode get_BlackWhiteMode()
        {
            return _proxyTarget.BlackWhiteMode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BlackWhiteMode(Microsoft.Office.Core.MsoBlackWhiteMode BlackWhiteMode)
        {
            _proxyTarget.BlackWhiteMode = BlackWhiteMode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CalloutFormatProxy get_Callout()
        {
            return new CalloutFormatProxy(_proxyTarget.Callout);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ConnectionSiteCount()
        {
            return _proxyTarget.ConnectionSiteCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Connector()
        {
            return _proxyTarget.Connector;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ConnectorFormatProxy get_ConnectorFormat()
        {
            return new ConnectorFormatProxy(_proxyTarget.ConnectorFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FillFormatProxy get_Fill()
        {
            return new FillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GroupShapesProxy get_GroupItems()
        {
            return new GroupShapesProxy(_proxyTarget.GroupItems);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Single Height)
        {
            _proxyTarget.Height = Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HorizontalFlip()
        {
            return _proxyTarget.HorizontalFlip;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Single Left)
        {
            _proxyTarget.Left = Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual LineFormatProxy get_Line()
        {
            return new LineFormatProxy(_proxyTarget.Line);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_LockAspectRatio()
        {
            return _proxyTarget.LockAspectRatio;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LockAspectRatio(Microsoft.Office.Core.MsoTriState LockAspectRatio)
        {
            _proxyTarget.LockAspectRatio = LockAspectRatio;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String Name)
        {
            _proxyTarget.Name = Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeNodesProxy get_Nodes()
        {
            return new ShapeNodesProxy(_proxyTarget.Nodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Rotation()
        {
            return _proxyTarget.Rotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Rotation(System.Single Rotation)
        {
            _proxyTarget.Rotation = Rotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PictureFormatProxy get_PictureFormat()
        {
            return new PictureFormatProxy(_proxyTarget.PictureFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShadowFormatProxy get_Shadow()
        {
            return new ShadowFormatProxy(_proxyTarget.Shadow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextEffectFormatProxy get_TextEffect()
        {
            return new TextEffectFormatProxy(_proxyTarget.TextEffect);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextFrameProxy get_TextFrame()
        {
            return new TextFrameProxy(_proxyTarget.TextFrame);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThreeDFormatProxy get_ThreeD()
        {
            return new ThreeDFormatProxy(_proxyTarget.ThreeD);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Single Top)
        {
            _proxyTarget.Top = Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Item(System.Object Index)
        {
            return new ShapeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Align(Microsoft.Office.Core.MsoAlignCmd AlignCmd, Microsoft.Office.Core.MsoTriState RelativeTo)
        {
            _proxyTarget.Align(AlignCmd, RelativeTo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Apply()
        {
            _proxyTarget.Apply();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Distribute(Microsoft.Office.Core.MsoDistributeCmd DistributeCmd, Microsoft.Office.Core.MsoTriState RelativeTo)
        {
            _proxyTarget.Distribute(DistributeCmd, RelativeTo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeRangeProxy Duplicate()
        {
            return new ShapeRangeProxy(_proxyTarget.Duplicate());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Flip(Microsoft.Office.Core.MsoFlipCmd FlipCmd)
        {
            _proxyTarget.Flip(FlipCmd);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementLeft(System.Single Increment)
        {
            _proxyTarget.IncrementLeft(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotation(System.Single Increment)
        {
            _proxyTarget.IncrementRotation(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementTop(System.Single Increment)
        {
            _proxyTarget.IncrementTop(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Group()
        {
            return new ShapeProxy(_proxyTarget.Group());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PickUp()
        {
            _proxyTarget.PickUp();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Regroup()
        {
            return new ShapeProxy(_proxyTarget.Regroup());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RerouteConnections()
        {
            _proxyTarget.RerouteConnections();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ScaleHeight(System.Single Factor, Microsoft.Office.Core.MsoTriState RelativeToOriginalSize, Microsoft.Office.Core.MsoScaleFrom fScale)
        {
            _proxyTarget.ScaleHeight(Factor, RelativeToOriginalSize, fScale);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ScaleWidth(System.Single Factor, Microsoft.Office.Core.MsoTriState RelativeToOriginalSize, Microsoft.Office.Core.MsoScaleFrom fScale)
        {
            _proxyTarget.ScaleWidth(Factor, RelativeToOriginalSize, fScale);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select(System.Object Replace)
        {
            _proxyTarget.Select(Replace);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetShapesDefaultProperties()
        {
            _proxyTarget.SetShapesDefaultProperties();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeRangeProxy Ungroup()
        {
            return new ShapeRangeProxy(_proxyTarget.Ungroup());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ZOrder(Microsoft.Office.Core.MsoZOrderCmd ZOrderCmd)
        {
            _proxyTarget.ZOrder(ZOrderCmd);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual AdjustmentsProxy get_Adjustments()
        {
            return new AdjustmentsProxy(_proxyTarget.Adjustments);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoAutoShapeType get_AutoShapeType()
        {
            return _proxyTarget.AutoShapeType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoShapeType(Microsoft.Office.Core.MsoAutoShapeType AutoShapeType)
        {
            _proxyTarget.AutoShapeType = AutoShapeType;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Shapes which adds IDispose to the interface
    /// </summary>
    public class ShapesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Shapes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Shapes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ShapesProxy(Microsoft.Office.Core.Shapes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Item(System.Object Index)
        {
            return new ShapeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddCallout(Microsoft.Office.Core.MsoCalloutType Type, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddCallout(Type, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddConnector(Microsoft.Office.Core.MsoConnectorType Type, System.Single BeginX, System.Single BeginY, System.Single EndX, System.Single EndY)
        {
            return new ShapeProxy(_proxyTarget.AddConnector(Type, BeginX, BeginY, EndX, EndY));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddCurve(System.Object SafeArrayOfPoints)
        {
            return new ShapeProxy(_proxyTarget.AddCurve(SafeArrayOfPoints));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddLabel(Microsoft.Office.Core.MsoTextOrientation Orientation, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddLabel(Orientation, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddLine(System.Single BeginX, System.Single BeginY, System.Single EndX, System.Single EndY)
        {
            return new ShapeProxy(_proxyTarget.AddLine(BeginX, BeginY, EndX, EndY));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddPicture(System.String FileName, Microsoft.Office.Core.MsoTriState LinkToFile, Microsoft.Office.Core.MsoTriState SaveWithDocument, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddPolyline(System.Object SafeArrayOfPoints)
        {
            return new ShapeProxy(_proxyTarget.AddPolyline(SafeArrayOfPoints));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddShape(Microsoft.Office.Core.MsoAutoShapeType Type, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddShape(Type, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddTextEffect(Microsoft.Office.Core.MsoPresetTextEffect PresetTextEffect, System.String Text, System.String FontName, System.Single FontSize, Microsoft.Office.Core.MsoTriState FontBold, Microsoft.Office.Core.MsoTriState FontItalic, System.Single Left, System.Single Top)
        {
            return new ShapeProxy(_proxyTarget.AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddTextbox(Microsoft.Office.Core.MsoTextOrientation Orientation, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddTextbox(Orientation, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual FreeformBuilderProxy BuildFreeform(Microsoft.Office.Core.MsoEditingType EditingType, System.Single X1, System.Single Y1)
        {
            return new FreeformBuilderProxy(_proxyTarget.BuildFreeform(EditingType, X1, Y1));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeRangeProxy Range(System.Object Index)
        {
            return new ShapeRangeProxy(_proxyTarget.Range(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SelectAll()
        {
            _proxyTarget.SelectAll();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_Background()
        {
            return new ShapeProxy(_proxyTarget.Background);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_Default()
        {
            return new ShapeProxy(_proxyTarget.Default);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddDiagram(Microsoft.Office.Core.MsoDiagramType Type, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddDiagram(Type, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddCanvas(System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddCanvas(Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddChart(Microsoft.Office.Core.XlChartType Type, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddChart(Type, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddTable(System.Int32 NumRows, System.Int32 NumColumns, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddTable(NumRows, NumColumns, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddSmartArt(Microsoft.Office.Core.SmartArtLayout Layout, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddSmartArt(Layout, Left, Top, Width, Height));
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TextEffectFormat which adds IDispose to the interface
    /// </summary>
    public class TextEffectFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TextEffectFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TextEffectFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TextEffectFormatProxy(Microsoft.Office.Core.TextEffectFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ToggleVerticalText()
        {
            _proxyTarget.ToggleVerticalText();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextEffectAlignment get_Alignment()
        {
            return _proxyTarget.Alignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Alignment(Microsoft.Office.Core.MsoTextEffectAlignment Alignment)
        {
            _proxyTarget.Alignment = Alignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_FontBold()
        {
            return _proxyTarget.FontBold;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FontBold(Microsoft.Office.Core.MsoTriState FontBold)
        {
            _proxyTarget.FontBold = FontBold;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_FontItalic()
        {
            return _proxyTarget.FontItalic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FontItalic(Microsoft.Office.Core.MsoTriState FontItalic)
        {
            _proxyTarget.FontItalic = FontItalic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FontName()
        {
            return _proxyTarget.FontName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FontName(System.String FontName)
        {
            _proxyTarget.FontName = FontName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_FontSize()
        {
            return _proxyTarget.FontSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FontSize(System.Single FontSize)
        {
            _proxyTarget.FontSize = FontSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_KernedPairs()
        {
            return _proxyTarget.KernedPairs;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_KernedPairs(Microsoft.Office.Core.MsoTriState KernedPairs)
        {
            _proxyTarget.KernedPairs = KernedPairs;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_NormalizedHeight()
        {
            return _proxyTarget.NormalizedHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NormalizedHeight(Microsoft.Office.Core.MsoTriState NormalizedHeight)
        {
            _proxyTarget.NormalizedHeight = NormalizedHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetTextEffectShape get_PresetShape()
        {
            return _proxyTarget.PresetShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PresetShape(Microsoft.Office.Core.MsoPresetTextEffectShape PresetShape)
        {
            _proxyTarget.PresetShape = PresetShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetTextEffect get_PresetTextEffect()
        {
            return _proxyTarget.PresetTextEffect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PresetTextEffect(Microsoft.Office.Core.MsoPresetTextEffect Preset)
        {
            _proxyTarget.PresetTextEffect = Preset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_RotatedChars()
        {
            return _proxyTarget.RotatedChars;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RotatedChars(Microsoft.Office.Core.MsoTriState RotatedChars)
        {
            _proxyTarget.RotatedChars = RotatedChars;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String Text)
        {
            _proxyTarget.Text = Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Tracking()
        {
            return _proxyTarget.Tracking;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tracking(System.Single Tracking)
        {
            _proxyTarget.Tracking = Tracking;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TextFrame which adds IDispose to the interface
    /// </summary>
    public class TextFrameProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TextFrame _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TextFrame which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TextFrameProxy(Microsoft.Office.Core.TextFrame proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginBottom()
        {
            return _proxyTarget.MarginBottom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginBottom(System.Single MarginBottom)
        {
            _proxyTarget.MarginBottom = MarginBottom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginLeft()
        {
            return _proxyTarget.MarginLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginLeft(System.Single MarginLeft)
        {
            _proxyTarget.MarginLeft = MarginLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginRight()
        {
            return _proxyTarget.MarginRight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginRight(System.Single MarginRight)
        {
            _proxyTarget.MarginRight = MarginRight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginTop()
        {
            return _proxyTarget.MarginTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginTop(System.Single MarginTop)
        {
            _proxyTarget.MarginTop = MarginTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextOrientation get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(Microsoft.Office.Core.MsoTextOrientation Orientation)
        {
            _proxyTarget.Orientation = Orientation;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThreeDFormat which adds IDispose to the interface
    /// </summary>
    public class ThreeDFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThreeDFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThreeDFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThreeDFormatProxy(Microsoft.Office.Core.ThreeDFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FieldOfView(System.Single FOV)
        {
            _proxyTarget.FieldOfView = FOV;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_ProjectText()
        {
            return _proxyTarget.ProjectText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProjectText(Microsoft.Office.Core.MsoTriState ProjectText)
        {
            _proxyTarget.ProjectText = ProjectText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_LightAngle()
        {
            return _proxyTarget.LightAngle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LightAngle(System.Single LightAngle)
        {
            _proxyTarget.LightAngle = LightAngle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetPresetCamera(Microsoft.Office.Core.MsoPresetCamera PresetCamera)
        {
            _proxyTarget.SetPresetCamera(PresetCamera);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotationZ(System.Single Increment)
        {
            _proxyTarget.IncrementRotationZ(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotationHorizontal(System.Single Increment)
        {
            _proxyTarget.IncrementRotationHorizontal(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotationVertical(System.Single Increment)
        {
            _proxyTarget.IncrementRotationVertical(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoLightRigType get_PresetLighting()
        {
            return _proxyTarget.PresetLighting;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PresetLighting(Microsoft.Office.Core.MsoLightRigType PresetLightRigType)
        {
            _proxyTarget.PresetLighting = PresetLightRigType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Z()
        {
            return _proxyTarget.Z;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Z(System.Single Z)
        {
            _proxyTarget.Z = Z;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBevelType get_BevelTopType()
        {
            return _proxyTarget.BevelTopType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BevelTopType(Microsoft.Office.Core.MsoBevelType BevelTopType)
        {
            _proxyTarget.BevelTopType = BevelTopType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BevelTopInset()
        {
            return _proxyTarget.BevelTopInset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BevelTopInset(System.Single BevelTopInset)
        {
            _proxyTarget.BevelTopInset = BevelTopInset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BevelTopDepth()
        {
            return _proxyTarget.BevelTopDepth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BevelTopDepth(System.Single BevelTopDepth)
        {
            _proxyTarget.BevelTopDepth = BevelTopDepth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBevelType get_BevelBottomType()
        {
            return _proxyTarget.BevelBottomType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BevelBottomType(Microsoft.Office.Core.MsoBevelType BevelBottomType)
        {
            _proxyTarget.BevelBottomType = BevelBottomType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BevelBottomInset()
        {
            return _proxyTarget.BevelBottomInset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BevelBottomInset(System.Single BevelBottomInset)
        {
            _proxyTarget.BevelBottomInset = BevelBottomInset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BevelBottomDepth()
        {
            return _proxyTarget.BevelBottomDepth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BevelBottomDepth(System.Single BevelBottomDepth)
        {
            _proxyTarget.BevelBottomDepth = BevelBottomDepth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetCamera get_PresetCamera()
        {
            return _proxyTarget.PresetCamera;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_RotationZ()
        {
            return _proxyTarget.RotationZ;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RotationZ(System.Single RotationZ)
        {
            _proxyTarget.RotationZ = RotationZ;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_ContourWidth()
        {
            return _proxyTarget.ContourWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ContourWidth(System.Single Width)
        {
            _proxyTarget.ContourWidth = Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_ContourColor()
        {
            return new ColorFormatProxy(_proxyTarget.ContourColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_FieldOfView()
        {
            return _proxyTarget.FieldOfView;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotationX(System.Single Increment)
        {
            _proxyTarget.IncrementRotationX(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void IncrementRotationY(System.Single Increment)
        {
            _proxyTarget.IncrementRotationY(Increment);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ResetRotation()
        {
            _proxyTarget.ResetRotation();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetThreeDFormat(Microsoft.Office.Core.MsoPresetThreeDFormat PresetThreeDFormat)
        {
            _proxyTarget.SetThreeDFormat(PresetThreeDFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetExtrusionDirection(Microsoft.Office.Core.MsoPresetExtrusionDirection PresetExtrusionDirection)
        {
            _proxyTarget.SetExtrusionDirection(PresetExtrusionDirection);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Depth()
        {
            return _proxyTarget.Depth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Depth(System.Single Depth)
        {
            _proxyTarget.Depth = Depth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_ExtrusionColor()
        {
            return new ColorFormatProxy(_proxyTarget.ExtrusionColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoExtrusionColorType get_ExtrusionColorType()
        {
            return _proxyTarget.ExtrusionColorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ExtrusionColorType(Microsoft.Office.Core.MsoExtrusionColorType ExtrusionColorType)
        {
            _proxyTarget.ExtrusionColorType = ExtrusionColorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Perspective()
        {
            return _proxyTarget.Perspective;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Perspective(Microsoft.Office.Core.MsoTriState Perspective)
        {
            _proxyTarget.Perspective = Perspective;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetExtrusionDirection get_PresetExtrusionDirection()
        {
            return _proxyTarget.PresetExtrusionDirection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetLightingDirection get_PresetLightingDirection()
        {
            return _proxyTarget.PresetLightingDirection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PresetLightingDirection(Microsoft.Office.Core.MsoPresetLightingDirection PresetLightingDirection)
        {
            _proxyTarget.PresetLightingDirection = PresetLightingDirection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetLightingSoftness get_PresetLightingSoftness()
        {
            return _proxyTarget.PresetLightingSoftness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PresetLightingSoftness(Microsoft.Office.Core.MsoPresetLightingSoftness PresetLightingSoftness)
        {
            _proxyTarget.PresetLightingSoftness = PresetLightingSoftness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetMaterial get_PresetMaterial()
        {
            return _proxyTarget.PresetMaterial;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PresetMaterial(Microsoft.Office.Core.MsoPresetMaterial PresetMaterial)
        {
            _proxyTarget.PresetMaterial = PresetMaterial;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetThreeDFormat get_PresetThreeDFormat()
        {
            return _proxyTarget.PresetThreeDFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_RotationX()
        {
            return _proxyTarget.RotationX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RotationX(System.Single RotationX)
        {
            _proxyTarget.RotationX = RotationX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_RotationY()
        {
            return _proxyTarget.RotationY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RotationY(System.Single RotationY)
        {
            _proxyTarget.RotationY = RotationY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDispCagNotifySink which adds IDispose to the interface
    /// </summary>
    public class IMsoDispCagNotifySinkProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDispCagNotifySink _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDispCagNotifySink which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDispCagNotifySinkProxy(Microsoft.Office.Core.IMsoDispCagNotifySink proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InsertClip(System.Object pClipMoniker, System.Object pItemMoniker)
        {
            _proxyTarget.InsertClip(pClipMoniker, pItemMoniker);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void WindowIsClosing()
        {
            _proxyTarget.WindowIsClosing();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Balloon which adds IDispose to the interface
    /// </summary>
    public class BalloonProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Balloon _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Balloon which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public BalloonProxy(Microsoft.Office.Core.Balloon proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Checkboxes()
        {
            return _proxyTarget.Checkboxes;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Labels()
        {
            return _proxyTarget.Labels;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BalloonType(Microsoft.Office.Core.MsoBalloonType pbty)
        {
            _proxyTarget.BalloonType = pbty;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBalloonType get_BalloonType()
        {
            return _proxyTarget.BalloonType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Icon(Microsoft.Office.Core.MsoIconType picn)
        {
            _proxyTarget.Icon = picn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoIconType get_Icon()
        {
            return _proxyTarget.Icon;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Heading(System.String pbstr)
        {
            _proxyTarget.Heading = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Heading()
        {
            return _proxyTarget.Heading;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Mode(Microsoft.Office.Core.MsoModeType pmd)
        {
            _proxyTarget.Mode = pmd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoModeType get_Mode()
        {
            return _proxyTarget.Mode;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Animation(Microsoft.Office.Core.MsoAnimationType pfca)
        {
            _proxyTarget.Animation = pfca;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoAnimationType get_Animation()
        {
            return _proxyTarget.Animation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Button(Microsoft.Office.Core.MsoButtonSetType psbs)
        {
            _proxyTarget.Button = psbs;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoButtonSetType get_Button()
        {
            return _proxyTarget.Button;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Callback(System.String pbstr)
        {
            _proxyTarget.Callback = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Callback()
        {
            return _proxyTarget.Callback;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Private(System.Int32 plPrivate)
        {
            _proxyTarget.Private = plPrivate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Private()
        {
            return _proxyTarget.Private;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetAvoidRectangle(System.Int32 Left, System.Int32 Top, System.Int32 Right, System.Int32 Bottom)
        {
            _proxyTarget.SetAvoidRectangle(Left, Top, Right, Bottom);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual Microsoft.Office.Core.MsoBalloonButtonType Show()
        {
            return _proxyTarget.Show();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Close()
        {
            _proxyTarget.Close();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for BalloonCheckboxes which adds IDispose to the interface
    /// </summary>
    public class BalloonCheckboxesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.BalloonCheckboxes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.BalloonCheckboxes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public BalloonCheckboxesProxy(Microsoft.Office.Core.BalloonCheckboxes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual System.Object this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Count(System.Int32 pccbx)
        {
            _proxyTarget.Count = pccbx;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for BalloonCheckbox which adds IDispose to the interface
    /// </summary>
    public class BalloonCheckboxProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.BalloonCheckbox _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.BalloonCheckbox which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public BalloonCheckboxProxy(Microsoft.Office.Core.BalloonCheckbox proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Item()
        {
            return _proxyTarget.Item;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Checked(System.Boolean pvarfChecked)
        {
            _proxyTarget.Checked = pvarfChecked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Checked()
        {
            return _proxyTarget.Checked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for BalloonLabels which adds IDispose to the interface
    /// </summary>
    public class BalloonLabelsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.BalloonLabels _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.BalloonLabels which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public BalloonLabelsProxy(Microsoft.Office.Core.BalloonLabels proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual System.Object this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Count(System.Int32 pcwz)
        {
            _proxyTarget.Count = pcwz;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for BalloonLabel which adds IDispose to the interface
    /// </summary>
    public class BalloonLabelProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.BalloonLabel _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.BalloonLabel which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public BalloonLabelProxy(Microsoft.Office.Core.BalloonLabel proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Item()
        {
            return _proxyTarget.Item;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for AnswerWizardFiles which adds IDispose to the interface
    /// </summary>
    public class AnswerWizardFilesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.AnswerWizardFiles _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.AnswerWizardFiles which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public AnswerWizardFilesProxy(Microsoft.Office.Core.AnswerWizardFiles proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual System.String this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Add(System.String FileName)
        {
            _proxyTarget.Add(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.String FileName)
        {
            _proxyTarget.Delete(FileName);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for AnswerWizard which adds IDispose to the interface
    /// </summary>
    public class AnswerWizardProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.AnswerWizard _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.AnswerWizard which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public AnswerWizardProxy(Microsoft.Office.Core.AnswerWizard proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual AnswerWizardFilesProxy get_Files()
        {
            return new AnswerWizardFilesProxy(_proxyTarget.Files);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ClearFileList()
        {
            _proxyTarget.ClearFileList();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ResetFileList()
        {
            _proxyTarget.ResetFileList();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Assistant which adds IDispose to the interface
    /// </summary>
    public class AssistantProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Assistant _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Assistant which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public AssistantProxy(Microsoft.Office.Core.Assistant proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MoveWhenInTheWay()
        {
            return _proxyTarget.MoveWhenInTheWay;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Sounds(System.Boolean pvarfSounds)
        {
            _proxyTarget.Sounds = pvarfSounds;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Sounds()
        {
            return _proxyTarget.Sounds;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FeatureTips(System.Boolean pvarfFeatures)
        {
            _proxyTarget.FeatureTips = pvarfFeatures;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_FeatureTips()
        {
            return _proxyTarget.FeatureTips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MouseTips(System.Boolean pvarfMouse)
        {
            _proxyTarget.MouseTips = pvarfMouse;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MouseTips()
        {
            return _proxyTarget.MouseTips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_KeyboardShortcutTips(System.Boolean pvarfKeyboardShortcuts)
        {
            _proxyTarget.KeyboardShortcutTips = pvarfKeyboardShortcuts;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_KeyboardShortcutTips()
        {
            return _proxyTarget.KeyboardShortcutTips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HighPriorityTips(System.Boolean pvarfHighPriorityTips)
        {
            _proxyTarget.HighPriorityTips = pvarfHighPriorityTips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HighPriorityTips()
        {
            return _proxyTarget.HighPriorityTips;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TipOfDay(System.Boolean pvarfTipOfDay)
        {
            _proxyTarget.TipOfDay = pvarfTipOfDay;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_TipOfDay()
        {
            return _proxyTarget.TipOfDay;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_GuessHelp(System.Boolean pvarfGuessHelp)
        {
            _proxyTarget.GuessHelp = pvarfGuessHelp;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_GuessHelp()
        {
            return _proxyTarget.GuessHelp;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SearchWhenProgramming(System.Boolean pvarfSearchInProgram)
        {
            _proxyTarget.SearchWhenProgramming = pvarfSearchInProgram;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_SearchWhenProgramming()
        {
            return _proxyTarget.SearchWhenProgramming;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Item()
        {
            return _proxyTarget.Item;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FileName()
        {
            return _proxyTarget.FileName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FileName(System.String pbstr)
        {
            _proxyTarget.FileName = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_On()
        {
            return _proxyTarget.On;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_On(System.Boolean pvarfOn)
        {
            _proxyTarget.On = pvarfOn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 DoAlert(System.String bstrAlertTitle, System.String bstrAlertText, Microsoft.Office.Core.MsoAlertButtonType alb, Microsoft.Office.Core.MsoAlertIconType alc, Microsoft.Office.Core.MsoAlertDefaultType ald, Microsoft.Office.Core.MsoAlertCancelType alq, System.Boolean varfSysAlert)
        {
            return _proxyTarget.DoAlert(bstrAlertTitle, bstrAlertText, alb, alc, ald, alq, varfSysAlert);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Move(System.Int32 xLeft, System.Int32 yTop)
        {
            _proxyTarget.Move(xLeft, yTop);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Int32 pyTop)
        {
            _proxyTarget.Top = pyTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Int32 pxLeft)
        {
            _proxyTarget.Left = pxLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Help()
        {
            _proxyTarget.Help();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 StartWizard(System.Boolean On, System.String Callback, System.Int32 PrivateX, System.Object Animation, System.Object CustomTeaser, System.Object Top, System.Object Left, System.Object Bottom, System.Object Right)
        {
            return _proxyTarget.StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EndWizard(System.Int32 WizardID, System.Boolean varfSuccess, System.Object Animation)
        {
            _proxyTarget.EndWizard(WizardID, varfSuccess, Animation);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ActivateWizard(System.Int32 WizardID, Microsoft.Office.Core.MsoWizardActType act, System.Object Animation)
        {
            _proxyTarget.ActivateWizard(WizardID, act, Animation);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ResetTips()
        {
            _proxyTarget.ResetTips();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual BalloonProxy get_NewBalloon()
        {
            return new BalloonProxy(_proxyTarget.NewBalloon);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBalloonErrorType get_BalloonError()
        {
            return _proxyTarget.BalloonError;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean pvarfVisible)
        {
            _proxyTarget.Visible = pvarfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoAnimationType get_Animation()
        {
            return _proxyTarget.Animation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Animation(Microsoft.Office.Core.MsoAnimationType pfca)
        {
            _proxyTarget.Animation = pfca;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Reduced()
        {
            return _proxyTarget.Reduced;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Reduced(System.Boolean pvarfReduced)
        {
            _proxyTarget.Reduced = pvarfReduced;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AssistWithHelp(System.Boolean pvarfAssistWithHelp)
        {
            _proxyTarget.AssistWithHelp = pvarfAssistWithHelp;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AssistWithHelp()
        {
            return _proxyTarget.AssistWithHelp;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AssistWithWizards(System.Boolean pvarfAssistWithWizards)
        {
            _proxyTarget.AssistWithWizards = pvarfAssistWithWizards;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AssistWithWizards()
        {
            return _proxyTarget.AssistWithWizards;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AssistWithAlerts(System.Boolean pvarfAssistWithAlerts)
        {
            _proxyTarget.AssistWithAlerts = pvarfAssistWithAlerts;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AssistWithAlerts()
        {
            return _proxyTarget.AssistWithAlerts;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MoveWhenInTheWay(System.Boolean pvarfMove)
        {
            _proxyTarget.MoveWhenInTheWay = pvarfMove;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DocumentProperty which adds IDispose to the interface
    /// </summary>
    public class DocumentPropertyProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DocumentProperty _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DocumentProperty which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DocumentPropertyProxy(Microsoft.Office.Core.DocumentProperty proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String pbstrRetVal)
        {
            _proxyTarget.Name = pbstrRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Value()
        {
            return _proxyTarget.Value;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Value(System.Object pvargRetVal)
        {
            _proxyTarget.Value = pvargRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoDocProperties get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoDocProperties ptypeRetVal)
        {
            _proxyTarget.Type = ptypeRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_LinkToContent()
        {
            return _proxyTarget.LinkToContent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LinkToContent(System.Boolean pfLinkRetVal)
        {
            _proxyTarget.LinkToContent = pfLinkRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_LinkSource()
        {
            return _proxyTarget.LinkSource;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LinkSource(System.String pbstrSourceRetVal)
        {
            _proxyTarget.LinkSource = pbstrSourceRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DocumentProperties which adds IDispose to the interface
    /// </summary>
    public class DocumentPropertiesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DocumentProperties _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DocumentProperties which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DocumentPropertiesProxy(Microsoft.Office.Core.DocumentProperties proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual DocumentPropertyProxy this[System.Object Index]
		{
			get { return new DocumentPropertyProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DocumentPropertyProxy Add(System.String Name, System.Boolean LinkToContent, System.Object Type, System.Object Value, System.Object LinkSource)
        {
            return new DocumentPropertyProxy(_proxyTarget.Add(Name, LinkToContent, Type, Value, LinkSource));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IFoundFiles which adds IDispose to the interface
    /// </summary>
    public class IFoundFilesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IFoundFiles _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IFoundFiles which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IFoundFilesProxy(Microsoft.Office.Core.IFoundFiles proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual System.String this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IFind which adds IDispose to the interface
    /// </summary>
    public class IFindProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IFind _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IFind which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IFindProxy(Microsoft.Office.Core.IFind proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Subject(System.String pbstr)
        {
            _proxyTarget.Subject = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Options(Microsoft.Office.Core.MsoFileFindOptions penmOptions)
        {
            _proxyTarget.Options = penmOptions;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MatchCase(System.Boolean retval)
        {
            _proxyTarget.MatchCase = retval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PatternMatch(System.Boolean retval)
        {
            _proxyTarget.PatternMatch = retval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DateSavedFrom(System.Object pdatSavedFrom)
        {
            _proxyTarget.DateSavedFrom = pdatSavedFrom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DateSavedTo(System.Object pdatSavedTo)
        {
            _proxyTarget.DateSavedTo = pdatSavedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SavedBy(System.String pbstr)
        {
            _proxyTarget.SavedBy = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DateCreatedFrom(System.Object pdatCreatedFrom)
        {
            _proxyTarget.DateCreatedFrom = pdatCreatedFrom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DateCreatedTo(System.Object pdatCreatedTo)
        {
            _proxyTarget.DateCreatedTo = pdatCreatedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_View(Microsoft.Office.Core.MsoFileFindView penmView)
        {
            _proxyTarget.View = penmView;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SortBy(Microsoft.Office.Core.MsoFileFindSortBy penmSortBy)
        {
            _proxyTarget.SortBy = penmSortBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ListBy(Microsoft.Office.Core.MsoFileFindListBy penmListBy)
        {
            _proxyTarget.ListBy = penmListBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SelectedFile(System.Int32 pintSelectedFile)
        {
            _proxyTarget.SelectedFile = pintSelectedFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Load(System.String bstrQueryName)
        {
            _proxyTarget.Load(bstrQueryName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Save(System.String bstrQueryName)
        {
            _proxyTarget.Save(bstrQueryName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.String bstrQueryName)
        {
            _proxyTarget.Delete(bstrQueryName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_FileType()
        {
            return _proxyTarget.FileType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FileType(System.Int32 plFileType)
        {
            _proxyTarget.FileType = plFileType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SearchPath()
        {
            return _proxyTarget.SearchPath;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_SubDir()
        {
            return _proxyTarget.SubDir;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Author()
        {
            return _proxyTarget.Author;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Keywords()
        {
            return _proxyTarget.Keywords;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Subject()
        {
            return _proxyTarget.Subject;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileFindOptions get_Options()
        {
            return _proxyTarget.Options;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MatchCase()
        {
            return _proxyTarget.MatchCase;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_PatternMatch()
        {
            return _proxyTarget.PatternMatch;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_DateSavedFrom()
        {
            return _proxyTarget.DateSavedFrom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_DateSavedTo()
        {
            return _proxyTarget.DateSavedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SavedBy()
        {
            return _proxyTarget.SavedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_DateCreatedFrom()
        {
            return _proxyTarget.DateCreatedFrom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_DateCreatedTo()
        {
            return _proxyTarget.DateCreatedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileFindView get_View()
        {
            return _proxyTarget.View;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileFindSortBy get_SortBy()
        {
            return _proxyTarget.SortBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileFindListBy get_ListBy()
        {
            return _proxyTarget.ListBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SelectedFile()
        {
            return _proxyTarget.SelectedFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IFoundFilesProxy get_Results()
        {
            return new IFoundFilesProxy(_proxyTarget.Results);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Show()
        {
            return _proxyTarget.Show();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SearchPath(System.String pbstr)
        {
            _proxyTarget.SearchPath = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String pbstr)
        {
            _proxyTarget.Name = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SubDir(System.Boolean retval)
        {
            _proxyTarget.SubDir = retval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Title(System.String pbstr)
        {
            _proxyTarget.Title = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Author(System.String pbstr)
        {
            _proxyTarget.Author = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Keywords(System.String pbstr)
        {
            _proxyTarget.Keywords = pbstr;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FoundFiles which adds IDispose to the interface
    /// </summary>
    public class FoundFilesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FoundFiles _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FoundFiles which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FoundFilesProxy(Microsoft.Office.Core.FoundFiles proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual System.String this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PropertyTest which adds IDispose to the interface
    /// </summary>
    public class PropertyTestProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PropertyTest _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PropertyTest which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PropertyTestProxy(Microsoft.Office.Core.PropertyTest proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCondition get_Condition()
        {
            return _proxyTarget.Condition;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Value()
        {
            return _proxyTarget.Value;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_SecondValue()
        {
            return _proxyTarget.SecondValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoConnector get_Connector()
        {
            return _proxyTarget.Connector;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PropertyTests which adds IDispose to the interface
    /// </summary>
    public class PropertyTestsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PropertyTests _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PropertyTests which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PropertyTestsProxy(Microsoft.Office.Core.PropertyTests proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual PropertyTestProxy this[System.Int32 Index]
		{
			get { return new PropertyTestProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Add(System.String Name, Microsoft.Office.Core.MsoCondition Condition, System.Object Value, System.Object SecondValue, Microsoft.Office.Core.MsoConnector Connector)
        {
            _proxyTarget.Add(Name, Condition, Value, SecondValue, Connector);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Remove(System.Int32 Index)
        {
            _proxyTarget.Remove(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FileSearch which adds IDispose to the interface
    /// </summary>
    public class FileSearchProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FileSearch _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FileSearch which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FileSearchProxy(Microsoft.Office.Core.FileSearch proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_SearchSubFolders()
        {
            return _proxyTarget.SearchSubFolders;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SearchSubFolders(System.Boolean SearchSubFoldersRetVal)
        {
            _proxyTarget.SearchSubFolders = SearchSubFoldersRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MatchTextExactly()
        {
            return _proxyTarget.MatchTextExactly;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MatchTextExactly(System.Boolean MatchTextRetVal)
        {
            _proxyTarget.MatchTextExactly = MatchTextRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MatchAllWordForms()
        {
            return _proxyTarget.MatchAllWordForms;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MatchAllWordForms(System.Boolean MatchAllWordFormsRetVal)
        {
            _proxyTarget.MatchAllWordForms = MatchAllWordFormsRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FileName()
        {
            return _proxyTarget.FileName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FileName(System.String FileNameRetVal)
        {
            _proxyTarget.FileName = FileNameRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileType get_FileType()
        {
            return _proxyTarget.FileType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FileType(Microsoft.Office.Core.MsoFileType FileTypeRetVal)
        {
            _proxyTarget.FileType = FileTypeRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoLastModified get_LastModified()
        {
            return _proxyTarget.LastModified;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LastModified(Microsoft.Office.Core.MsoLastModified LastModifiedRetVal)
        {
            _proxyTarget.LastModified = LastModifiedRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TextOrProperty()
        {
            return _proxyTarget.TextOrProperty;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextOrProperty(System.String TextOrProperty)
        {
            _proxyTarget.TextOrProperty = TextOrProperty;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_LookIn()
        {
            return _proxyTarget.LookIn;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LookIn(System.String LookInRetVal)
        {
            _proxyTarget.LookIn = LookInRetVal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Execute(Microsoft.Office.Core.MsoSortBy SortBy, Microsoft.Office.Core.MsoSortOrder SortOrder, System.Boolean AlwaysAccurate)
        {
            return _proxyTarget.Execute(SortBy, SortOrder, AlwaysAccurate);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NewSearch()
        {
            _proxyTarget.NewSearch();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FoundFilesProxy get_FoundFiles()
        {
            return new FoundFilesProxy(_proxyTarget.FoundFiles);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PropertyTestsProxy get_PropertyTests()
        {
            return new PropertyTestsProxy(_proxyTarget.PropertyTests);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SearchScopesProxy get_SearchScopes()
        {
            return new SearchScopesProxy(_proxyTarget.SearchScopes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SearchFoldersProxy get_SearchFolders()
        {
            return new SearchFoldersProxy(_proxyTarget.SearchFolders);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FileTypesProxy get_FileTypes()
        {
            return new FileTypesProxy(_proxyTarget.FileTypes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RefreshScopes()
        {
            _proxyTarget.RefreshScopes();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for COMAddIn which adds IDispose to the interface
    /// </summary>
    public class COMAddInProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.COMAddIn _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.COMAddIn which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public COMAddInProxy(Microsoft.Office.Core.COMAddIn proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Description(System.String RetValue)
        {
            _proxyTarget.Description = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ProgId()
        {
            return _proxyTarget.ProgId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Guid()
        {
            return _proxyTarget.Guid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Connect()
        {
            return _proxyTarget.Connect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Connect(System.Boolean RetValue)
        {
            _proxyTarget.Connect = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Object()
        {
            return _proxyTarget.Object;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Object(System.Object RetValue)
        {
            _proxyTarget.Object = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for COMAddIns which adds IDispose to the interface
    /// </summary>
    public class COMAddInsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.COMAddIns _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.COMAddIns which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public COMAddInsProxy(Microsoft.Office.Core.COMAddIns proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual COMAddInProxy Item(ref System.Object Index)
        {
            return new COMAddInProxy(_proxyTarget.Item(ref Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Update()
        {
            _proxyTarget.Update();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetAppModal(System.Boolean varfModal)
        {
            _proxyTarget.SetAppModal(varfModal);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for LanguageSettings which adds IDispose to the interface
    /// </summary>
    public class LanguageSettingsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.LanguageSettings _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.LanguageSettings which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public LanguageSettingsProxy(Microsoft.Office.Core.LanguageSettings proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_LanguageID(Microsoft.Office.Core.MsoAppLanguageID Id)
        {
            return _proxyTarget.LanguageID[Id];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_LanguagePreferredForEditing(Microsoft.Office.Core.MsoLanguageID lid)
        {
            return _proxyTarget.LanguagePreferredForEditing[lid];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICommandBarsEvents which adds IDispose to the interface
    /// </summary>
    public class ICommandBarsEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICommandBarsEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICommandBarsEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICommandBarsEventsProxy(Microsoft.Office.Core.ICommandBarsEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void OnUpdate()
        {
            _proxyTarget.OnUpdate();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarsEvents which adds IDispose to the interface
    /// </summary>
    public class _CommandBarsEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarsEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarsEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarsEventsProxy(Microsoft.Office.Core._CommandBarsEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void OnUpdate()
        {
            _proxyTarget.OnUpdate();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarsEvents_Event which adds IDispose to the interface
    /// </summary>
    public class _CommandBarsEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarsEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarsEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarsEvents_EventProxy(Microsoft.Office.Core._CommandBarsEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CommandBarsEvents_OnUpdateEventHandler OnUpdate
        {
            add { _proxyTarget.OnUpdate += value; }
            remove { _proxyTarget.OnUpdate -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBars which adds IDispose to the interface
    /// </summary>
    public class CommandBarsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBars _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBars which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarsProxy(Microsoft.Office.Core.CommandBars proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICommandBarComboBoxEvents which adds IDispose to the interface
    /// </summary>
    public class ICommandBarComboBoxEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICommandBarComboBoxEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICommandBarComboBoxEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICommandBarComboBoxEventsProxy(Microsoft.Office.Core.ICommandBarComboBoxEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Change(Microsoft.Office.Core.CommandBarComboBox Ctrl)
        {
            _proxyTarget.Change(Ctrl);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarComboBoxEvents which adds IDispose to the interface
    /// </summary>
    public class _CommandBarComboBoxEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarComboBoxEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarComboBoxEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarComboBoxEventsProxy(Microsoft.Office.Core._CommandBarComboBoxEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Change(Microsoft.Office.Core.CommandBarComboBox Ctrl)
        {
            _proxyTarget.Change(Ctrl);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarComboBoxEvents_Event which adds IDispose to the interface
    /// </summary>
    public class _CommandBarComboBoxEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarComboBoxEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarComboBoxEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarComboBoxEvents_EventProxy(Microsoft.Office.Core._CommandBarComboBoxEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CommandBarComboBoxEvents_ChangeEventHandler Change
        {
            add { _proxyTarget.Change += value; }
            remove { _proxyTarget.Change -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBarComboBox which adds IDispose to the interface
    /// </summary>
    public class CommandBarComboBoxProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBarComboBox _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBarComboBox which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarComboBoxProxy(Microsoft.Office.Core.CommandBarComboBox proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICommandBarButtonEvents which adds IDispose to the interface
    /// </summary>
    public class ICommandBarButtonEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICommandBarButtonEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICommandBarButtonEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICommandBarButtonEventsProxy(Microsoft.Office.Core.ICommandBarButtonEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Click(Microsoft.Office.Core.CommandBarButton Ctrl, ref System.Boolean CancelDefault)
        {
            _proxyTarget.Click(Ctrl, ref CancelDefault);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarButtonEvents which adds IDispose to the interface
    /// </summary>
    public class _CommandBarButtonEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarButtonEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarButtonEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarButtonEventsProxy(Microsoft.Office.Core._CommandBarButtonEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Click(Microsoft.Office.Core.CommandBarButton Ctrl, ref System.Boolean CancelDefault)
        {
            _proxyTarget.Click(Ctrl, ref CancelDefault);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CommandBarButtonEvents_Event which adds IDispose to the interface
    /// </summary>
    public class _CommandBarButtonEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CommandBarButtonEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CommandBarButtonEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CommandBarButtonEvents_EventProxy(Microsoft.Office.Core._CommandBarButtonEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CommandBarButtonEvents_ClickEventHandler Click
        {
            add { _proxyTarget.Click += value; }
            remove { _proxyTarget.Click -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CommandBarButton which adds IDispose to the interface
    /// </summary>
    public class CommandBarButtonProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CommandBarButton _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CommandBarButton which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CommandBarButtonProxy(Microsoft.Office.Core.CommandBarButton proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WebPageFont which adds IDispose to the interface
    /// </summary>
    public class WebPageFontProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WebPageFont _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WebPageFont which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WebPageFontProxy(Microsoft.Office.Core.WebPageFont proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ProportionalFont()
        {
            return _proxyTarget.ProportionalFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProportionalFont(System.String pstr)
        {
            _proxyTarget.ProportionalFont = pstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_ProportionalFontSize()
        {
            return _proxyTarget.ProportionalFontSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProportionalFontSize(System.Single pf)
        {
            _proxyTarget.ProportionalFontSize = pf;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FixedWidthFont()
        {
            return _proxyTarget.FixedWidthFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FixedWidthFont(System.String pstr)
        {
            _proxyTarget.FixedWidthFont = pstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_FixedWidthFontSize()
        {
            return _proxyTarget.FixedWidthFontSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FixedWidthFontSize(System.Single pf)
        {
            _proxyTarget.FixedWidthFontSize = pf;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WebPageFonts which adds IDispose to the interface
    /// </summary>
    public class WebPageFontsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WebPageFonts _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WebPageFonts which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WebPageFontsProxy(Microsoft.Office.Core.WebPageFonts proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual WebPageFontProxy this[Microsoft.Office.Core.MsoCharacterSet Index]
		{
			get { return new WebPageFontProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for HTMLProjectItem which adds IDispose to the interface
    /// </summary>
    public class HTMLProjectItemProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.HTMLProjectItem _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.HTMLProjectItem which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public HTMLProjectItemProxy(Microsoft.Office.Core.HTMLProjectItem proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsOpen()
        {
            return _proxyTarget.IsOpen;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void LoadFromFile(System.String FileName)
        {
            _proxyTarget.LoadFromFile(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Open(Microsoft.Office.Core.MsoHTMLProjectOpen OpenKind)
        {
            _proxyTarget.Open(OpenKind);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SaveCopyAs(System.String FileName)
        {
            _proxyTarget.SaveCopyAs(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String Text)
        {
            _proxyTarget.Text = Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for HTMLProjectItems which adds IDispose to the interface
    /// </summary>
    public class HTMLProjectItemsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.HTMLProjectItems _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.HTMLProjectItems which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public HTMLProjectItemsProxy(Microsoft.Office.Core.HTMLProjectItems proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual HTMLProjectItemProxy Item(ref System.Object Index)
        {
            return new HTMLProjectItemProxy(_proxyTarget.Item(ref Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for HTMLProject which adds IDispose to the interface
    /// </summary>
    public class HTMLProjectProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.HTMLProject _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.HTMLProject which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public HTMLProjectProxy(Microsoft.Office.Core.HTMLProject proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoHTMLProjectState get_State()
        {
            return _proxyTarget.State;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RefreshProject(System.Boolean Refresh)
        {
            _proxyTarget.RefreshProject(Refresh);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RefreshDocument(System.Boolean Refresh)
        {
            _proxyTarget.RefreshDocument(Refresh);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual HTMLProjectItemsProxy get_HTMLProjectItems()
        {
            return new HTMLProjectItemsProxy(_proxyTarget.HTMLProjectItems);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Open(Microsoft.Office.Core.MsoHTMLProjectOpen OpenKind)
        {
            _proxyTarget.Open(OpenKind);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MsoDebugOptions which adds IDispose to the interface
    /// </summary>
    public class MsoDebugOptionsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MsoDebugOptions _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MsoDebugOptions which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MsoDebugOptionsProxy(Microsoft.Office.Core.MsoDebugOptions proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_FeatureReports()
        {
            return _proxyTarget.FeatureReports;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FeatureReports(System.Int32 puintFeatureReports)
        {
            _proxyTarget.FeatureReports = puintFeatureReports;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_OutputToDebugger()
        {
            return _proxyTarget.OutputToDebugger;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OutputToDebugger(System.Boolean pvarfOutputToDebugger)
        {
            _proxyTarget.OutputToDebugger = pvarfOutputToDebugger;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_OutputToFile()
        {
            return _proxyTarget.OutputToFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OutputToFile(System.Boolean pvarfOutputToFile)
        {
            _proxyTarget.OutputToFile = pvarfOutputToFile;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_OutputToMessageBox()
        {
            return _proxyTarget.OutputToMessageBox;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OutputToMessageBox(System.Boolean pvarfOutputToMessageBox)
        {
            _proxyTarget.OutputToMessageBox = pvarfOutputToMessageBox;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_UnitTestManager()
        {
            return _proxyTarget.UnitTestManager;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FileDialogSelectedItems which adds IDispose to the interface
    /// </summary>
    public class FileDialogSelectedItemsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FileDialogSelectedItems _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FileDialogSelectedItems which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FileDialogSelectedItemsProxy(Microsoft.Office.Core.FileDialogSelectedItems proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String Item(System.Int32 Index)
        {
            return _proxyTarget.Item(Index);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FileDialogFilter which adds IDispose to the interface
    /// </summary>
    public class FileDialogFilterProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FileDialogFilter _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FileDialogFilter which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FileDialogFilterProxy(Microsoft.Office.Core.FileDialogFilter proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Extensions()
        {
            return _proxyTarget.Extensions;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FileDialogFilters which adds IDispose to the interface
    /// </summary>
    public class FileDialogFiltersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FileDialogFilters _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FileDialogFilters which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FileDialogFiltersProxy(Microsoft.Office.Core.FileDialogFilters proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual FileDialogFilterProxy Item(System.Int32 Index)
        {
            return new FileDialogFilterProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object filter)
        {
            _proxyTarget.Delete(filter);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Clear()
        {
            _proxyTarget.Clear();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual FileDialogFilterProxy Add(System.String Description, System.String Extensions, System.Object Position)
        {
            return new FileDialogFilterProxy(_proxyTarget.Add(Description, Extensions, Position));
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FileDialog which adds IDispose to the interface
    /// </summary>
    public class FileDialogProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FileDialog _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FileDialog which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FileDialogProxy(Microsoft.Office.Core.FileDialog proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FileDialogFiltersProxy get_Filters()
        {
            return new FileDialogFiltersProxy(_proxyTarget.Filters);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_FilterIndex()
        {
            return _proxyTarget.FilterIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FilterIndex(System.Int32 FilterIndex)
        {
            _proxyTarget.FilterIndex = FilterIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Title(System.String Title)
        {
            _proxyTarget.Title = Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ButtonName()
        {
            return _proxyTarget.ButtonName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ButtonName(System.String ButtonName)
        {
            _proxyTarget.ButtonName = ButtonName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AllowMultiSelect()
        {
            return _proxyTarget.AllowMultiSelect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AllowMultiSelect(System.Boolean pvarfAllowMultiSelect)
        {
            _proxyTarget.AllowMultiSelect = pvarfAllowMultiSelect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileDialogView get_InitialView()
        {
            return _proxyTarget.InitialView;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InitialView(Microsoft.Office.Core.MsoFileDialogView pinitialview)
        {
            _proxyTarget.InitialView = pinitialview;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_InitialFileName()
        {
            return _proxyTarget.InitialFileName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InitialFileName(System.String InitialFileName)
        {
            _proxyTarget.InitialFileName = InitialFileName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FileDialogSelectedItemsProxy get_SelectedItems()
        {
            return new FileDialogSelectedItemsProxy(_proxyTarget.SelectedItems);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFileDialogType get_DialogType()
        {
            return _proxyTarget.DialogType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Item()
        {
            return _proxyTarget.Item;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Show()
        {
            return _proxyTarget.Show();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Execute()
        {
            _proxyTarget.Execute();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SignatureSet which adds IDispose to the interface
    /// </summary>
    public class SignatureSetProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SignatureSet _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SignatureSet which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SignatureSetProxy(Microsoft.Office.Core.SignatureSet proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SignatureProxy this[System.Int32 iSig]
		{
			get { return new SignatureProxy(_proxyTarget[iSig]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SignatureProxy Add()
        {
            return new SignatureProxy(_proxyTarget.Add());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Commit()
        {
            _proxyTarget.Commit();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SignatureProxy AddNonVisibleSignature(System.Object varSigProv)
        {
            return new SignatureProxy(_proxyTarget.AddNonVisibleSignature(varSigProv));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_CanAddSignatureLine()
        {
            return _proxyTarget.CanAddSignatureLine;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SignatureProxy AddSignatureLine(System.Object varSigProv)
        {
            return new SignatureProxy(_proxyTarget.AddSignatureLine(varSigProv));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSignatureSubset get_Subset()
        {
            return _proxyTarget.Subset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Subset(Microsoft.Office.Core.MsoSignatureSubset psubset)
        {
            _proxyTarget.Subset = psubset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowSignaturesPane(System.Boolean arg0)
        {
            _proxyTarget.ShowSignaturesPane = arg0;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Signature which adds IDispose to the interface
    /// </summary>
    public class SignatureProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Signature _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Signature which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SignatureProxy(Microsoft.Office.Core.Signature proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Signer()
        {
            return _proxyTarget.Signer;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Issuer()
        {
            return _proxyTarget.Issuer;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ExpireDate()
        {
            return _proxyTarget.ExpireDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsValid()
        {
            return _proxyTarget.IsValid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AttachCertificate()
        {
            return _proxyTarget.AttachCertificate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AttachCertificate(System.Boolean pvarfAttach)
        {
            _proxyTarget.AttachCertificate = pvarfAttach;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsCertificateExpired()
        {
            return _proxyTarget.IsCertificateExpired;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsCertificateRevoked()
        {
            return _proxyTarget.IsCertificateRevoked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_SignDate()
        {
            return _proxyTarget.SignDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsSigned()
        {
            return _proxyTarget.IsSigned;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Sign(System.Object varSigImg, System.Object varDelSuggSigner, System.Object varDelSuggSignerLine2, System.Object varDelSuggSignerEmail)
        {
            _proxyTarget.Sign(varSigImg, varDelSuggSigner, varDelSuggSignerLine2, varDelSuggSignerEmail);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SignatureInfoProxy get_Details()
        {
            return new SignatureInfoProxy(_proxyTarget.Details);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowDetails()
        {
            _proxyTarget.ShowDetails();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_CanSetup()
        {
            return _proxyTarget.CanSetup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SignatureSetupProxy get_Setup()
        {
            return new SignatureSetupProxy(_proxyTarget.Setup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsSignatureLine()
        {
            return _proxyTarget.IsSignatureLine;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_SignatureLineShape()
        {
            return _proxyTarget.SignatureLineShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SortHint()
        {
            return _proxyTarget.SortHint;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoEnvelopeVB which adds IDispose to the interface
    /// </summary>
    public class IMsoEnvelopeVBProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoEnvelopeVB _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoEnvelopeVB which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoEnvelopeVBProxy(Microsoft.Office.Core.IMsoEnvelopeVB proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Introduction()
        {
            return _proxyTarget.Introduction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Introduction(System.String pbstrIntro)
        {
            _proxyTarget.Introduction = pbstrIntro;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Item()
        {
            return _proxyTarget.Item;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_CommandBars()
        {
            return _proxyTarget.CommandBars;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoEnvelopeVBEvents which adds IDispose to the interface
    /// </summary>
    public class IMsoEnvelopeVBEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoEnvelopeVBEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoEnvelopeVBEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoEnvelopeVBEventsProxy(Microsoft.Office.Core.IMsoEnvelopeVBEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EnvelopeShow()
        {
            _proxyTarget.EnvelopeShow();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EnvelopeHide()
        {
            _proxyTarget.EnvelopeHide();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoEnvelopeVBEvents_Event which adds IDispose to the interface
    /// </summary>
    public class IMsoEnvelopeVBEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoEnvelopeVBEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoEnvelopeVBEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoEnvelopeVBEvents_EventProxy(Microsoft.Office.Core.IMsoEnvelopeVBEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core.IMsoEnvelopeVBEvents_EnvelopeShowEventHandler EnvelopeShow
        {
            add { _proxyTarget.EnvelopeShow += value; }
            remove { _proxyTarget.EnvelopeShow -= value; }
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core.IMsoEnvelopeVBEvents_EnvelopeHideEventHandler EnvelopeHide
        {
            add { _proxyTarget.EnvelopeHide += value; }
            remove { _proxyTarget.EnvelopeHide -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MsoEnvelope which adds IDispose to the interface
    /// </summary>
    public class MsoEnvelopeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MsoEnvelope _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MsoEnvelope which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MsoEnvelopeProxy(Microsoft.Office.Core.MsoEnvelope proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for FileTypes which adds IDispose to the interface
    /// </summary>
    public class FileTypesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.FileTypes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.FileTypes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public FileTypesProxy(Microsoft.Office.Core.FileTypes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual Microsoft.Office.Core.MsoFileType this[System.Int32 Index]
		{
			get { return _proxyTarget[Index]; }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Add(Microsoft.Office.Core.MsoFileType FileType)
        {
            _proxyTarget.Add(FileType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Remove(System.Int32 Index)
        {
            _proxyTarget.Remove(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SearchFolders which adds IDispose to the interface
    /// </summary>
    public class SearchFoldersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SearchFolders _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SearchFolders which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SearchFoldersProxy(Microsoft.Office.Core.SearchFolders proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual ScopeFolderProxy this[System.Int32 Index]
		{
			get { return new ScopeFolderProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Add(Microsoft.Office.Core.ScopeFolder ScopeFolder)
        {
            _proxyTarget.Add(ScopeFolder);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Remove(System.Int32 Index)
        {
            _proxyTarget.Remove(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ScopeFolders which adds IDispose to the interface
    /// </summary>
    public class ScopeFoldersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ScopeFolders _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ScopeFolders which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ScopeFoldersProxy(Microsoft.Office.Core.ScopeFolders proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual ScopeFolderProxy this[System.Int32 Index]
		{
			get { return new ScopeFolderProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ScopeFolder which adds IDispose to the interface
    /// </summary>
    public class ScopeFolderProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ScopeFolder _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ScopeFolder which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ScopeFolderProxy(Microsoft.Office.Core.ScopeFolder proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Path()
        {
            return _proxyTarget.Path;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ScopeFoldersProxy get_ScopeFolders()
        {
            return new ScopeFoldersProxy(_proxyTarget.ScopeFolders);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddToSearchFolders()
        {
            _proxyTarget.AddToSearchFolders();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SearchScope which adds IDispose to the interface
    /// </summary>
    public class SearchScopeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SearchScope _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SearchScope which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SearchScopeProxy(Microsoft.Office.Core.SearchScope proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSearchIn get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ScopeFolderProxy get_ScopeFolder()
        {
            return new ScopeFolderProxy(_proxyTarget.ScopeFolder);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SearchScopes which adds IDispose to the interface
    /// </summary>
    public class SearchScopesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SearchScopes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SearchScopes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SearchScopesProxy(Microsoft.Office.Core.SearchScopes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SearchScopeProxy this[System.Int32 Index]
		{
			get { return new SearchScopeProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDiagram which adds IDispose to the interface
    /// </summary>
    public class IMsoDiagramProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDiagram _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDiagram which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDiagramProxy(Microsoft.Office.Core.IMsoDiagram proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodesProxy get_Nodes()
        {
            return new DiagramNodesProxy(_proxyTarget.Nodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoDiagramType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_AutoLayout()
        {
            return _proxyTarget.AutoLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoLayout(Microsoft.Office.Core.MsoTriState AutoLayout)
        {
            _proxyTarget.AutoLayout = AutoLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Reverse()
        {
            return _proxyTarget.Reverse;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Reverse(Microsoft.Office.Core.MsoTriState Reverse)
        {
            _proxyTarget.Reverse = Reverse;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_AutoFormat()
        {
            return _proxyTarget.AutoFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoFormat(Microsoft.Office.Core.MsoTriState AutoFormat)
        {
            _proxyTarget.AutoFormat = AutoFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Convert(Microsoft.Office.Core.MsoDiagramType Type)
        {
            _proxyTarget.Convert(Type);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void FitText()
        {
            _proxyTarget.FitText();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DiagramNodes which adds IDispose to the interface
    /// </summary>
    public class DiagramNodesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DiagramNodes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DiagramNodes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DiagramNodesProxy(Microsoft.Office.Core.DiagramNodes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy Item(System.Object Index)
        {
            return new DiagramNodeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SelectAll()
        {
            _proxyTarget.SelectAll();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DiagramNodeChildren which adds IDispose to the interface
    /// </summary>
    public class DiagramNodeChildrenProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DiagramNodeChildren _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DiagramNodeChildren which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DiagramNodeChildrenProxy(Microsoft.Office.Core.DiagramNodeChildren proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy Item(System.Object Index)
        {
            return new DiagramNodeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy AddNode(System.Object Index, Microsoft.Office.Core.MsoDiagramNodeType NodeType)
        {
            return new DiagramNodeProxy(_proxyTarget.AddNode(Index, NodeType));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SelectAll()
        {
            _proxyTarget.SelectAll();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodeProxy get_FirstChild()
        {
            return new DiagramNodeProxy(_proxyTarget.FirstChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodeProxy get_LastChild()
        {
            return new DiagramNodeProxy(_proxyTarget.LastChild);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DiagramNode which adds IDispose to the interface
    /// </summary>
    public class DiagramNodeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DiagramNode _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DiagramNode which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DiagramNodeProxy(Microsoft.Office.Core.DiagramNode proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy AddNode(Microsoft.Office.Core.MsoRelativeNodePosition Pos, Microsoft.Office.Core.MsoDiagramNodeType NodeType)
        {
            return new DiagramNodeProxy(_proxyTarget.AddNode(Pos, NodeType));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void MoveNode(Microsoft.Office.Core.DiagramNode TargetNode, Microsoft.Office.Core.MsoRelativeNodePosition Pos)
        {
            _proxyTarget.MoveNode(TargetNode, Pos);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ReplaceNode(Microsoft.Office.Core.DiagramNode TargetNode)
        {
            _proxyTarget.ReplaceNode(TargetNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SwapNode(Microsoft.Office.Core.DiagramNode TargetNode, System.Boolean SwapChildren)
        {
            _proxyTarget.SwapNode(TargetNode, SwapChildren);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy CloneNode(System.Boolean CopyChildren, Microsoft.Office.Core.DiagramNode TargetNode, Microsoft.Office.Core.MsoRelativeNodePosition Pos)
        {
            return new DiagramNodeProxy(_proxyTarget.CloneNode(CopyChildren, TargetNode, Pos));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void TransferChildren(Microsoft.Office.Core.DiagramNode ReceivingNode)
        {
            _proxyTarget.TransferChildren(ReceivingNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy NextNode()
        {
            return new DiagramNodeProxy(_proxyTarget.NextNode());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual DiagramNodeProxy PrevNode()
        {
            return new DiagramNodeProxy(_proxyTarget.PrevNode());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodeChildrenProxy get_Children()
        {
            return new DiagramNodeChildrenProxy(_proxyTarget.Children);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_Shape()
        {
            return new ShapeProxy(_proxyTarget.Shape);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual DiagramNodeProxy get_Root()
        {
            return new DiagramNodeProxy(_proxyTarget.Root);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDiagramProxy get_Diagram()
        {
            return new IMsoDiagramProxy(_proxyTarget.Diagram);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoOrgChartLayoutType get_Layout()
        {
            return _proxyTarget.Layout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Layout(Microsoft.Office.Core.MsoOrgChartLayoutType Type)
        {
            _proxyTarget.Layout = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_TextShape()
        {
            return new ShapeProxy(_proxyTarget.TextShape);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CanvasShapes which adds IDispose to the interface
    /// </summary>
    public class CanvasShapesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CanvasShapes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CanvasShapes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CanvasShapesProxy(Microsoft.Office.Core.CanvasShapes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy Item(System.Object Index)
        {
            return new ShapeProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddCallout(Microsoft.Office.Core.MsoCalloutType Type, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddCallout(Type, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddConnector(Microsoft.Office.Core.MsoConnectorType Type, System.Single BeginX, System.Single BeginY, System.Single EndX, System.Single EndY)
        {
            return new ShapeProxy(_proxyTarget.AddConnector(Type, BeginX, BeginY, EndX, EndY));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddCurve(System.Object SafeArrayOfPoints)
        {
            return new ShapeProxy(_proxyTarget.AddCurve(SafeArrayOfPoints));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddLabel(Microsoft.Office.Core.MsoTextOrientation Orientation, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddLabel(Orientation, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddLine(System.Single BeginX, System.Single BeginY, System.Single EndX, System.Single EndY)
        {
            return new ShapeProxy(_proxyTarget.AddLine(BeginX, BeginY, EndX, EndY));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddPicture(System.String FileName, Microsoft.Office.Core.MsoTriState LinkToFile, Microsoft.Office.Core.MsoTriState SaveWithDocument, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddPolyline(System.Object SafeArrayOfPoints)
        {
            return new ShapeProxy(_proxyTarget.AddPolyline(SafeArrayOfPoints));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddShape(Microsoft.Office.Core.MsoAutoShapeType Type, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddShape(Type, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddTextEffect(Microsoft.Office.Core.MsoPresetTextEffect PresetTextEffect, System.String Text, System.String FontName, System.Single FontSize, Microsoft.Office.Core.MsoTriState FontBold, Microsoft.Office.Core.MsoTriState FontItalic, System.Single Left, System.Single Top)
        {
            return new ShapeProxy(_proxyTarget.AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeProxy AddTextbox(Microsoft.Office.Core.MsoTextOrientation Orientation, System.Single Left, System.Single Top, System.Single Width, System.Single Height)
        {
            return new ShapeProxy(_proxyTarget.AddTextbox(Orientation, Left, Top, Width, Height));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual FreeformBuilderProxy BuildFreeform(Microsoft.Office.Core.MsoEditingType EditingType, System.Single X1, System.Single Y1)
        {
            return new FreeformBuilderProxy(_proxyTarget.BuildFreeform(EditingType, X1, Y1));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ShapeRangeProxy Range(System.Object Index)
        {
            return new ShapeRangeProxy(_proxyTarget.Range(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SelectAll()
        {
            _proxyTarget.SelectAll();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeProxy get_Background()
        {
            return new ShapeProxy(_proxyTarget.Background);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for OfficeDataSourceObject which adds IDispose to the interface
    /// </summary>
    public class OfficeDataSourceObjectProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.OfficeDataSourceObject _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.OfficeDataSourceObject which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public OfficeDataSourceObjectProxy(Microsoft.Office.Core.OfficeDataSourceObject proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ConnectString()
        {
            return _proxyTarget.ConnectString;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ConnectString(System.String pbstrConnect)
        {
            _proxyTarget.ConnectString = pbstrConnect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Table()
        {
            return _proxyTarget.Table;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Table(System.String pbstrTable)
        {
            _proxyTarget.Table = pbstrTable;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DataSource()
        {
            return _proxyTarget.DataSource;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DataSource(System.String pbstrSrc)
        {
            _proxyTarget.DataSource = pbstrSrc;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Columns()
        {
            return _proxyTarget.Columns;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_RowCount()
        {
            return _proxyTarget.RowCount;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Filters()
        {
            return _proxyTarget.Filters;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Move(Microsoft.Office.Core.MsoMoveRow MsoMoveRow, System.Int32 RowNbr)
        {
            return _proxyTarget.Move(MsoMoveRow, RowNbr);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Open(System.String bstrSrc, System.String bstrConnect, System.String bstrTable, System.Int32 fOpenExclusive, System.Int32 fNeverPrompt)
        {
            _proxyTarget.Open(bstrSrc, bstrConnect, bstrTable, fOpenExclusive, fNeverPrompt);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetSortOrder(System.String SortField1, System.Boolean SortAscending1, System.String SortField2, System.Boolean SortAscending2, System.String SortField3, System.Boolean SortAscending3)
        {
            _proxyTarget.SetSortOrder(SortField1, SortAscending1, SortField2, SortAscending2, SortField3, SortAscending3);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyFilter()
        {
            _proxyTarget.ApplyFilter();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ODSOColumn which adds IDispose to the interface
    /// </summary>
    public class ODSOColumnProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ODSOColumn _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ODSOColumn which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ODSOColumnProxy(Microsoft.Office.Core.ODSOColumn proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Value()
        {
            return _proxyTarget.Value;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ODSOColumns which adds IDispose to the interface
    /// </summary>
    public class ODSOColumnsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ODSOColumns _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ODSOColumns which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ODSOColumnsProxy(Microsoft.Office.Core.ODSOColumns proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Item(System.Object varIndex)
        {
            return _proxyTarget.Item(varIndex);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ODSOFilter which adds IDispose to the interface
    /// </summary>
    public class ODSOFilterProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ODSOFilter _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ODSOFilter which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ODSOFilterProxy(Microsoft.Office.Core.ODSOFilter proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Column()
        {
            return _proxyTarget.Column;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Column(System.String pbstrCol)
        {
            _proxyTarget.Column = pbstrCol;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFilterComparison get_Comparison()
        {
            return _proxyTarget.Comparison;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Comparison(Microsoft.Office.Core.MsoFilterComparison pComparison)
        {
            _proxyTarget.Comparison = pComparison;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CompareTo()
        {
            return _proxyTarget.CompareTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CompareTo(System.String pbstrCompareTo)
        {
            _proxyTarget.CompareTo = pbstrCompareTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoFilterConjunction get_Conjunction()
        {
            return _proxyTarget.Conjunction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Conjunction(Microsoft.Office.Core.MsoFilterConjunction pConjunction)
        {
            _proxyTarget.Conjunction = pConjunction;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ODSOFilters which adds IDispose to the interface
    /// </summary>
    public class ODSOFiltersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ODSOFilters _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ODSOFilters which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ODSOFiltersProxy(Microsoft.Office.Core.ODSOFilters proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Item(System.Int32 Index)
        {
            return _proxyTarget.Item(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Add(System.String Column, Microsoft.Office.Core.MsoFilterComparison Comparison, Microsoft.Office.Core.MsoFilterConjunction Conjunction, System.String bstrCompareTo, System.Boolean DeferUpdate)
        {
            _proxyTarget.Add(Column, Comparison, Conjunction, bstrCompareTo, DeferUpdate);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Int32 Index, System.Boolean DeferUpdate)
        {
            _proxyTarget.Delete(Index, DeferUpdate);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for NewFile which adds IDispose to the interface
    /// </summary>
    public class NewFileProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.NewFile _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.NewFile which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public NewFileProxy(Microsoft.Office.Core.NewFile proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean Add(System.String FileName, System.Object Section, System.Object DisplayName, System.Object Action)
        {
            return _proxyTarget.Add(FileName, Section, DisplayName, Action);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean Remove(System.String FileName, System.Object Section, System.Object DisplayName, System.Object Action)
        {
            return _proxyTarget.Remove(FileName, Section, DisplayName, Action);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WebComponent which adds IDispose to the interface
    /// </summary>
    public class WebComponentProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WebComponent _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WebComponent which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WebComponentProxy(Microsoft.Office.Core.WebComponent proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Shape()
        {
            return _proxyTarget.Shape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_URL()
        {
            return _proxyTarget.URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_URL(System.String RetValue)
        {
            _proxyTarget.URL = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HTML()
        {
            return _proxyTarget.HTML;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HTML(System.String RetValue)
        {
            _proxyTarget.HTML = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String RetValue)
        {
            _proxyTarget.Name = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 RetValue)
        {
            _proxyTarget.Width = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 RetValue)
        {
            _proxyTarget.Height = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetPlaceHolderGraphic(System.String PlaceHolderGraphic)
        {
            _proxyTarget.SetPlaceHolderGraphic(PlaceHolderGraphic);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Commit()
        {
            _proxyTarget.Commit();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Revert()
        {
            _proxyTarget.Revert();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WebComponentWindowExternal which adds IDispose to the interface
    /// </summary>
    public class WebComponentWindowExternalProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WebComponentWindowExternal _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WebComponentWindowExternal which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WebComponentWindowExternalProxy(Microsoft.Office.Core.WebComponentWindowExternal proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InterfaceVersion()
        {
            return _proxyTarget.InterfaceVersion;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ApplicationName()
        {
            return _proxyTarget.ApplicationName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ApplicationVersion()
        {
            return _proxyTarget.ApplicationVersion;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CloseWindow()
        {
            _proxyTarget.CloseWindow();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual WebComponentProxy get_WebComponent()
        {
            return new WebComponentProxy(_proxyTarget.WebComponent);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WebComponentFormat which adds IDispose to the interface
    /// </summary>
    public class WebComponentFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WebComponentFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WebComponentFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WebComponentFormatProxy(Microsoft.Office.Core.WebComponentFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_URL()
        {
            return _proxyTarget.URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_URL(System.String RetValue)
        {
            _proxyTarget.URL = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HTML()
        {
            return _proxyTarget.HTML;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HTML(System.String RetValue)
        {
            _proxyTarget.HTML = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String RetValue)
        {
            _proxyTarget.Name = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 RetValue)
        {
            _proxyTarget.Width = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 RetValue)
        {
            _proxyTarget.Height = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_PreviewGraphic()
        {
            return _proxyTarget.PreviewGraphic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PreviewGraphic(System.String retval)
        {
            _proxyTarget.PreviewGraphic = retval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void LaunchPropertiesWindow()
        {
            _proxyTarget.LaunchPropertiesWindow();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ILicWizExternal which adds IDispose to the interface
    /// </summary>
    public class ILicWizExternalProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ILicWizExternal _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ILicWizExternal which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ILicWizExternalProxy(Microsoft.Office.Core.ILicWizExternal proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PrintHtmlDocument(System.Object punkHtmlDoc)
        {
            _proxyTarget.PrintHtmlDocument(punkHtmlDoc);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InvokeDateTimeApplet()
        {
            _proxyTarget.InvokeDateTimeApplet();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String FormatDate(System.DateTime date, System.String pFormat)
        {
            return _proxyTarget.FormatDate(date, pFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowHelp(ref System.Object pvarId)
        {
            _proxyTarget.ShowHelp(ref pvarId);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Terminate()
        {
            _proxyTarget.Terminate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void DisableVORWReminder(System.Int32 BPC)
        {
            _proxyTarget.DisableVORWReminder(BPC);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String SaveReceipt(System.String bstrReceipt)
        {
            return _proxyTarget.SaveReceipt(bstrReceipt);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void OpenInDefaultBrowser(System.String bstrUrl)
        {
            _proxyTarget.OpenInDefaultBrowser(bstrUrl);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 MsoAlert(System.String bstrText, System.String bstrButtons, System.String bstrIcon)
        {
            return _proxyTarget.MsoAlert(bstrText, bstrButtons, bstrIcon);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 DepositPidKey(System.String bstrKey, System.Int32 fMORW)
        {
            return _proxyTarget.DepositPidKey(bstrKey, fMORW);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void WriteLog(System.String bstrMessage)
        {
            _proxyTarget.WriteLog(bstrMessage);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ResignDpc(System.String bstrProductCode)
        {
            _proxyTarget.ResignDpc(bstrProductCode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ResetPID()
        {
            _proxyTarget.ResetPID();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetDialogSize(System.Int32 dx, System.Int32 dy)
        {
            _proxyTarget.SetDialogSize(dx, dy);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 VerifyClock(System.Int32 lMode)
        {
            return _proxyTarget.VerifyClock(lMode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SortSelectOptions(System.Object pdispSelect)
        {
            _proxyTarget.SortSelectOptions(pdispSelect);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InternetDisconnect()
        {
            _proxyTarget.InternetDisconnect();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 GetConnectedState()
        {
            return _proxyTarget.GetConnectedState();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Context()
        {
            return _proxyTarget.Context;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Validator()
        {
            return _proxyTarget.Validator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_LicAgent()
        {
            return _proxyTarget.LicAgent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CountryInfo()
        {
            return _proxyTarget.CountryInfo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WizardVisible(System.Int32 arg0)
        {
            _proxyTarget.WizardVisible = arg0;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WizardTitle(System.String arg0)
        {
            _proxyTarget.WizardTitle = arg0;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_AnimationEnabled()
        {
            return _proxyTarget.AnimationEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CurrentHelpId(System.Int32 arg0)
        {
            _proxyTarget.CurrentHelpId = arg0;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_OfficeOnTheWebUrl()
        {
            return _proxyTarget.OfficeOnTheWebUrl;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ILicValidator which adds IDispose to the interface
    /// </summary>
    public class ILicValidatorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ILicValidator _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ILicValidator which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ILicValidatorProxy(Microsoft.Office.Core.ILicValidator proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Products()
        {
            return _proxyTarget.Products;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Selection()
        {
            return _proxyTarget.Selection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Selection(System.Int32 piSel)
        {
            _proxyTarget.Selection = piSel;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ILicAgent which adds IDispose to the interface
    /// </summary>
    public class ILicAgentProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ILicAgent _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ILicAgent which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ILicAgentProxy(Microsoft.Office.Core.ILicAgent proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GenerateInstallationId()
        {
            return _proxyTarget.GenerateInstallationId();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 DepositConfirmationId(System.String bstrVal)
        {
            return _proxyTarget.DepositConfirmationId(bstrVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 VerifyCheckDigits(System.String bstrCIDIID)
        {
            return _proxyTarget.VerifyCheckDigits(bstrCIDIID);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.DateTime GetCurrentExpiryDate()
        {
            return _proxyTarget.GetCurrentExpiryDate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CancelAsyncProcessRequest(System.Int32 bIsLicenseRequest)
        {
            _proxyTarget.CancelAsyncProcessRequest(bIsLicenseRequest);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCurrencyDescription(System.UInt32 dwCurrencyIndex)
        {
            return _proxyTarget.GetCurrencyDescription(dwCurrencyIndex);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetPriceItemCount()
        {
            return _proxyTarget.GetPriceItemCount();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetPriceItemLabel(System.UInt32 dwIndex)
        {
            return _proxyTarget.GetPriceItemLabel(dwIndex);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetPriceItemValue(System.UInt32 dwCurrencyIndex, System.UInt32 dwIndex)
        {
            return _proxyTarget.GetPriceItemValue(dwCurrencyIndex, dwIndex);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetInvoiceText()
        {
            return _proxyTarget.GetInvoiceText();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBackendErrorMsg()
        {
            return _proxyTarget.GetBackendErrorMsg();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetCurrencyOption()
        {
            return _proxyTarget.GetCurrencyOption();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCurrencyOption(System.UInt32 dwCurrencyOption)
        {
            _proxyTarget.SetCurrencyOption(dwCurrencyOption);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetEndOfLifeHtmlText()
        {
            return _proxyTarget.GetEndOfLifeHtmlText();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 DisplaySSLCert()
        {
            return _proxyTarget.DisplaySSLCert();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetVATLabel(System.String bstrCountryCode)
        {
            return _proxyTarget.GetVATLabel(bstrCountryCode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.DateTime GetCCRenewalExpiryDate()
        {
            return _proxyTarget.GetCCRenewalExpiryDate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetVATNumber(System.String bstrVATNumber)
        {
            _proxyTarget.SetVATNumber(bstrVATNumber);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCreditCardType(System.String bstrCCCode)
        {
            _proxyTarget.SetCreditCardType(bstrCCCode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCreditCardNumber(System.String bstrCCNumber)
        {
            _proxyTarget.SetCreditCardNumber(bstrCCNumber);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCreditCardExpiryYear(System.UInt32 dwCCYear)
        {
            _proxyTarget.SetCreditCardExpiryYear(dwCCYear);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCreditCardExpiryMonth(System.UInt32 dwCCMonth)
        {
            _proxyTarget.SetCreditCardExpiryMonth(dwCCMonth);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetCreditCardCount()
        {
            return _proxyTarget.GetCreditCardCount();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCreditCardCode(System.UInt32 dwIndex)
        {
            return _proxyTarget.GetCreditCardCode(dwIndex);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCreditCardName(System.UInt32 dwIndex)
        {
            return _proxyTarget.GetCreditCardName(dwIndex);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetVATNumber()
        {
            return _proxyTarget.GetVATNumber();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCreditCardType()
        {
            return _proxyTarget.GetCreditCardType();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCreditCardNumber()
        {
            return _proxyTarget.GetCreditCardNumber();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetCreditCardExpiryYear()
        {
            return _proxyTarget.GetCreditCardExpiryYear();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetCreditCardExpiryMonth()
        {
            return _proxyTarget.GetCreditCardExpiryMonth();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 GetDisconnectOption()
        {
            return _proxyTarget.GetDisconnectOption();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetDisconnectOption(System.Int32 bNewVal)
        {
            _proxyTarget.SetDisconnectOption(bNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessHandshakeRequest(System.Int32 bReviseCustInfo)
        {
            _proxyTarget.AsyncProcessHandshakeRequest(bReviseCustInfo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessNewLicenseRequest()
        {
            _proxyTarget.AsyncProcessNewLicenseRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessReissueLicenseRequest()
        {
            _proxyTarget.AsyncProcessReissueLicenseRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessRetailRenewalLicenseRequest()
        {
            _proxyTarget.AsyncProcessRetailRenewalLicenseRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessReviseCustInfoRequest()
        {
            _proxyTarget.AsyncProcessReviseCustInfoRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessCCRenewalPriceRequest()
        {
            _proxyTarget.AsyncProcessCCRenewalPriceRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessCCRenewalLicenseRequest()
        {
            _proxyTarget.AsyncProcessCCRenewalLicenseRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetAsyncProcessReturnCode()
        {
            return _proxyTarget.GetAsyncProcessReturnCode();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 IsUpgradeAvailable()
        {
            return _proxyTarget.IsUpgradeAvailable();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void WantUpgrade(System.Int32 bWantUpgrade)
        {
            _proxyTarget.WantUpgrade(bWantUpgrade);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AsyncProcessDroppedLicenseRequest()
        {
            _proxyTarget.AsyncProcessDroppedLicenseRequest();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetMSOffer(System.String bstrNewVal)
        {
            _proxyTarget.SetMSOffer(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetOtherOffer()
        {
            return _proxyTarget.GetOtherOffer();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetOtherOffer(System.String bstrNewVal)
        {
            _proxyTarget.SetOtherOffer(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetAddress2()
        {
            return _proxyTarget.GetAddress2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetAddress2(System.String bstrNewVal)
        {
            _proxyTarget.SetAddress2(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 CheckSystemClock()
        {
            return _proxyTarget.CheckSystemClock();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.DateTime GetExistingExpiryDate()
        {
            return _proxyTarget.GetExistingExpiryDate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.DateTime GetNewExpiryDate()
        {
            return _proxyTarget.GetNewExpiryDate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingFirstName()
        {
            return _proxyTarget.GetBillingFirstName();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingFirstName(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingFirstName(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingLastName()
        {
            return _proxyTarget.GetBillingLastName();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingLastName(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingLastName(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingPhone()
        {
            return _proxyTarget.GetBillingPhone();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingPhone(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingPhone(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingAddress1()
        {
            return _proxyTarget.GetBillingAddress1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingAddress1(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingAddress1(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingAddress2()
        {
            return _proxyTarget.GetBillingAddress2();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingAddress2(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingAddress2(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingCity()
        {
            return _proxyTarget.GetBillingCity();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingCity(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingCity(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingState()
        {
            return _proxyTarget.GetBillingState();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingState(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingState(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingCountryCode()
        {
            return _proxyTarget.GetBillingCountryCode();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingCountryCode(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingCountryCode(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetBillingZip()
        {
            return _proxyTarget.GetBillingZip();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBillingZip(System.String bstrNewVal)
        {
            _proxyTarget.SetBillingZip(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 SaveBillingInfo(System.Int32 bSave)
        {
            return _proxyTarget.SaveBillingInfo(bSave);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 IsCCRenewalCountry(System.String bstrCountryCode)
        {
            return _proxyTarget.IsCCRenewalCountry(bstrCountryCode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 Initialize(System.UInt32 dwBPC, System.UInt32 dwMode, System.String bstrLicSource)
        {
            return _proxyTarget.Initialize(dwBPC, dwMode, bstrLicSource);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetFirstName()
        {
            return _proxyTarget.GetFirstName();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetFirstName(System.String bstrNewVal)
        {
            _proxyTarget.SetFirstName(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetLastName()
        {
            return _proxyTarget.GetLastName();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetLastName(System.String bstrNewVal)
        {
            _proxyTarget.SetLastName(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetOrgName()
        {
            return _proxyTarget.GetOrgName();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetOrgName(System.String bstrNewVal)
        {
            _proxyTarget.SetOrgName(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetEmail()
        {
            return _proxyTarget.GetEmail();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetEmail(System.String bstrNewVal)
        {
            _proxyTarget.SetEmail(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetPhone()
        {
            return _proxyTarget.GetPhone();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetPhone(System.String bstrNewVal)
        {
            _proxyTarget.SetPhone(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetAddress1()
        {
            return _proxyTarget.GetAddress1();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetAddress1(System.String bstrNewVal)
        {
            _proxyTarget.SetAddress1(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCity()
        {
            return _proxyTarget.GetCity();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCity(System.String bstrNewVal)
        {
            _proxyTarget.SetCity(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetState()
        {
            return _proxyTarget.GetState();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetState(System.String bstrNewVal)
        {
            _proxyTarget.SetState(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCountryCode()
        {
            return _proxyTarget.GetCountryCode();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCountryCode(System.String bstrNewVal)
        {
            _proxyTarget.SetCountryCode(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCountryDesc()
        {
            return _proxyTarget.GetCountryDesc();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetCountryDesc(System.String bstrNewVal)
        {
            _proxyTarget.SetCountryDesc(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetZip()
        {
            return _proxyTarget.GetZip();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetZip(System.String bstrNewVal)
        {
            _proxyTarget.SetZip(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.UInt32 GetIsoLanguage()
        {
            return _proxyTarget.GetIsoLanguage();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetIsoLanguage(System.UInt32 dwNewVal)
        {
            _proxyTarget.SetIsoLanguage(dwNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetMSUpdate()
        {
            return _proxyTarget.GetMSUpdate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetMSUpdate(System.String bstrNewVal)
        {
            _proxyTarget.SetMSUpdate(bstrNewVal);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetMSOffer()
        {
            return _proxyTarget.GetMSOffer();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoEServicesDialog which adds IDispose to the interface
    /// </summary>
    public class IMsoEServicesDialogProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoEServicesDialog _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoEServicesDialog which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoEServicesDialogProxy(Microsoft.Office.Core.IMsoEServicesDialog proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Close(System.Boolean ApplyWebComponentChanges)
        {
            _proxyTarget.Close(ApplyWebComponentChanges);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddTrustedDomain(System.String Domain)
        {
            _proxyTarget.AddTrustedDomain(Domain);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ApplicationName()
        {
            return _proxyTarget.ApplicationName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_WebComponent()
        {
            return _proxyTarget.WebComponent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ClipArt()
        {
            return _proxyTarget.ClipArt;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WebComponentProperties which adds IDispose to the interface
    /// </summary>
    public class WebComponentPropertiesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WebComponentProperties _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WebComponentProperties which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WebComponentPropertiesProxy(Microsoft.Office.Core.WebComponentProperties proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Shape()
        {
            return _proxyTarget.Shape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String RetValue)
        {
            _proxyTarget.Name = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_URL()
        {
            return _proxyTarget.URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_URL(System.String RetValue)
        {
            _proxyTarget.URL = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_HTML()
        {
            return _proxyTarget.HTML;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HTML(System.String RetValue)
        {
            _proxyTarget.HTML = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_PreviewGraphic()
        {
            return _proxyTarget.PreviewGraphic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PreviewGraphic(System.String RetValue)
        {
            _proxyTarget.PreviewGraphic = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_PreviewHTML()
        {
            return _proxyTarget.PreviewHTML;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PreviewHTML(System.String RetValue)
        {
            _proxyTarget.PreviewHTML = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 RetValue)
        {
            _proxyTarget.Width = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 RetValue)
        {
            _proxyTarget.Height = RetValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Tag(System.String RetValue)
        {
            _proxyTarget.Tag = RetValue;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartDocument which adds IDispose to the interface
    /// </summary>
    public class SmartDocumentProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartDocument _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartDocument which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartDocumentProxy(Microsoft.Office.Core.SmartDocument proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SolutionID()
        {
            return _proxyTarget.SolutionID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SolutionID(System.String pbstrID)
        {
            _proxyTarget.SolutionID = pbstrID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SolutionURL()
        {
            return _proxyTarget.SolutionURL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SolutionURL(System.String pbstrUrl)
        {
            _proxyTarget.SolutionURL = pbstrUrl;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PickSolution(System.Boolean ConsiderAllSchemas)
        {
            _proxyTarget.PickSolution(ConsiderAllSchemas);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RefreshPane()
        {
            _proxyTarget.RefreshPane();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceMember which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceMemberProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceMember _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceMember which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceMemberProxy(Microsoft.Office.Core.SharedWorkspaceMember proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DomainName()
        {
            return _proxyTarget.DomainName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Email()
        {
            return _proxyTarget.Email;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceMembers which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceMembersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceMembers _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceMembers which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceMembersProxy(Microsoft.Office.Core.SharedWorkspaceMembers proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SharedWorkspaceMemberProxy this[System.Int32 Index]
		{
			get { return new SharedWorkspaceMemberProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SharedWorkspaceMemberProxy Add(System.String Email, System.String DomainName, System.String DisplayName, System.Object Role)
        {
            return new SharedWorkspaceMemberProxy(_proxyTarget.Add(Email, DomainName, DisplayName, Role));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ItemCountExceeded()
        {
            return _proxyTarget.ItemCountExceeded;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceTask which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceTaskProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceTask _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceTask which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceTaskProxy(Microsoft.Office.Core.SharedWorkspaceTask proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Title(System.String Title)
        {
            _proxyTarget.Title = Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_AssignedTo()
        {
            return _proxyTarget.AssignedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AssignedTo(System.String AssignedTo)
        {
            _proxyTarget.AssignedTo = AssignedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSharedWorkspaceTaskStatus get_Status()
        {
            return _proxyTarget.Status;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Status(Microsoft.Office.Core.MsoSharedWorkspaceTaskStatus Status)
        {
            _proxyTarget.Status = Status;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSharedWorkspaceTaskPriority get_Priority()
        {
            return _proxyTarget.Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Priority(Microsoft.Office.Core.MsoSharedWorkspaceTaskPriority Priority)
        {
            _proxyTarget.Priority = Priority;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Description(System.String Description)
        {
            _proxyTarget.Description = Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_DueDate()
        {
            return _proxyTarget.DueDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DueDate(System.Object DueDate)
        {
            _proxyTarget.DueDate = DueDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CreatedBy()
        {
            return _proxyTarget.CreatedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_CreatedDate()
        {
            return _proxyTarget.CreatedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ModifiedBy()
        {
            return _proxyTarget.ModifiedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ModifiedDate()
        {
            return _proxyTarget.ModifiedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Save()
        {
            _proxyTarget.Save();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceTasks which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceTasksProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceTasks _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceTasks which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceTasksProxy(Microsoft.Office.Core.SharedWorkspaceTasks proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SharedWorkspaceTaskProxy this[System.Int32 Index]
		{
			get { return new SharedWorkspaceTaskProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SharedWorkspaceTaskProxy Add(System.String Title, System.Object Status, System.Object Priority, System.Object Assignee, System.Object Description, System.Object DueDate)
        {
            return new SharedWorkspaceTaskProxy(_proxyTarget.Add(Title, Status, Priority, Assignee, Description, DueDate));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ItemCountExceeded()
        {
            return _proxyTarget.ItemCountExceeded;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceFile which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceFileProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceFile _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceFile which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceFileProxy(Microsoft.Office.Core.SharedWorkspaceFile proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_URL()
        {
            return _proxyTarget.URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CreatedBy()
        {
            return _proxyTarget.CreatedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_CreatedDate()
        {
            return _proxyTarget.CreatedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ModifiedBy()
        {
            return _proxyTarget.ModifiedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ModifiedDate()
        {
            return _proxyTarget.ModifiedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceFiles which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceFilesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceFiles _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceFiles which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceFilesProxy(Microsoft.Office.Core.SharedWorkspaceFiles proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SharedWorkspaceFileProxy this[System.Int32 Index]
		{
			get { return new SharedWorkspaceFileProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SharedWorkspaceFileProxy Add(System.String FileName, System.Object ParentFolder, System.Object OverwriteIfFileAlreadyExists, System.Object KeepInSync)
        {
            return new SharedWorkspaceFileProxy(_proxyTarget.Add(FileName, ParentFolder, OverwriteIfFileAlreadyExists, KeepInSync));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ItemCountExceeded()
        {
            return _proxyTarget.ItemCountExceeded;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceFolder which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceFolderProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceFolder _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceFolder which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceFolderProxy(Microsoft.Office.Core.SharedWorkspaceFolder proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FolderName()
        {
            return _proxyTarget.FolderName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Object DeleteEventIfFolderContainsFiles)
        {
            _proxyTarget.Delete(DeleteEventIfFolderContainsFiles);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceFolders which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceFoldersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceFolders _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceFolders which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceFoldersProxy(Microsoft.Office.Core.SharedWorkspaceFolders proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SharedWorkspaceFolderProxy this[System.Int32 Index]
		{
			get { return new SharedWorkspaceFolderProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SharedWorkspaceFolderProxy Add(System.String FolderName, System.Object ParentFolder)
        {
            return new SharedWorkspaceFolderProxy(_proxyTarget.Add(FolderName, ParentFolder));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ItemCountExceeded()
        {
            return _proxyTarget.ItemCountExceeded;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceLink which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceLinkProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceLink _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceLink which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceLinkProxy(Microsoft.Office.Core.SharedWorkspaceLink proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_URL()
        {
            return _proxyTarget.URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_URL(System.String URL)
        {
            _proxyTarget.URL = URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Description(System.String Description)
        {
            _proxyTarget.Description = Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Notes()
        {
            return _proxyTarget.Notes;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Notes(System.String Notes)
        {
            _proxyTarget.Notes = Notes;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CreatedBy()
        {
            return _proxyTarget.CreatedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_CreatedDate()
        {
            return _proxyTarget.CreatedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ModifiedBy()
        {
            return _proxyTarget.ModifiedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ModifiedDate()
        {
            return _proxyTarget.ModifiedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Save()
        {
            _proxyTarget.Save();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspaceLinks which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceLinksProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspaceLinks _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspaceLinks which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceLinksProxy(Microsoft.Office.Core.SharedWorkspaceLinks proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SharedWorkspaceLinkProxy this[System.Int32 Index]
		{
			get { return new SharedWorkspaceLinkProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SharedWorkspaceLinkProxy Add(System.String URL, System.Object Description, System.Object Notes)
        {
            return new SharedWorkspaceLinkProxy(_proxyTarget.Add(URL, Description, Notes));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ItemCountExceeded()
        {
            return _proxyTarget.ItemCountExceeded;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SharedWorkspace which adds IDispose to the interface
    /// </summary>
    public class SharedWorkspaceProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SharedWorkspace _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SharedWorkspace which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SharedWorkspaceProxy(Microsoft.Office.Core.SharedWorkspace proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String Name)
        {
            _proxyTarget.Name = Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SharedWorkspaceMembersProxy get_Members()
        {
            return new SharedWorkspaceMembersProxy(_proxyTarget.Members);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SharedWorkspaceTasksProxy get_Tasks()
        {
            return new SharedWorkspaceTasksProxy(_proxyTarget.Tasks);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SharedWorkspaceFilesProxy get_Files()
        {
            return new SharedWorkspaceFilesProxy(_proxyTarget.Files);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SharedWorkspaceFoldersProxy get_Folders()
        {
            return new SharedWorkspaceFoldersProxy(_proxyTarget.Folders);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SharedWorkspaceLinksProxy get_Links()
        {
            return new SharedWorkspaceLinksProxy(_proxyTarget.Links);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Refresh()
        {
            _proxyTarget.Refresh();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CreateNew(System.Object URL, System.Object Name)
        {
            _proxyTarget.CreateNew(URL, Name);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_URL()
        {
            return _proxyTarget.URL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Connected()
        {
            return _proxyTarget.Connected;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_LastRefreshed()
        {
            return _proxyTarget.LastRefreshed;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SourceURL()
        {
            return _proxyTarget.SourceURL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SourceURL(System.String pbstrSourceURL)
        {
            _proxyTarget.SourceURL = pbstrSourceURL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RemoveDocument()
        {
            _proxyTarget.RemoveDocument();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Disconnect()
        {
            _proxyTarget.Disconnect();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Sync which adds IDispose to the interface
    /// </summary>
    public class SyncProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Sync _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Sync which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SyncProxy(Microsoft.Office.Core.Sync proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSyncStatusType get_Status()
        {
            return _proxyTarget.Status;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_WorkspaceLastChangedBy()
        {
            return _proxyTarget.WorkspaceLastChangedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_LastSyncTime()
        {
            return _proxyTarget.LastSyncTime;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSyncErrorType get_ErrorType()
        {
            return _proxyTarget.ErrorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void GetUpdate()
        {
            _proxyTarget.GetUpdate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PutUpdate()
        {
            _proxyTarget.PutUpdate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void OpenVersion(Microsoft.Office.Core.MsoSyncVersionType SyncVersionType)
        {
            _proxyTarget.OpenVersion(SyncVersionType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ResolveConflict(Microsoft.Office.Core.MsoSyncConflictResolutionType SyncConflictResolution)
        {
            _proxyTarget.ResolveConflict(SyncConflictResolution);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Unsuspend()
        {
            _proxyTarget.Unsuspend();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DocumentLibraryVersion which adds IDispose to the interface
    /// </summary>
    public class DocumentLibraryVersionProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DocumentLibraryVersion _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DocumentLibraryVersion which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DocumentLibraryVersionProxy(Microsoft.Office.Core.DocumentLibraryVersion proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Modified()
        {
            return _proxyTarget.Modified;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ModifiedBy()
        {
            return _proxyTarget.ModifiedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Comments()
        {
            return _proxyTarget.Comments;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Open()
        {
            return _proxyTarget.Open();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Restore()
        {
            return _proxyTarget.Restore();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DocumentLibraryVersions which adds IDispose to the interface
    /// </summary>
    public class DocumentLibraryVersionsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DocumentLibraryVersions _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DocumentLibraryVersions which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DocumentLibraryVersionsProxy(Microsoft.Office.Core.DocumentLibraryVersions proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual DocumentLibraryVersionProxy this[System.Int32 lIndex]
		{
			get { return new DocumentLibraryVersionProxy(_proxyTarget[lIndex]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsVersioningEnabled()
        {
            return _proxyTarget.IsVersioningEnabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for UserPermission which adds IDispose to the interface
    /// </summary>
    public class UserPermissionProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.UserPermission _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.UserPermission which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public UserPermissionProxy(Microsoft.Office.Core.UserPermission proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_UserId()
        {
            return _proxyTarget.UserId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Permission()
        {
            return _proxyTarget.Permission;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Permission(System.Int32 Permission)
        {
            _proxyTarget.Permission = Permission;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ExpirationDate()
        {
            return _proxyTarget.ExpirationDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ExpirationDate(System.Object ExpirationDate)
        {
            _proxyTarget.ExpirationDate = ExpirationDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Remove()
        {
            _proxyTarget.Remove();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Permission which adds IDispose to the interface
    /// </summary>
    public class PermissionProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Permission _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Permission which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PermissionProxy(Microsoft.Office.Core.Permission proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual UserPermissionProxy this[System.Object Index]
		{
			get { return new UserPermissionProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_EnableTrustedBrowser()
        {
            return _proxyTarget.EnableTrustedBrowser;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_EnableTrustedBrowser(System.Boolean Enable)
        {
            _proxyTarget.EnableTrustedBrowser = Enable;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual UserPermissionProxy Add(System.String UserId, System.Object Permission, System.Object ExpirationDate)
        {
            return new UserPermissionProxy(_proxyTarget.Add(UserId, Permission, ExpirationDate));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyPolicy(System.String FileName)
        {
            _proxyTarget.ApplyPolicy(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RemoveAll()
        {
            _proxyTarget.RemoveAll();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Enabled()
        {
            return _proxyTarget.Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Enabled(System.Boolean Enabled)
        {
            _proxyTarget.Enabled = Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_RequestPermissionURL()
        {
            return _proxyTarget.RequestPermissionURL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RequestPermissionURL(System.String Contact)
        {
            _proxyTarget.RequestPermissionURL = Contact;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_PolicyName()
        {
            return _proxyTarget.PolicyName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_PolicyDescription()
        {
            return _proxyTarget.PolicyDescription;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_StoreLicenses()
        {
            return _proxyTarget.StoreLicenses;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_StoreLicenses(System.Boolean Enabled)
        {
            _proxyTarget.StoreLicenses = Enabled;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DocumentAuthor()
        {
            return _proxyTarget.DocumentAuthor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DocumentAuthor(System.String Author)
        {
            _proxyTarget.DocumentAuthor = Author;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_PermissionFromPolicy()
        {
            return _proxyTarget.PermissionFromPolicy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MsoDebugOptions_UTRunResult which adds IDispose to the interface
    /// </summary>
    public class MsoDebugOptions_UTRunResultProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MsoDebugOptions_UTRunResult _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MsoDebugOptions_UTRunResult which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MsoDebugOptions_UTRunResultProxy(Microsoft.Office.Core.MsoDebugOptions_UTRunResult proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Passed()
        {
            return _proxyTarget.Passed;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ErrorString()
        {
            return _proxyTarget.ErrorString;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MsoDebugOptions_UT which adds IDispose to the interface
    /// </summary>
    public class MsoDebugOptions_UTProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MsoDebugOptions_UT _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MsoDebugOptions_UT which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MsoDebugOptions_UTProxy(Microsoft.Office.Core.MsoDebugOptions_UT proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CollectionName()
        {
            return _proxyTarget.CollectionName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual MsoDebugOptions_UTRunResultProxy Run()
        {
            return new MsoDebugOptions_UTRunResultProxy(_proxyTarget.Run());
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MsoDebugOptions_UTs which adds IDispose to the interface
    /// </summary>
    public class MsoDebugOptions_UTsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MsoDebugOptions_UTs _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MsoDebugOptions_UTs which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MsoDebugOptions_UTsProxy(Microsoft.Office.Core.MsoDebugOptions_UTs proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual MsoDebugOptions_UTProxy this[System.Int32 Index]
		{
			get { return new MsoDebugOptions_UTProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual MsoDebugOptions_UTsProxy GetUnitTestsInCollection(System.String bstrCollectionName)
        {
            return new MsoDebugOptions_UTsProxy(_proxyTarget.GetUnitTestsInCollection(bstrCollectionName));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual MsoDebugOptions_UTProxy GetUnitTest(System.String bstrCollectionName, System.String bstrUnitTestName)
        {
            return new MsoDebugOptions_UTProxy(_proxyTarget.GetUnitTest(bstrCollectionName, bstrUnitTestName));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual MsoDebugOptions_UTsProxy GetMatchingUnitTestsInCollection(System.String bstrCollectionName, System.String bstrUnitTestNameFilter)
        {
            return new MsoDebugOptions_UTsProxy(_proxyTarget.GetMatchingUnitTestsInCollection(bstrCollectionName, bstrUnitTestNameFilter));
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MsoDebugOptions_UTManager which adds IDispose to the interface
    /// </summary>
    public class MsoDebugOptions_UTManagerProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MsoDebugOptions_UTManager _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MsoDebugOptions_UTManager which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MsoDebugOptions_UTManagerProxy(Microsoft.Office.Core.MsoDebugOptions_UTManager proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual MsoDebugOptions_UTsProxy get_UnitTests()
        {
            return new MsoDebugOptions_UTsProxy(_proxyTarget.UnitTests);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NotifyStartOfTestSuiteRun()
        {
            _proxyTarget.NotifyStartOfTestSuiteRun();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NotifyEndOfTestSuiteRun()
        {
            _proxyTarget.NotifyEndOfTestSuiteRun();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ReportErrors()
        {
            return _proxyTarget.ReportErrors;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReportErrors(System.Boolean pfReportErrors)
        {
            _proxyTarget.ReportErrors = pfReportErrors;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MetaProperty which adds IDispose to the interface
    /// </summary>
    public class MetaPropertyProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MetaProperty _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MetaProperty which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MetaPropertyProxy(Microsoft.Office.Core.MetaProperty proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Value()
        {
            return _proxyTarget.Value;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Value(System.Object pvarValue)
        {
            _proxyTarget.Value = pvarValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsReadOnly()
        {
            return _proxyTarget.IsReadOnly;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsRequired()
        {
            return _proxyTarget.IsRequired;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoMetaPropertyType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String Validate()
        {
            return _proxyTarget.Validate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ValidationError()
        {
            return _proxyTarget.ValidationError;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for MetaProperties which adds IDispose to the interface
    /// </summary>
    public class MetaPropertiesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.MetaProperties _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.MetaProperties which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public MetaPropertiesProxy(Microsoft.Office.Core.MetaProperties proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual MetaPropertyProxy this[System.Object Index]
		{
			get { return new MetaPropertyProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual MetaPropertyProxy GetItemByInternalName(System.String InternalName)
        {
            return new MetaPropertyProxy(_proxyTarget.GetItemByInternalName(InternalName));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String Validate()
        {
            return _proxyTarget.Validate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ValidationError()
        {
            return _proxyTarget.ValidationError;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SchemaXml()
        {
            return _proxyTarget.SchemaXml;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PolicyItem which adds IDispose to the interface
    /// </summary>
    public class PolicyItemProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PolicyItem _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PolicyItem which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PolicyItemProxy(Microsoft.Office.Core.PolicyItem proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Data()
        {
            return _proxyTarget.Data;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ServerPolicy which adds IDispose to the interface
    /// </summary>
    public class ServerPolicyProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ServerPolicy _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ServerPolicy which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ServerPolicyProxy(Microsoft.Office.Core.ServerPolicy proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual PolicyItemProxy this[System.Object Index]
		{
			get { return new PolicyItemProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Statement()
        {
            return _proxyTarget.Statement;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BlockPreview()
        {
            return _proxyTarget.BlockPreview;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DocumentInspector which adds IDispose to the interface
    /// </summary>
    public class DocumentInspectorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DocumentInspector _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DocumentInspector which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DocumentInspectorProxy(Microsoft.Office.Core.DocumentInspector proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Inspect(out Microsoft.Office.Core.MsoDocInspectorStatus Status, out System.String Results)
        {
            _proxyTarget.Inspect(out Status, out Results);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Fix(out Microsoft.Office.Core.MsoDocInspectorStatus Status, out System.String Results)
        {
            _proxyTarget.Fix(out Status, out Results);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for DocumentInspectors which adds IDispose to the interface
    /// </summary>
    public class DocumentInspectorsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.DocumentInspectors _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.DocumentInspectors which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public DocumentInspectorsProxy(Microsoft.Office.Core.DocumentInspectors proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual DocumentInspectorProxy this[System.Int32 Index]
		{
			get { return new DocumentInspectorProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WorkflowTask which adds IDispose to the interface
    /// </summary>
    public class WorkflowTaskProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WorkflowTask _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WorkflowTask which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WorkflowTaskProxy(Microsoft.Office.Core.WorkflowTask proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_ListID()
        {
            return _proxyTarget.ListID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_WorkflowID()
        {
            return _proxyTarget.WorkflowID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_AssignedTo()
        {
            return _proxyTarget.AssignedTo;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_CreatedBy()
        {
            return _proxyTarget.CreatedBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.DateTime get_DueDate()
        {
            return _proxyTarget.DueDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.DateTime get_CreatedDate()
        {
            return _proxyTarget.CreatedDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Show()
        {
            return _proxyTarget.Show();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WorkflowTasks which adds IDispose to the interface
    /// </summary>
    public class WorkflowTasksProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WorkflowTasks _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WorkflowTasks which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WorkflowTasksProxy(Microsoft.Office.Core.WorkflowTasks proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual WorkflowTaskProxy this[System.Int32 Index]
		{
			get { return new WorkflowTaskProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WorkflowTemplate which adds IDispose to the interface
    /// </summary>
    public class WorkflowTemplateProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WorkflowTemplate _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WorkflowTemplate which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WorkflowTemplateProxy(Microsoft.Office.Core.WorkflowTemplate proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DocumentLibraryName()
        {
            return _proxyTarget.DocumentLibraryName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DocumentLibraryURL()
        {
            return _proxyTarget.DocumentLibraryURL;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Show()
        {
            return _proxyTarget.Show();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for WorkflowTemplates which adds IDispose to the interface
    /// </summary>
    public class WorkflowTemplatesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.WorkflowTemplates _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.WorkflowTemplates which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public WorkflowTemplatesProxy(Microsoft.Office.Core.WorkflowTemplates proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual WorkflowTemplateProxy this[System.Int32 Index]
		{
			get { return new WorkflowTemplateProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IDocumentInspector which adds IDispose to the interface
    /// </summary>
    public class IDocumentInspectorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IDocumentInspector _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IDocumentInspector which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IDocumentInspectorProxy(Microsoft.Office.Core.IDocumentInspector proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void GetInfo(out System.String Name, out System.String Desc)
        {
            _proxyTarget.GetInfo(out Name, out Desc);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Inspect(System.Object Doc, out Microsoft.Office.Core.MsoDocInspectorStatus Status, out System.String Result, out System.String Action)
        {
            _proxyTarget.Inspect(Doc, out Status, out Result, out Action);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Fix(System.Object Doc, System.Int32 hwnd, out Microsoft.Office.Core.MsoDocInspectorStatus Status, out System.String Result)
        {
            _proxyTarget.Fix(Doc, hwnd, out Status, out Result);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SignatureSetup which adds IDispose to the interface
    /// </summary>
    public class SignatureSetupProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SignatureSetup _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SignatureSetup which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SignatureSetupProxy(Microsoft.Office.Core.SignatureSetup proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ReadOnly()
        {
            return _proxyTarget.ReadOnly;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SignatureProvider()
        {
            return _proxyTarget.SignatureProvider;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SuggestedSigner()
        {
            return _proxyTarget.SuggestedSigner;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SuggestedSigner(System.String pbstr)
        {
            _proxyTarget.SuggestedSigner = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SuggestedSignerLine2()
        {
            return _proxyTarget.SuggestedSignerLine2;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SuggestedSignerLine2(System.String pbstr)
        {
            _proxyTarget.SuggestedSignerLine2 = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SuggestedSignerEmail()
        {
            return _proxyTarget.SuggestedSignerEmail;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SuggestedSignerEmail(System.String pbstr)
        {
            _proxyTarget.SuggestedSignerEmail = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SigningInstructions()
        {
            return _proxyTarget.SigningInstructions;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SigningInstructions(System.String pbstr)
        {
            _proxyTarget.SigningInstructions = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AllowComments()
        {
            return _proxyTarget.AllowComments;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AllowComments(System.Boolean pvarf)
        {
            _proxyTarget.AllowComments = pvarf;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowSignDate()
        {
            return _proxyTarget.ShowSignDate;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowSignDate(System.Boolean pvarf)
        {
            _proxyTarget.ShowSignDate = pvarf;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_AdditionalXml()
        {
            return _proxyTarget.AdditionalXml;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AdditionalXml(System.String pbstr)
        {
            _proxyTarget.AdditionalXml = pbstr;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SignatureInfo which adds IDispose to the interface
    /// </summary>
    public class SignatureInfoProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SignatureInfo _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SignatureInfo which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SignatureInfoProxy(Microsoft.Office.Core.SignatureInfo proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ReadOnly()
        {
            return _proxyTarget.ReadOnly;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SignatureProvider()
        {
            return _proxyTarget.SignatureProvider;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SignatureText()
        {
            return _proxyTarget.SignatureText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SignatureText(System.String pbstr)
        {
            _proxyTarget.SignatureText = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual stdole.IPictureDisp get_SignatureImage()
        {
            return _proxyTarget.SignatureImage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SignatureImage(stdole.IPictureDisp ppipictdisp)
        {
            _proxyTarget.SignatureImage = ppipictdisp;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SignatureComment()
        {
            return _proxyTarget.SignatureComment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SignatureComment(System.String pbstr)
        {
            _proxyTarget.SignatureComment = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object GetSignatureDetail(Microsoft.Office.Core.SignatureDetail sigdet)
        {
            return _proxyTarget.GetSignatureDetail(sigdet);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object GetCertificateDetail(Microsoft.Office.Core.CertificateDetail certdet)
        {
            return _proxyTarget.GetCertificateDetail(certdet);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.ContentVerificationResults get_ContentVerificationResults()
        {
            return _proxyTarget.ContentVerificationResults;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.CertificateVerificationResults get_CertificateVerificationResults()
        {
            return _proxyTarget.CertificateVerificationResults;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsValid()
        {
            return _proxyTarget.IsValid;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsCertificateExpired()
        {
            return _proxyTarget.IsCertificateExpired;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsCertificateRevoked()
        {
            return _proxyTarget.IsCertificateRevoked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsCertificateUntrusted()
        {
            return _proxyTarget.IsCertificateUntrusted;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowSignatureCertificate(System.Object ParentWindow)
        {
            _proxyTarget.ShowSignatureCertificate(ParentWindow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SelectSignatureCertificate(System.Object ParentWindow)
        {
            _proxyTarget.SelectSignatureCertificate(ParentWindow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SelectCertificateDetailByThumbprint(System.String bstrThumbprint)
        {
            _proxyTarget.SelectCertificateDetailByThumbprint(bstrThumbprint);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SignatureProvider which adds IDispose to the interface
    /// </summary>
    public class SignatureProviderProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SignatureProvider _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SignatureProvider which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SignatureProviderProxy(Microsoft.Office.Core.SignatureProvider proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual stdole.IPictureDisp GenerateSignatureLineImage(Microsoft.Office.Core.SignatureLineImage siglnimg, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, System.Object XmlDsigStream)
        {
            return _proxyTarget.GenerateSignatureLineImage(siglnimg, psigsetup, psiginfo, XmlDsigStream);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowSignatureSetup(System.Object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup)
        {
            _proxyTarget.ShowSignatureSetup(ParentWindow, psigsetup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowSigningCeremony(System.Object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo)
        {
            _proxyTarget.ShowSigningCeremony(ParentWindow, psigsetup, psiginfo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SignXmlDsig(System.Object QueryContinue, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, System.Object XmlDsigStream)
        {
            _proxyTarget.SignXmlDsig(QueryContinue, psigsetup, psiginfo, XmlDsigStream);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NotifySignatureAdded(System.Object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo)
        {
            _proxyTarget.NotifySignatureAdded(ParentWindow, psigsetup, psiginfo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void VerifyXmlDsig(System.Object QueryContinue, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, System.Object XmlDsigStream, ref Microsoft.Office.Core.ContentVerificationResults pcontverres, ref Microsoft.Office.Core.CertificateVerificationResults pcertverres)
        {
            _proxyTarget.VerifyXmlDsig(QueryContinue, psigsetup, psiginfo, XmlDsigStream, ref pcontverres, ref pcertverres);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowSignatureDetails(System.Object ParentWindow, Microsoft.Office.Core.SignatureSetup psigsetup, Microsoft.Office.Core.SignatureInfo psiginfo, System.Object XmlDsigStream, ref Microsoft.Office.Core.ContentVerificationResults pcontverres, ref Microsoft.Office.Core.CertificateVerificationResults pcertverres)
        {
            _proxyTarget.ShowSignatureDetails(ParentWindow, psigsetup, psiginfo, XmlDsigStream, ref pcontverres, ref pcertverres);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object GetProviderDetail(Microsoft.Office.Core.SignatureProviderDetail sigprovdet)
        {
            return _proxyTarget.GetProviderDetail(sigprovdet);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Array HashStream(System.Object QueryContinue, System.Object Stream)
        {
            return _proxyTarget.HashStream(QueryContinue, Stream);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLPrefixMapping which adds IDispose to the interface
    /// </summary>
    public class CustomXMLPrefixMappingProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLPrefixMapping _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLPrefixMapping which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLPrefixMappingProxy(Microsoft.Office.Core.CustomXMLPrefixMapping proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Prefix()
        {
            return _proxyTarget.Prefix;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NamespaceURI()
        {
            return _proxyTarget.NamespaceURI;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLPrefixMappings which adds IDispose to the interface
    /// </summary>
    public class CustomXMLPrefixMappingsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLPrefixMappings _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLPrefixMappings which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLPrefixMappingsProxy(Microsoft.Office.Core.CustomXMLPrefixMappings proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CustomXMLPrefixMappingProxy this[System.Object Index]
		{
			get { return new CustomXMLPrefixMappingProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddNamespace(System.String Prefix, System.String NamespaceURI)
        {
            _proxyTarget.AddNamespace(Prefix, NamespaceURI);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String LookupNamespace(System.String Prefix)
        {
            return _proxyTarget.LookupNamespace(Prefix);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String LookupPrefix(System.String NamespaceURI)
        {
            return _proxyTarget.LookupPrefix(NamespaceURI);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLSchema which adds IDispose to the interface
    /// </summary>
    public class CustomXMLSchemaProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLSchema _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLSchema which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLSchemaProxy(Microsoft.Office.Core.CustomXMLSchema proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Location()
        {
            return _proxyTarget.Location;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NamespaceURI()
        {
            return _proxyTarget.NamespaceURI;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reload()
        {
            _proxyTarget.Reload();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLSchemaCollection which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLSchemaCollectionProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLSchemaCollection _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLSchemaCollection which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLSchemaCollectionProxy(Microsoft.Office.Core._CustomXMLSchemaCollection proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CustomXMLSchemaProxy this[System.Object Index]
		{
			get { return new CustomXMLSchemaProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NamespaceURI(System.Int32 Index)
        {
            return _proxyTarget.NamespaceURI[Index];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLSchemaProxy Add(System.String NamespaceURI, System.String Alias, System.String FileName, System.Boolean InstallForAllUsers)
        {
            return new CustomXMLSchemaProxy(_proxyTarget.Add(NamespaceURI, Alias, FileName, InstallForAllUsers));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddCollection(Microsoft.Office.Core.CustomXMLSchemaCollection SchemaCollection)
        {
            _proxyTarget.AddCollection(SchemaCollection);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean Validate()
        {
            return _proxyTarget.Validate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLSchemaCollection which adds IDispose to the interface
    /// </summary>
    public class CustomXMLSchemaCollectionProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLSchemaCollection _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLSchemaCollection which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLSchemaCollectionProxy(Microsoft.Office.Core.CustomXMLSchemaCollection proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLNodes which adds IDispose to the interface
    /// </summary>
    public class CustomXMLNodesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLNodes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLNodes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLNodesProxy(Microsoft.Office.Core.CustomXMLNodes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CustomXMLNodeProxy this[System.Int32 Index]
		{
			get { return new CustomXMLNodeProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLNode which adds IDispose to the interface
    /// </summary>
    public class CustomXMLNodeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLNode _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLNode which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLNodeProxy(Microsoft.Office.Core.CustomXMLNode proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ReplaceChildNode(Microsoft.Office.Core.CustomXMLNode OldNode, System.String Name, System.String NamespaceURI, Microsoft.Office.Core.MsoCustomXMLNodeType NodeType, System.String NodeValue)
        {
            _proxyTarget.ReplaceChildNode(OldNode, Name, NamespaceURI, NodeType, NodeValue);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ReplaceChildSubtree(System.String XML, Microsoft.Office.Core.CustomXMLNode OldNode)
        {
            _proxyTarget.ReplaceChildSubtree(XML, OldNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLNodesProxy SelectNodes(System.String XPath)
        {
            return new CustomXMLNodesProxy(_proxyTarget.SelectNodes(XPath));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLNodeProxy SelectSingleNode(System.String XPath)
        {
            return new CustomXMLNodeProxy(_proxyTarget.SelectSingleNode(XPath));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodesProxy get_Attributes()
        {
            return new CustomXMLNodesProxy(_proxyTarget.Attributes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_BaseName()
        {
            return _proxyTarget.BaseName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodesProxy get_ChildNodes()
        {
            return new CustomXMLNodesProxy(_proxyTarget.ChildNodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_FirstChild()
        {
            return new CustomXMLNodeProxy(_proxyTarget.FirstChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_LastChild()
        {
            return new CustomXMLNodeProxy(_proxyTarget.LastChild);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NamespaceURI()
        {
            return _proxyTarget.NamespaceURI;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_NextSibling()
        {
            return new CustomXMLNodeProxy(_proxyTarget.NextSibling);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCustomXMLNodeType get_NodeType()
        {
            return _proxyTarget.NodeType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NodeValue()
        {
            return _proxyTarget.NodeValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NodeValue(System.String pbstrNodeValue)
        {
            _proxyTarget.NodeValue = pbstrNodeValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_OwnerDocument()
        {
            return _proxyTarget.OwnerDocument;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLPartProxy get_OwnerPart()
        {
            return new CustomXMLPartProxy(_proxyTarget.OwnerPart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_PreviousSibling()
        {
            return new CustomXMLNodeProxy(_proxyTarget.PreviousSibling);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_ParentNode()
        {
            return new CustomXMLNodeProxy(_proxyTarget.ParentNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstrText)
        {
            _proxyTarget.Text = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_XPath()
        {
            return _proxyTarget.XPath;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_XML()
        {
            return _proxyTarget.XML;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AppendChildNode(System.String Name, System.String NamespaceURI, Microsoft.Office.Core.MsoCustomXMLNodeType NodeType, System.String NodeValue)
        {
            _proxyTarget.AppendChildNode(Name, NamespaceURI, NodeType, NodeValue);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AppendChildSubtree(System.String XML)
        {
            _proxyTarget.AppendChildSubtree(XML);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean HasChildNodes()
        {
            return _proxyTarget.HasChildNodes();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InsertNodeBefore(System.String Name, System.String NamespaceURI, Microsoft.Office.Core.MsoCustomXMLNodeType NodeType, System.String NodeValue, Microsoft.Office.Core.CustomXMLNode NextSibling)
        {
            _proxyTarget.InsertNodeBefore(Name, NamespaceURI, NodeType, NodeValue, NextSibling);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InsertSubtreeBefore(System.String XML, Microsoft.Office.Core.CustomXMLNode NextSibling)
        {
            _proxyTarget.InsertSubtreeBefore(XML, NextSibling);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RemoveChild(Microsoft.Office.Core.CustomXMLNode Child)
        {
            _proxyTarget.RemoveChild(Child);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLValidationError which adds IDispose to the interface
    /// </summary>
    public class CustomXMLValidationErrorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLValidationError _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLValidationError which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLValidationErrorProxy(Microsoft.Office.Core.CustomXMLValidationError proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_Node()
        {
            return new CustomXMLNodeProxy(_proxyTarget.Node);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCustomXMLValidationErrorType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ErrorCode()
        {
            return _proxyTarget.ErrorCode;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLValidationErrors which adds IDispose to the interface
    /// </summary>
    public class CustomXMLValidationErrorsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLValidationErrors _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLValidationErrors which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLValidationErrorsProxy(Microsoft.Office.Core.CustomXMLValidationErrors proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CustomXMLValidationErrorProxy this[System.Int32 Index]
		{
			get { return new CustomXMLValidationErrorProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Add(Microsoft.Office.Core.CustomXMLNode Node, System.String ErrorName, System.String ErrorText, System.Boolean ClearedOnUpdate)
        {
            _proxyTarget.Add(Node, ErrorName, ErrorText, ClearedOnUpdate);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLPart which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLPartProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLPart _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLPart which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLPartProxy(Microsoft.Office.Core._CustomXMLPart proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLNodeProxy get_DocumentElement()
        {
            return new CustomXMLNodeProxy(_proxyTarget.DocumentElement);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NamespaceURI()
        {
            return _proxyTarget.NamespaceURI;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLSchemaCollectionProxy get_SchemaCollection()
        {
            return new CustomXMLSchemaCollectionProxy(_proxyTarget.SchemaCollection);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SchemaCollection(Microsoft.Office.Core.CustomXMLSchemaCollection ppSchemaCollection)
        {
            _proxyTarget.SchemaCollection = ppSchemaCollection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLPrefixMappingsProxy get_NamespaceManager()
        {
            return new CustomXMLPrefixMappingsProxy(_proxyTarget.NamespaceManager);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_XML()
        {
            return _proxyTarget.XML;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddNode(Microsoft.Office.Core.CustomXMLNode Parent, System.String Name, System.String NamespaceURI, Microsoft.Office.Core.CustomXMLNode NextSibling, Microsoft.Office.Core.MsoCustomXMLNodeType NodeType, System.String NodeValue)
        {
            _proxyTarget.AddNode(Parent, Name, NamespaceURI, NextSibling, NodeType, NodeValue);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean Load(System.String FilePath)
        {
            return _proxyTarget.Load(FilePath);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean LoadXML(System.String XML)
        {
            return _proxyTarget.LoadXML(XML);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLNodesProxy SelectNodes(System.String XPath)
        {
            return new CustomXMLNodesProxy(_proxyTarget.SelectNodes(XPath));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLNodeProxy SelectSingleNode(System.String XPath)
        {
            return new CustomXMLNodeProxy(_proxyTarget.SelectSingleNode(XPath));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual CustomXMLValidationErrorsProxy get_Errors()
        {
            return new CustomXMLValidationErrorsProxy(_proxyTarget.Errors);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BuiltIn()
        {
            return _proxyTarget.BuiltIn;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICustomXMLPartEvents which adds IDispose to the interface
    /// </summary>
    public class ICustomXMLPartEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICustomXMLPartEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICustomXMLPartEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICustomXMLPartEventsProxy(Microsoft.Office.Core.ICustomXMLPartEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NodeAfterInsert(Microsoft.Office.Core.CustomXMLNode NewNode, System.Boolean InUndoRedo)
        {
            _proxyTarget.NodeAfterInsert(NewNode, InUndoRedo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NodeAfterDelete(Microsoft.Office.Core.CustomXMLNode OldNode, Microsoft.Office.Core.CustomXMLNode OldParentNode, Microsoft.Office.Core.CustomXMLNode OldNextSibling, System.Boolean InUndoRedo)
        {
            _proxyTarget.NodeAfterDelete(OldNode, OldParentNode, OldNextSibling, InUndoRedo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NodeAfterReplace(Microsoft.Office.Core.CustomXMLNode OldNode, Microsoft.Office.Core.CustomXMLNode NewNode, System.Boolean InUndoRedo)
        {
            _proxyTarget.NodeAfterReplace(OldNode, NewNode, InUndoRedo);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLPartEvents which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLPartEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLPartEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLPartEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLPartEventsProxy(Microsoft.Office.Core._CustomXMLPartEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NodeAfterInsert(Microsoft.Office.Core.CustomXMLNode NewNode, System.Boolean InUndoRedo)
        {
            _proxyTarget.NodeAfterInsert(NewNode, InUndoRedo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NodeAfterDelete(Microsoft.Office.Core.CustomXMLNode OldNode, Microsoft.Office.Core.CustomXMLNode OldParentNode, Microsoft.Office.Core.CustomXMLNode OldNextSibling, System.Boolean InUndoRedo)
        {
            _proxyTarget.NodeAfterDelete(OldNode, OldParentNode, OldNextSibling, InUndoRedo);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void NodeAfterReplace(Microsoft.Office.Core.CustomXMLNode OldNode, Microsoft.Office.Core.CustomXMLNode NewNode, System.Boolean InUndoRedo)
        {
            _proxyTarget.NodeAfterReplace(OldNode, NewNode, InUndoRedo);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLPartEvents_Event which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLPartEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLPartEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLPartEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLPartEvents_EventProxy(Microsoft.Office.Core._CustomXMLPartEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomXMLPartEvents_NodeAfterInsertEventHandler NodeAfterInsert
        {
            add { _proxyTarget.NodeAfterInsert += value; }
            remove { _proxyTarget.NodeAfterInsert -= value; }
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomXMLPartEvents_NodeAfterDeleteEventHandler NodeAfterDelete
        {
            add { _proxyTarget.NodeAfterDelete += value; }
            remove { _proxyTarget.NodeAfterDelete -= value; }
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomXMLPartEvents_NodeAfterReplaceEventHandler NodeAfterReplace
        {
            add { _proxyTarget.NodeAfterReplace += value; }
            remove { _proxyTarget.NodeAfterReplace -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLPart which adds IDispose to the interface
    /// </summary>
    public class CustomXMLPartProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLPart _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLPart which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLPartProxy(Microsoft.Office.Core.CustomXMLPart proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLParts which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLPartsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLParts _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLParts which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLPartsProxy(Microsoft.Office.Core._CustomXMLParts proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual CustomXMLPartProxy this[System.Object Index]
		{
			get { return new CustomXMLPartProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLPartProxy Add(System.String XML, System.Object SchemaCollection)
        {
            return new CustomXMLPartProxy(_proxyTarget.Add(XML, SchemaCollection));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLPartProxy SelectByID(System.String Id)
        {
            return new CustomXMLPartProxy(_proxyTarget.SelectByID(Id));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomXMLPartsProxy SelectByNamespace(System.String NamespaceURI)
        {
            return new CustomXMLPartsProxy(_proxyTarget.SelectByNamespace(NamespaceURI));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICustomXMLPartsEvents which adds IDispose to the interface
    /// </summary>
    public class ICustomXMLPartsEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICustomXMLPartsEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICustomXMLPartsEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICustomXMLPartsEventsProxy(Microsoft.Office.Core.ICustomXMLPartsEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PartAfterAdd(Microsoft.Office.Core.CustomXMLPart NewPart)
        {
            _proxyTarget.PartAfterAdd(NewPart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PartBeforeDelete(Microsoft.Office.Core.CustomXMLPart OldPart)
        {
            _proxyTarget.PartBeforeDelete(OldPart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PartAfterLoad(Microsoft.Office.Core.CustomXMLPart Part)
        {
            _proxyTarget.PartAfterLoad(Part);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLPartsEvents which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLPartsEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLPartsEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLPartsEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLPartsEventsProxy(Microsoft.Office.Core._CustomXMLPartsEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PartAfterAdd(Microsoft.Office.Core.CustomXMLPart NewPart)
        {
            _proxyTarget.PartAfterAdd(NewPart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PartBeforeDelete(Microsoft.Office.Core.CustomXMLPart OldPart)
        {
            _proxyTarget.PartBeforeDelete(OldPart);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PartAfterLoad(Microsoft.Office.Core.CustomXMLPart Part)
        {
            _proxyTarget.PartAfterLoad(Part);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomXMLPartsEvents_Event which adds IDispose to the interface
    /// </summary>
    public class _CustomXMLPartsEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomXMLPartsEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomXMLPartsEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomXMLPartsEvents_EventProxy(Microsoft.Office.Core._CustomXMLPartsEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomXMLPartsEvents_PartAfterAddEventHandler PartAfterAdd
        {
            add { _proxyTarget.PartAfterAdd += value; }
            remove { _proxyTarget.PartAfterAdd -= value; }
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomXMLPartsEvents_PartBeforeDeleteEventHandler PartBeforeDelete
        {
            add { _proxyTarget.PartBeforeDelete += value; }
            remove { _proxyTarget.PartBeforeDelete -= value; }
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomXMLPartsEvents_PartAfterLoadEventHandler PartAfterLoad
        {
            add { _proxyTarget.PartAfterLoad += value; }
            remove { _proxyTarget.PartAfterLoad -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomXMLParts which adds IDispose to the interface
    /// </summary>
    public class CustomXMLPartsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomXMLParts _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomXMLParts which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomXMLPartsProxy(Microsoft.Office.Core.CustomXMLParts proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for GradientStop which adds IDispose to the interface
    /// </summary>
    public class GradientStopProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.GradientStop _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.GradientStop which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public GradientStopProxy(Microsoft.Office.Core.GradientStop proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_Color()
        {
            return new ColorFormatProxy(_proxyTarget.Color);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(System.Single Position)
        {
            _proxyTarget.Position = Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Transparency()
        {
            return _proxyTarget.Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Transparency(System.Single Transparency)
        {
            _proxyTarget.Transparency = Transparency;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for GradientStops which adds IDispose to the interface
    /// </summary>
    public class GradientStopsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.GradientStops _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.GradientStops which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public GradientStopsProxy(Microsoft.Office.Core.GradientStops proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual GradientStopProxy this[System.Int32 Index]
		{
			get { return new GradientStopProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Int32 Index)
        {
            _proxyTarget.Delete(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Insert(System.Int32 RGB, System.Single Position, System.Single Transparency, System.Int32 Index)
        {
            _proxyTarget.Insert(RGB, Position, Transparency, Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Insert2(System.Int32 RGB, System.Single Position, System.Single Transparency, System.Int32 Index, System.Single Brightness)
        {
            _proxyTarget.Insert2(RGB, Position, Transparency, Index, Brightness);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SoftEdgeFormat which adds IDispose to the interface
    /// </summary>
    public class SoftEdgeFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SoftEdgeFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SoftEdgeFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SoftEdgeFormatProxy(Microsoft.Office.Core.SoftEdgeFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSoftEdgeType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoSoftEdgeType Type)
        {
            _proxyTarget.Type = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Radius()
        {
            return _proxyTarget.Radius;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Radius(System.Single Radius)
        {
            _proxyTarget.Radius = Radius;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for GlowFormat which adds IDispose to the interface
    /// </summary>
    public class GlowFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.GlowFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.GlowFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public GlowFormatProxy(Microsoft.Office.Core.GlowFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Radius()
        {
            return _proxyTarget.Radius;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Radius(System.Single Radius)
        {
            _proxyTarget.Radius = Radius;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_Color()
        {
            return new ColorFormatProxy(_proxyTarget.Color);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Transparency()
        {
            return _proxyTarget.Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Transparency(System.Single Transparency)
        {
            _proxyTarget.Transparency = Transparency;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ReflectionFormat which adds IDispose to the interface
    /// </summary>
    public class ReflectionFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ReflectionFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ReflectionFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ReflectionFormatProxy(Microsoft.Office.Core.ReflectionFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoReflectionType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoReflectionType Type)
        {
            _proxyTarget.Type = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Transparency()
        {
            return _proxyTarget.Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Transparency(System.Single Transparency)
        {
            _proxyTarget.Transparency = Transparency;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Size()
        {
            return _proxyTarget.Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Size(System.Single Size)
        {
            _proxyTarget.Size = Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Offset()
        {
            return _proxyTarget.Offset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Offset(System.Single Offset)
        {
            _proxyTarget.Offset = Offset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Blur()
        {
            return _proxyTarget.Blur;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Blur(System.Single Blur)
        {
            _proxyTarget.Blur = Blur;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ParagraphFormat2 which adds IDispose to the interface
    /// </summary>
    public class ParagraphFormat2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ParagraphFormat2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ParagraphFormat2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ParagraphFormat2Proxy(Microsoft.Office.Core.ParagraphFormat2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_SpaceBefore()
        {
            return _proxyTarget.SpaceBefore;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SpaceBefore(System.Single Space)
        {
            _proxyTarget.SpaceBefore = Space;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_SpaceWithin()
        {
            return _proxyTarget.SpaceWithin;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SpaceWithin(System.Single Space)
        {
            _proxyTarget.SpaceWithin = Space;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TabStops2Proxy get_TabStops()
        {
            return new TabStops2Proxy(_proxyTarget.TabStops);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextDirection get_TextDirection()
        {
            return _proxyTarget.TextDirection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextDirection(Microsoft.Office.Core.MsoTextDirection Direction)
        {
            _proxyTarget.TextDirection = Direction;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_WordWrap()
        {
            return _proxyTarget.WordWrap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WordWrap(Microsoft.Office.Core.MsoTriState WordWrap)
        {
            _proxyTarget.WordWrap = WordWrap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoParagraphAlignment get_Alignment()
        {
            return _proxyTarget.Alignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Alignment(Microsoft.Office.Core.MsoParagraphAlignment Alignment)
        {
            _proxyTarget.Alignment = Alignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBaselineAlignment get_BaselineAlignment()
        {
            return _proxyTarget.BaselineAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BaselineAlignment(Microsoft.Office.Core.MsoBaselineAlignment BaselineAlignment)
        {
            _proxyTarget.BaselineAlignment = BaselineAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual BulletFormat2Proxy get_Bullet()
        {
            return new BulletFormat2Proxy(_proxyTarget.Bullet);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_FarEastLineBreakLevel()
        {
            return _proxyTarget.FarEastLineBreakLevel;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FarEastLineBreakLevel(Microsoft.Office.Core.MsoTriState Break)
        {
            _proxyTarget.FarEastLineBreakLevel = Break;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_FirstLineIndent()
        {
            return _proxyTarget.FirstLineIndent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FirstLineIndent(System.Single Indent)
        {
            _proxyTarget.FirstLineIndent = Indent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HangingPunctuation()
        {
            return _proxyTarget.HangingPunctuation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HangingPunctuation(Microsoft.Office.Core.MsoTriState Hanging)
        {
            _proxyTarget.HangingPunctuation = Hanging;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_IndentLevel()
        {
            return _proxyTarget.IndentLevel;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_IndentLevel(System.Int32 Level)
        {
            _proxyTarget.IndentLevel = Level;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_LeftIndent()
        {
            return _proxyTarget.LeftIndent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LeftIndent(System.Single Indent)
        {
            _proxyTarget.LeftIndent = Indent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_LineRuleAfter()
        {
            return _proxyTarget.LineRuleAfter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LineRuleAfter(Microsoft.Office.Core.MsoTriState LineRule)
        {
            _proxyTarget.LineRuleAfter = LineRule;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_LineRuleBefore()
        {
            return _proxyTarget.LineRuleBefore;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LineRuleBefore(Microsoft.Office.Core.MsoTriState LineRule)
        {
            _proxyTarget.LineRuleBefore = LineRule;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_LineRuleWithin()
        {
            return _proxyTarget.LineRuleWithin;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LineRuleWithin(Microsoft.Office.Core.MsoTriState LineRule)
        {
            _proxyTarget.LineRuleWithin = LineRule;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_RightIndent()
        {
            return _proxyTarget.RightIndent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RightIndent(System.Single Indent)
        {
            _proxyTarget.RightIndent = Indent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_SpaceAfter()
        {
            return _proxyTarget.SpaceAfter;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SpaceAfter(System.Single Space)
        {
            _proxyTarget.SpaceAfter = Space;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Font2 which adds IDispose to the interface
    /// </summary>
    public class Font2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Font2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Font2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public Font2Proxy(Microsoft.Office.Core.Font2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NameFarEast()
        {
            return _proxyTarget.NameFarEast;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NameFarEast(System.String NameFarEast)
        {
            _proxyTarget.NameFarEast = NameFarEast;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NameOther()
        {
            return _proxyTarget.NameOther;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NameOther(System.String NameOther)
        {
            _proxyTarget.NameOther = NameOther;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Equalize(Microsoft.Office.Core.MsoTriState Equalize)
        {
            _proxyTarget.Equalize = Equalize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FillFormatProxy get_Fill()
        {
            return new FillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GlowFormatProxy get_Glow()
        {
            return new GlowFormatProxy(_proxyTarget.Glow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ReflectionFormatProxy get_Reflection()
        {
            return new ReflectionFormatProxy(_proxyTarget.Reflection);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual LineFormatProxy get_Line()
        {
            return new LineFormatProxy(_proxyTarget.Line);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShadowFormatProxy get_Shadow()
        {
            return new ShadowFormatProxy(_proxyTarget.Shadow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_Highlight()
        {
            return new ColorFormatProxy(_proxyTarget.Highlight);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ColorFormatProxy get_UnderlineColor()
        {
            return new ColorFormatProxy(_proxyTarget.UnderlineColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Smallcaps()
        {
            return _proxyTarget.Smallcaps;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Smallcaps(Microsoft.Office.Core.MsoTriState Smallcaps)
        {
            _proxyTarget.Smallcaps = Smallcaps;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSoftEdgeType get_SoftEdgeFormat()
        {
            return _proxyTarget.SoftEdgeFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SoftEdgeFormat(Microsoft.Office.Core.MsoSoftEdgeType SoftEdgeFormat)
        {
            _proxyTarget.SoftEdgeFormat = SoftEdgeFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_StrikeThrough()
        {
            return _proxyTarget.StrikeThrough;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_StrikeThrough(Microsoft.Office.Core.MsoTriState StrikeThrough)
        {
            _proxyTarget.StrikeThrough = StrikeThrough;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Subscript()
        {
            return _proxyTarget.Subscript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Subscript(Microsoft.Office.Core.MsoTriState Subscript)
        {
            _proxyTarget.Subscript = Subscript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Superscript()
        {
            return _proxyTarget.Superscript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Superscript(Microsoft.Office.Core.MsoTriState Superscript)
        {
            _proxyTarget.Superscript = Superscript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetTextEffect get_WordArtformat()
        {
            return _proxyTarget.WordArtformat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WordArtformat(Microsoft.Office.Core.MsoPresetTextEffect WordArtformat)
        {
            _proxyTarget.WordArtformat = WordArtformat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Embeddable()
        {
            return _proxyTarget.Embeddable;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Embedded()
        {
            return _proxyTarget.Embedded;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String Name)
        {
            _proxyTarget.Name = Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NameAscii()
        {
            return _proxyTarget.NameAscii;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NameAscii(System.String NameAscii)
        {
            _proxyTarget.NameAscii = NameAscii;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NameComplexScript()
        {
            return _proxyTarget.NameComplexScript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NameComplexScript(System.String NameComplexScript)
        {
            _proxyTarget.NameComplexScript = NameComplexScript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Bold()
        {
            return _proxyTarget.Bold;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Bold(Microsoft.Office.Core.MsoTriState Bold)
        {
            _proxyTarget.Bold = Bold;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Italic()
        {
            return _proxyTarget.Italic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Italic(Microsoft.Office.Core.MsoTriState Italic)
        {
            _proxyTarget.Italic = Italic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextStrike get_Strike()
        {
            return _proxyTarget.Strike;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Strike(Microsoft.Office.Core.MsoTextStrike Strike)
        {
            _proxyTarget.Strike = Strike;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextCaps get_Caps()
        {
            return _proxyTarget.Caps;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caps(Microsoft.Office.Core.MsoTextCaps Caps)
        {
            _proxyTarget.Caps = Caps;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_AutorotateNumbers()
        {
            return _proxyTarget.AutorotateNumbers;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutorotateNumbers(Microsoft.Office.Core.MsoTriState RotateNumbers)
        {
            _proxyTarget.AutorotateNumbers = RotateNumbers;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BaselineOffset()
        {
            return _proxyTarget.BaselineOffset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BaselineOffset(System.Single Offset)
        {
            _proxyTarget.BaselineOffset = Offset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Kerning()
        {
            return _proxyTarget.Kerning;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Kerning(System.Single KerningSize)
        {
            _proxyTarget.Kerning = KerningSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Size()
        {
            return _proxyTarget.Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Size(System.Single Size)
        {
            _proxyTarget.Size = Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Spacing()
        {
            return _proxyTarget.Spacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Spacing(System.Single Spacing)
        {
            _proxyTarget.Spacing = Spacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextUnderlineType get_UnderlineStyle()
        {
            return _proxyTarget.UnderlineStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_UnderlineStyle(Microsoft.Office.Core.MsoTextUnderlineType Style)
        {
            _proxyTarget.UnderlineStyle = Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Allcaps()
        {
            return _proxyTarget.Allcaps;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Allcaps(Microsoft.Office.Core.MsoTriState Allcaps)
        {
            _proxyTarget.Allcaps = Allcaps;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_DoubleStrikeThrough()
        {
            return _proxyTarget.DoubleStrikeThrough;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DoubleStrikeThrough(Microsoft.Office.Core.MsoTriState DoubleStrikeThrough)
        {
            _proxyTarget.DoubleStrikeThrough = DoubleStrikeThrough;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Equalize()
        {
            return _proxyTarget.Equalize;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TextColumn2 which adds IDispose to the interface
    /// </summary>
    public class TextColumn2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TextColumn2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TextColumn2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TextColumn2Proxy(Microsoft.Office.Core.TextColumn2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Number()
        {
            return _proxyTarget.Number;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Number(System.Int32 Number)
        {
            _proxyTarget.Number = Number;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Spacing()
        {
            return _proxyTarget.Spacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Spacing(System.Single Spacing)
        {
            _proxyTarget.Spacing = Spacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextDirection get_TextDirection()
        {
            return _proxyTarget.TextDirection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TextDirection(Microsoft.Office.Core.MsoTextDirection Direction)
        {
            _proxyTarget.TextDirection = Direction;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TextRange2 which adds IDispose to the interface
    /// </summary>
    public class TextRange2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TextRange2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TextRange2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TextRange2Proxy(Microsoft.Office.Core.TextRange2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Copy()
        {
            _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy Paste()
        {
            return new TextRange2Proxy(_proxyTarget.Paste());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy PasteSpecial(Microsoft.Office.Core.MsoClipboardFormat Format)
        {
            return new TextRange2Proxy(_proxyTarget.PasteSpecial(Format));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ChangeCase(Microsoft.Office.Core.MsoTextChangeCase Type)
        {
            _proxyTarget.ChangeCase(Type);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AddPeriods()
        {
            _proxyTarget.AddPeriods();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RemovePeriods()
        {
            _proxyTarget.RemovePeriods();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy Find(System.String FindWhat, System.Int32 After, Microsoft.Office.Core.MsoTriState MatchCase, Microsoft.Office.Core.MsoTriState WholeWords)
        {
            return new TextRange2Proxy(_proxyTarget.Find(FindWhat, After, MatchCase, WholeWords));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy Replace(System.String FindWhat, System.String ReplaceWhat, System.Int32 After, Microsoft.Office.Core.MsoTriState MatchCase, Microsoft.Office.Core.MsoTriState WholeWords)
        {
            return new TextRange2Proxy(_proxyTarget.Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RotatedBounds(out System.Single X1, out System.Single Y1, out System.Single X2, out System.Single Y2, out System.Single X3, out System.Single Y3, out System.Single x4, out System.Single y4)
        {
            _proxyTarget.RotatedBounds(out X1, out Y1, out X2, out Y2, out X3, out Y3, out x4, out y4);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoLanguageID get_LanguageID()
        {
            return _proxyTarget.LanguageID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LanguageID(Microsoft.Office.Core.MsoLanguageID LanguageID)
        {
            _proxyTarget.LanguageID = LanguageID;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RtlRun()
        {
            _proxyTarget.RtlRun();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void LtrRun()
        {
            _proxyTarget.LtrRun();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_MathZones(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.MathZones[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstrText)
        {
            _proxyTarget.Text = pbstrText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy Item(System.Object Index)
        {
            return new TextRange2Proxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_Paragraphs(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.Paragraphs[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_Sentences(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.Sentences[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_Words(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.Words[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_Characters(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.Characters[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_Lines(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.Lines[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_Runs(System.Int32 Start, System.Int32 Length)
        {
            return new TextRange2Proxy(_proxyTarget.Runs[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ParagraphFormat2Proxy get_ParagraphFormat()
        {
            return new ParagraphFormat2Proxy(_proxyTarget.ParagraphFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Font2Proxy get_Font()
        {
            return new Font2Proxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Length()
        {
            return _proxyTarget.Length;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Start()
        {
            return _proxyTarget.Start;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BoundLeft()
        {
            return _proxyTarget.BoundLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BoundTop()
        {
            return _proxyTarget.BoundTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BoundWidth()
        {
            return _proxyTarget.BoundWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_BoundHeight()
        {
            return _proxyTarget.BoundHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy TrimText()
        {
            return new TextRange2Proxy(_proxyTarget.TrimText());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy InsertAfter(System.String NewText)
        {
            return new TextRange2Proxy(_proxyTarget.InsertAfter(NewText));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy InsertBefore(System.String NewText)
        {
            return new TextRange2Proxy(_proxyTarget.InsertBefore(NewText));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TextRange2Proxy InsertSymbol(System.String FontName, System.Int32 CharNumber, Microsoft.Office.Core.MsoTriState Unicode)
        {
            return new TextRange2Proxy(_proxyTarget.InsertSymbol(FontName, CharNumber, Unicode));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select()
        {
            _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Cut()
        {
            _proxyTarget.Cut();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TextFrame2 which adds IDispose to the interface
    /// </summary>
    public class TextFrame2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TextFrame2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TextFrame2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TextFrame2Proxy(Microsoft.Office.Core.TextFrame2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_HasText()
        {
            return _proxyTarget.HasText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextRange2Proxy get_TextRange()
        {
            return new TextRange2Proxy(_proxyTarget.TextRange);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextColumn2Proxy get_Column()
        {
            return new TextColumn2Proxy(_proxyTarget.Column);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Ruler2Proxy get_Ruler()
        {
            return new Ruler2Proxy(_proxyTarget.Ruler);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void DeleteText()
        {
            _proxyTarget.DeleteText();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_NoTextRotation()
        {
            return _proxyTarget.NoTextRotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NoTextRotation(Microsoft.Office.Core.MsoTriState NoTextRotation)
        {
            _proxyTarget.NoTextRotation = NoTextRotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginBottom()
        {
            return _proxyTarget.MarginBottom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginBottom(System.Single MarginBottom)
        {
            _proxyTarget.MarginBottom = MarginBottom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginLeft()
        {
            return _proxyTarget.MarginLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginLeft(System.Single MarginLeft)
        {
            _proxyTarget.MarginLeft = MarginLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginRight()
        {
            return _proxyTarget.MarginRight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginRight(System.Single MarginRight)
        {
            _proxyTarget.MarginRight = MarginRight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_MarginTop()
        {
            return _proxyTarget.MarginTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarginTop(System.Single MarginTop)
        {
            _proxyTarget.MarginTop = MarginTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTextOrientation get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(Microsoft.Office.Core.MsoTextOrientation Orientation)
        {
            _proxyTarget.Orientation = Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoHorizontalAnchor get_HorizontalAnchor()
        {
            return _proxyTarget.HorizontalAnchor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HorizontalAnchor(Microsoft.Office.Core.MsoHorizontalAnchor HorizontalAnchor)
        {
            _proxyTarget.HorizontalAnchor = HorizontalAnchor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoVerticalAnchor get_VerticalAnchor()
        {
            return _proxyTarget.VerticalAnchor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VerticalAnchor(Microsoft.Office.Core.MsoVerticalAnchor VerticalAnchor)
        {
            _proxyTarget.VerticalAnchor = VerticalAnchor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPathFormat get_PathFormat()
        {
            return _proxyTarget.PathFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PathFormat(Microsoft.Office.Core.MsoPathFormat PathFormat)
        {
            _proxyTarget.PathFormat = PathFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoWarpFormat get_WarpFormat()
        {
            return _proxyTarget.WarpFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WarpFormat(Microsoft.Office.Core.MsoWarpFormat WarpFormat)
        {
            _proxyTarget.WarpFormat = WarpFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPresetTextEffect get_WordArtformat()
        {
            return _proxyTarget.WordArtformat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WordArtformat(Microsoft.Office.Core.MsoPresetTextEffect WordArtformat)
        {
            _proxyTarget.WordArtformat = WordArtformat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_WordWrap()
        {
            return _proxyTarget.WordWrap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_WordWrap(Microsoft.Office.Core.MsoTriState WordWrap)
        {
            _proxyTarget.WordWrap = WordWrap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoAutoSize get_AutoSize()
        {
            return _proxyTarget.AutoSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoSize(Microsoft.Office.Core.MsoAutoSize AutoSize)
        {
            _proxyTarget.AutoSize = AutoSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThreeDFormatProxy get_ThreeD()
        {
            return new ThreeDFormatProxy(_proxyTarget.ThreeD);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThemeColor which adds IDispose to the interface
    /// </summary>
    public class ThemeColorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThemeColor _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThemeColor which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThemeColorProxy(Microsoft.Office.Core.ThemeColor proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_RGB()
        {
            return _proxyTarget.RGB;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RGB(System.Int32 RGB)
        {
            _proxyTarget.RGB = RGB;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoThemeColorSchemeIndex get_ThemeColorSchemeIndex()
        {
            return _proxyTarget.ThemeColorSchemeIndex;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThemeColorScheme which adds IDispose to the interface
    /// </summary>
    public class ThemeColorSchemeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThemeColorScheme _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThemeColorScheme which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThemeColorSchemeProxy(Microsoft.Office.Core.ThemeColorScheme proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ThemeColorProxy Colors(Microsoft.Office.Core.MsoThemeColorSchemeIndex Index)
        {
            return new ThemeColorProxy(_proxyTarget.Colors(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Load(System.String FileName)
        {
            _proxyTarget.Load(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Save(System.String FileName)
        {
            _proxyTarget.Save(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 GetCustomColor(System.String Name)
        {
            return _proxyTarget.GetCustomColor(Name);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThemeFont which adds IDispose to the interface
    /// </summary>
    public class ThemeFontProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThemeFont _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThemeFont which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThemeFontProxy(Microsoft.Office.Core.ThemeFont proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String Val)
        {
            _proxyTarget.Name = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThemeFonts which adds IDispose to the interface
    /// </summary>
    public class ThemeFontsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThemeFonts _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThemeFonts which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThemeFontsProxy(Microsoft.Office.Core.ThemeFonts proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ThemeFontProxy Item(Microsoft.Office.Core.MsoFontLanguageIndex Index)
        {
            return new ThemeFontProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThemeFontScheme which adds IDispose to the interface
    /// </summary>
    public class ThemeFontSchemeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThemeFontScheme _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThemeFontScheme which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThemeFontSchemeProxy(Microsoft.Office.Core.ThemeFontScheme proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Load(System.String FileName)
        {
            _proxyTarget.Load(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Save(System.String FileName)
        {
            _proxyTarget.Save(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThemeFontsProxy get_MinorFont()
        {
            return new ThemeFontsProxy(_proxyTarget.MinorFont);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThemeFontsProxy get_MajorFont()
        {
            return new ThemeFontsProxy(_proxyTarget.MajorFont);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ThemeEffectScheme which adds IDispose to the interface
    /// </summary>
    public class ThemeEffectSchemeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ThemeEffectScheme _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ThemeEffectScheme which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ThemeEffectSchemeProxy(Microsoft.Office.Core.ThemeEffectScheme proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Load(System.String FileName)
        {
            _proxyTarget.Load(FileName);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for OfficeTheme which adds IDispose to the interface
    /// </summary>
    public class OfficeThemeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.OfficeTheme _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.OfficeTheme which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public OfficeThemeProxy(Microsoft.Office.Core.OfficeTheme proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThemeColorSchemeProxy get_ThemeColorScheme()
        {
            return new ThemeColorSchemeProxy(_proxyTarget.ThemeColorScheme);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThemeFontSchemeProxy get_ThemeFontScheme()
        {
            return new ThemeFontSchemeProxy(_proxyTarget.ThemeFontScheme);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThemeEffectSchemeProxy get_ThemeEffectScheme()
        {
            return new ThemeEffectSchemeProxy(_proxyTarget.ThemeEffectScheme);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomTaskPane which adds IDispose to the interface
    /// </summary>
    public class _CustomTaskPaneProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomTaskPane _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomTaskPane which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomTaskPaneProxy(Microsoft.Office.Core._CustomTaskPane proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Window()
        {
            return _proxyTarget.Window;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Boolean prop)
        {
            _proxyTarget.Visible = prop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ContentControl()
        {
            return _proxyTarget.ContentControl;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Int32 prop)
        {
            _proxyTarget.Height = prop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Int32 prop)
        {
            _proxyTarget.Width = prop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCTPDockPosition get_DockPosition()
        {
            return _proxyTarget.DockPosition;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DockPosition(Microsoft.Office.Core.MsoCTPDockPosition prop)
        {
            _proxyTarget.DockPosition = prop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoCTPDockPositionRestrict get_DockPositionRestrict()
        {
            return _proxyTarget.DockPositionRestrict;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DockPositionRestrict(Microsoft.Office.Core.MsoCTPDockPositionRestrict prop)
        {
            _proxyTarget.DockPositionRestrict = prop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomTaskPaneEvents which adds IDispose to the interface
    /// </summary>
    public class CustomTaskPaneEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomTaskPaneEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomTaskPaneEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomTaskPaneEventsProxy(Microsoft.Office.Core.CustomTaskPaneEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void VisibleStateChange(Microsoft.Office.Core.CustomTaskPane CustomTaskPaneInst)
        {
            _proxyTarget.VisibleStateChange(CustomTaskPaneInst);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void DockPositionStateChange(Microsoft.Office.Core.CustomTaskPane CustomTaskPaneInst)
        {
            _proxyTarget.DockPositionStateChange(CustomTaskPaneInst);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomTaskPaneEvents which adds IDispose to the interface
    /// </summary>
    public class _CustomTaskPaneEventsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomTaskPaneEvents _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomTaskPaneEvents which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomTaskPaneEventsProxy(Microsoft.Office.Core._CustomTaskPaneEvents proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void VisibleStateChange(Microsoft.Office.Core.CustomTaskPane CustomTaskPaneInst)
        {
            _proxyTarget.VisibleStateChange(CustomTaskPaneInst);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void DockPositionStateChange(Microsoft.Office.Core.CustomTaskPane CustomTaskPaneInst)
        {
            _proxyTarget.DockPositionStateChange(CustomTaskPaneInst);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for _CustomTaskPaneEvents_Event which adds IDispose to the interface
    /// </summary>
    public class _CustomTaskPaneEvents_EventProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core._CustomTaskPaneEvents_Event _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core._CustomTaskPaneEvents_Event which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public _CustomTaskPaneEvents_EventProxy(Microsoft.Office.Core._CustomTaskPaneEvents_Event proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomTaskPaneEvents_VisibleStateChangeEventHandler VisibleStateChange
        {
            add { _proxyTarget.VisibleStateChange += value; }
            remove { _proxyTarget.VisibleStateChange -= value; }
        }

		/// <summary>
		/// 
		/// </summary>
		public event Microsoft.Office.Core._CustomTaskPaneEvents_DockPositionStateChangeEventHandler DockPositionStateChange
        {
            add { _proxyTarget.DockPositionStateChange += value; }
            remove { _proxyTarget.DockPositionStateChange -= value; }
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for CustomTaskPane which adds IDispose to the interface
    /// </summary>
    public class CustomTaskPaneProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.CustomTaskPane _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.CustomTaskPane which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CustomTaskPaneProxy(Microsoft.Office.Core.CustomTaskPane proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICTPFactory which adds IDispose to the interface
    /// </summary>
    public class ICTPFactoryProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICTPFactory _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICTPFactory which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICTPFactoryProxy(Microsoft.Office.Core.ICTPFactory proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual CustomTaskPaneProxy CreateCTP(System.String CTPAxID, System.String CTPTitle, System.Object CTPParentWindow)
        {
            return new CustomTaskPaneProxy(_proxyTarget.CreateCTP(CTPAxID, CTPTitle, CTPParentWindow));
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ICustomTaskPaneConsumer which adds IDispose to the interface
    /// </summary>
    public class ICustomTaskPaneConsumerProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ICustomTaskPaneConsumer _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ICustomTaskPaneConsumer which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ICustomTaskPaneConsumerProxy(Microsoft.Office.Core.ICustomTaskPaneConsumer proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CTPFactoryAvailable(Microsoft.Office.Core.ICTPFactory CTPFactoryInst)
        {
            _proxyTarget.CTPFactoryAvailable(CTPFactoryInst);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IRibbonUI which adds IDispose to the interface
    /// </summary>
    public class IRibbonUIProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IRibbonUI _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IRibbonUI which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IRibbonUIProxy(Microsoft.Office.Core.IRibbonUI proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Invalidate()
        {
            _proxyTarget.Invalidate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InvalidateControl(System.String ControlID)
        {
            _proxyTarget.InvalidateControl(ControlID);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void InvalidateControlMso(System.String ControlID)
        {
            _proxyTarget.InvalidateControlMso(ControlID);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ActivateTab(System.String ControlID)
        {
            _proxyTarget.ActivateTab(ControlID);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ActivateTabMso(System.String ControlID)
        {
            _proxyTarget.ActivateTabMso(ControlID);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ActivateTabQ(System.String ControlID, System.String Namespace)
        {
            _proxyTarget.ActivateTabQ(ControlID, Namespace);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IRibbonControl which adds IDispose to the interface
    /// </summary>
    public class IRibbonControlProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IRibbonControl _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IRibbonControl which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IRibbonControlProxy(Microsoft.Office.Core.IRibbonControl proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Context()
        {
            return _proxyTarget.Context;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Tag()
        {
            return _proxyTarget.Tag;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IRibbonExtensibility which adds IDispose to the interface
    /// </summary>
    public class IRibbonExtensibilityProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IRibbonExtensibility _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IRibbonExtensibility which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IRibbonExtensibilityProxy(Microsoft.Office.Core.IRibbonExtensibility proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.String GetCustomUI(System.String RibbonID)
        {
            return _proxyTarget.GetCustomUI(RibbonID);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IAssistance which adds IDispose to the interface
    /// </summary>
    public class IAssistanceProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IAssistance _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IAssistance which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IAssistanceProxy(Microsoft.Office.Core.IAssistance proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowHelp(System.String HelpId, System.String Scope)
        {
            _proxyTarget.ShowHelp(HelpId, Scope);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SearchHelp(System.String Query, System.String Scope)
        {
            _proxyTarget.SearchHelp(Query, Scope);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetDefaultContext(System.String HelpId)
        {
            _proxyTarget.SetDefaultContext(HelpId);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ClearDefaultContext(System.String HelpId)
        {
            _proxyTarget.ClearDefaultContext(HelpId);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoChartData which adds IDispose to the interface
    /// </summary>
    public class IMsoChartDataProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoChartData _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoChartData which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoChartDataProxy(Microsoft.Office.Core.IMsoChartData proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Workbook()
        {
            return _proxyTarget.Workbook;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Activate()
        {
            _proxyTarget.Activate();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsLinked()
        {
            return _proxyTarget.IsLinked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void BreakLink()
        {
            _proxyTarget.BreakLink();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoChart which adds IDispose to the interface
    /// </summary>
    public class IMsoChartProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoChart _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoChart which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoChartProxy(Microsoft.Office.Core.IMsoChart proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Copy()
        {
            return _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select(System.Object Replace)
        {
            return _proxyTarget.Select(Replace);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowReportFilterFieldButtons()
        {
            return _proxyTarget.ShowReportFilterFieldButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowReportFilterFieldButtons(System.Boolean res)
        {
            _proxyTarget.ShowReportFilterFieldButtons = res;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowLegendFieldButtons()
        {
            return _proxyTarget.ShowLegendFieldButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowLegendFieldButtons(System.Boolean res)
        {
            _proxyTarget.ShowLegendFieldButtons = res;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowAxisFieldButtons()
        {
            return _proxyTarget.ShowAxisFieldButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowAxisFieldButtons(System.Boolean res)
        {
            _proxyTarget.ShowAxisFieldButtons = res;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowValueFieldButtons()
        {
            return _proxyTarget.ShowValueFieldButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowValueFieldButtons(System.Boolean res)
        {
            _proxyTarget.ShowValueFieldButtons = res;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowAllFieldButtons()
        {
            return _proxyTarget.ShowAllFieldButtons;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowAllFieldButtons(System.Boolean res)
        {
            _proxyTarget.ShowAllFieldButtons = res;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasPivotFields()
        {
            return _proxyTarget.HasPivotFields;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasPivotFields(System.Boolean RHS)
        {
            _proxyTarget.HasPivotFields = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RefreshPivotTable()
        {
            _proxyTarget.RefreshPivotTable();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowDataLabelsOverMaximum(System.Boolean pRHS)
        {
            _proxyTarget.ShowDataLabelsOverMaximum = pRHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowDataLabelsOverMaximum()
        {
            return _proxyTarget.ShowDataLabelsOverMaximum;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyLayout(System.Int32 Layout, System.Object varChartType)
        {
            _proxyTarget.ApplyLayout(Layout, varChartType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Selection()
        {
            return _proxyTarget.Selection;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Refresh()
        {
            _proxyTarget.Refresh();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetElement(Microsoft.Office.Core.MsoChartElementType RHS)
        {
            _proxyTarget.SetElement(RHS);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartDataProxy get_ChartData()
        {
            return new IMsoChartDataProxy(_proxyTarget.ChartData);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapesProxy get_Shapes()
        {
            return new ShapesProxy(_proxyTarget.Shapes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartGroupProxy get_Area3DGroup()
        {
            return new IMsoChartGroupProxy(_proxyTarget.Area3DGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object AreaGroups(System.Object Index)
        {
            return _proxyTarget.AreaGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartGroupProxy get_Bar3DGroup()
        {
            return new IMsoChartGroupProxy(_proxyTarget.Bar3DGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object BarGroups(System.Object Index)
        {
            return _proxyTarget.BarGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartGroupProxy get_Column3DGroup()
        {
            return new IMsoChartGroupProxy(_proxyTarget.Column3DGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ColumnGroups(System.Object Index)
        {
            return _proxyTarget.ColumnGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartGroupProxy get_Line3DGroup()
        {
            return new IMsoChartGroupProxy(_proxyTarget.Line3DGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object LineGroups(System.Object Index)
        {
            return _proxyTarget.LineGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartGroupProxy get_Pie3DGroup()
        {
            return new IMsoChartGroupProxy(_proxyTarget.Pie3DGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object PieGroups(System.Object Index)
        {
            return _proxyTarget.PieGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object DoughnutGroups(System.Object Index)
        {
            return _proxyTarget.DoughnutGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object RadarGroups(System.Object Index)
        {
            return _proxyTarget.RadarGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartGroupProxy get_SurfaceGroup()
        {
            return new IMsoChartGroupProxy(_proxyTarget.SurfaceGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object XYGroups(System.Object Index)
        {
            return _proxyTarget.XYGroups(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoWallsProxy get_Walls(System.Boolean fBackWall)
        {
            return new IMsoWallsProxy(_proxyTarget.Walls[fBackWall]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoFloorProxy get_Floor()
        {
            return new IMsoFloorProxy(_proxyTarget.Floor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoPlotAreaProxy get_PlotArea()
        {
            return new IMsoPlotAreaProxy(_proxyTarget.PlotArea);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_PlotVisibleOnly()
        {
            return _proxyTarget.PlotVisibleOnly;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PlotVisibleOnly(System.Boolean RHS)
        {
            _proxyTarget.PlotVisibleOnly = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartAreaProxy get_ChartArea()
        {
            return new IMsoChartAreaProxy(_proxyTarget.ChartArea);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void AutoFormat(System.Int32 rGallery, System.Object varFormat)
        {
            _proxyTarget.AutoFormat(rGallery, varFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AutoScaling()
        {
            return _proxyTarget.AutoScaling;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaling(System.Boolean f)
        {
            _proxyTarget.AutoScaling = f;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetBackgroundPicture(System.String bstr)
        {
            _proxyTarget.SetBackgroundPicture(bstr);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ChartWizard(System.Object varSource, System.Object varGallery, System.Object varFormat, System.Object varPlotBy, System.Object varCategoryLabels, System.Object varSeriesLabels, System.Object varHasLegend, System.Object varTitle, System.Object varCategoryTitle, System.Object varValueTitle, System.Object varExtraTitle)
        {
            _proxyTarget.ChartWizard(varSource, varGallery, varFormat, varPlotBy, varCategoryLabels, varSeriesLabels, varHasLegend, varTitle, varCategoryTitle, varValueTitle, varExtraTitle);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CopyPicture(System.Int32 Appearance, System.Int32 Format, System.Int32 Size)
        {
            _proxyTarget.CopyPicture(Appearance, Format, Size);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDataTableProxy get_DataTable()
        {
            return new IMsoDataTableProxy(_proxyTarget.DataTable);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Evaluate(System.Object varName, System.Int32 LocaleID, out System.Int32 ObjType)
        {
            return _proxyTarget.Evaluate(varName, LocaleID, out ObjType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object _Evaluate(System.Object varName, System.Int32 LocaleID)
        {
            return _proxyTarget._Evaluate(varName, LocaleID);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Paste(System.Object varType)
        {
            _proxyTarget.Paste(varType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlBarShape get_BarShape()
        {
            return _proxyTarget.BarShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BarShape(Microsoft.Office.Core.XlBarShape pShape)
        {
            _proxyTarget.BarShape = pShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Boolean Export(System.String bstr, System.Object varFilterName, System.Object varInteractive)
        {
            return _proxyTarget.Export(bstr, varFilterName, varInteractive);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetDefaultChart(System.Object varName)
        {
            _proxyTarget.SetDefaultChart(varName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyChartTemplate(System.String bstrFileName)
        {
            _proxyTarget.ApplyChartTemplate(bstrFileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SaveChartTemplate(System.String bstrFileName)
        {
            _proxyTarget.SaveChartTemplate(bstrFileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoWallsProxy get_SideWall()
        {
            return new IMsoWallsProxy(_proxyTarget.SideWall);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoWallsProxy get_BackWall()
        {
            return new IMsoWallsProxy(_proxyTarget.BackWall);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ChartStyle()
        {
            return _proxyTarget.ChartStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ChartStyle(System.Object RHS)
        {
            _proxyTarget.ChartStyle = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ClearToMatchStyle()
        {
            _proxyTarget.ClearToMatchStyle();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_PivotLayout()
        {
            return _proxyTarget.PivotLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProtectChartObjects(System.Boolean pres)
        {
            _proxyTarget.ProtectChartObjects = pres;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ProtectChartObjects()
        {
            return _proxyTarget.ProtectChartObjects;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void UnProtect(System.Object Password)
        {
            _proxyTarget.UnProtect(Password);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Protect(System.Object Password, System.Object DrawingObjects, System.Object Contents, System.Object Scenarios, System.Object UserInterfaceOnly)
        {
            _proxyTarget.Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ChartGroups(ref System.Object pvarIndex, System.Object varIgallery)
        {
            return _proxyTarget.ChartGroups[ref pvarIndex, varIgallery];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object SeriesCollection(System.Object Index)
        {
            return _proxyTarget.SeriesCollection(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void _ApplyDataLabels(Microsoft.Office.Core.XlDataLabelsType Type, System.Object IMsoLegendKey, System.Object AutoText, System.Object HasLeaderLines)
        {
            _proxyTarget._ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SubType()
        {
            return _proxyTarget.SubType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SubType(System.Int32 RHS)
        {
            _proxyTarget.SubType = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(System.Int32 RHS)
        {
            _proxyTarget.Type = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoCornersProxy get_Corners()
        {
            return new IMsoCornersProxy(_proxyTarget.Corners);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyDataLabels(Microsoft.Office.Core.XlDataLabelsType Type, System.Object IMsoLegendKey, System.Object AutoText, System.Object HasLeaderLines, System.Object ShowSeriesName, System.Object ShowCategoryName, System.Object ShowValue, System.Object ShowPercentage, System.Object ShowBubbleSize, System.Object Separator)
        {
            _proxyTarget.ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartType get_ChartType()
        {
            return _proxyTarget.ChartType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ChartType(Microsoft.Office.Core.XlChartType RHS)
        {
            _proxyTarget.ChartType = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasDataTable()
        {
            return _proxyTarget.HasDataTable;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasDataTable(System.Boolean RHS)
        {
            _proxyTarget.HasDataTable = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyCustomType(Microsoft.Office.Core.XlChartType ChartType, System.Object TypeName)
        {
            _proxyTarget.ApplyCustomType(ChartType, TypeName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void GetChartElement(System.Int32 x, System.Int32 y, ref System.Int32 ElementID, ref System.Int32 Arg1, ref System.Int32 Arg2)
        {
            _proxyTarget.GetChartElement(x, y, ref ElementID, ref Arg1, ref Arg2);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetSourceData(System.String Source, System.Object PlotBy)
        {
            _proxyTarget.SetSourceData(Source, PlotBy);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlRowCol get_PlotBy()
        {
            return _proxyTarget.PlotBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PlotBy(Microsoft.Office.Core.XlRowCol PlotBy)
        {
            _proxyTarget.PlotBy = PlotBy;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasLegend()
        {
            return _proxyTarget.HasLegend;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasLegend(System.Boolean RHS)
        {
            _proxyTarget.HasLegend = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoLegendProxy get_Legend()
        {
            return new IMsoLegendProxy(_proxyTarget.Legend);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Axes(System.Object Type, Microsoft.Office.Core.XlAxisGroup AxisGroup)
        {
            return _proxyTarget.Axes(Type, AxisGroup);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasAxis(System.Object axisType, System.Object AxisGroup, System.Object pval)
        {
            _proxyTarget.set_HasAxis(axisType, AxisGroup, pval);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_HasAxis(System.Object axisType, System.Object AxisGroup)
        {
            return _proxyTarget.HasAxis[axisType, AxisGroup];
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasTitle(System.Boolean fTitle)
        {
            _proxyTarget.HasTitle = fTitle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasTitle()
        {
            return _proxyTarget.HasTitle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartTitleProxy get_ChartTitle()
        {
            return new IMsoChartTitleProxy(_proxyTarget.ChartTitle);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_DepthPercent()
        {
            return _proxyTarget.DepthPercent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DepthPercent(System.Int32 pwDepthPercent)
        {
            _proxyTarget.DepthPercent = pwDepthPercent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Elevation()
        {
            return _proxyTarget.Elevation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Elevation(System.Int32 pwElevation)
        {
            _proxyTarget.Elevation = pwElevation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_GapDepth()
        {
            return _proxyTarget.GapDepth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_GapDepth(System.Int32 pwGapDepth)
        {
            _proxyTarget.GapDepth = pwGapDepth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_HeightPercent()
        {
            return _proxyTarget.HeightPercent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HeightPercent(System.Int32 pwHeightPercent)
        {
            _proxyTarget.HeightPercent = pwHeightPercent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Perspective()
        {
            return _proxyTarget.Perspective;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Perspective(System.Int32 pwPerspective)
        {
            _proxyTarget.Perspective = pwPerspective;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_RightAngleAxes()
        {
            return _proxyTarget.RightAngleAxes;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RightAngleAxes(System.Object pvarRightAngleAxes)
        {
            _proxyTarget.RightAngleAxes = pvarRightAngleAxes;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Rotation()
        {
            return _proxyTarget.Rotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Rotation(System.Object pvarRotation)
        {
            _proxyTarget.Rotation = pvarRotation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayBlanksAs(Microsoft.Office.Core.XlDisplayBlanksAs pres)
        {
            _proxyTarget.DisplayBlanksAs = pres;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlDisplayBlanksAs get_DisplayBlanksAs()
        {
            return _proxyTarget.DisplayBlanksAs;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProtectData(System.Boolean pres)
        {
            _proxyTarget.ProtectData = pres;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ProtectData()
        {
            return _proxyTarget.ProtectData;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProtectFormatting(System.Boolean pres)
        {
            _proxyTarget.ProtectFormatting = pres;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ProtectFormatting()
        {
            return _proxyTarget.ProtectFormatting;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProtectGoalSeek(System.Boolean pres)
        {
            _proxyTarget.ProtectGoalSeek = pres;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ProtectGoalSeek()
        {
            return _proxyTarget.ProtectGoalSeek;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ProtectSelection(System.Boolean pres)
        {
            _proxyTarget.ProtectSelection = pres;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ProtectSelection()
        {
            return _proxyTarget.ProtectSelection;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoCorners which adds IDispose to the interface
    /// </summary>
    public class IMsoCornersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoCorners _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoCorners which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoCornersProxy(Microsoft.Office.Core.IMsoCorners proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoLegend which adds IDispose to the interface
    /// </summary>
    public class IMsoLegendProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoLegend _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoLegend which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoLegendProxy(Microsoft.Office.Core.IMsoLegend proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object LegendEntries(System.Object Index)
        {
            return _proxyTarget.LegendEntries(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlLegendPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlLegendPosition RHS)
        {
            _proxyTarget.Position = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean RHS)
        {
            _proxyTarget.Shadow = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Clear()
        {
            return _proxyTarget.Clear();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Double RHS)
        {
            _proxyTarget.Height = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double RHS)
        {
            _proxyTarget.Left = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double RHS)
        {
            _proxyTarget.Top = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Double RHS)
        {
            _proxyTarget.Width = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object RHS)
        {
            _proxyTarget.AutoScaleFont = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IncludeInLayout()
        {
            return _proxyTarget.IncludeInLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_IncludeInLayout(System.Boolean RHS)
        {
            _proxyTarget.IncludeInLayout = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoBorder which adds IDispose to the interface
    /// </summary>
    public class IMsoBorderProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoBorder _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoBorder which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoBorderProxy(Microsoft.Office.Core.IMsoBorder proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Color(System.Object pval)
        {
            _proxyTarget.Color = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Color()
        {
            return _proxyTarget.Color;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ColorIndex(System.Object pval)
        {
            _proxyTarget.ColorIndex = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ColorIndex()
        {
            return _proxyTarget.ColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LineStyle(System.Object pval)
        {
            _proxyTarget.LineStyle = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_LineStyle()
        {
            return _proxyTarget.LineStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Weight(System.Object pval)
        {
            _proxyTarget.Weight = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Weight()
        {
            return _proxyTarget.Weight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoWalls which adds IDispose to the interface
    /// </summary>
    public class IMsoWallsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoWalls _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoWalls which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoWallsProxy(Microsoft.Office.Core.IMsoWalls proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_PictureType()
        {
            return _proxyTarget.PictureType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureType(System.Object pvar)
        {
            _proxyTarget.PictureType = pvar;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Paste()
        {
            _proxyTarget.Paste();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_PictureUnit()
        {
            return _proxyTarget.PictureUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit(System.Object pvar)
        {
            _proxyTarget.PictureUnit = pvar;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Thickness()
        {
            return _proxyTarget.Thickness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Thickness(System.Int32 RHS)
        {
            _proxyTarget.Thickness = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoFloor which adds IDispose to the interface
    /// </summary>
    public class IMsoFloorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoFloor _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoFloor which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoFloorProxy(Microsoft.Office.Core.IMsoFloor proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_PictureType()
        {
            return _proxyTarget.PictureType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureType(System.Object pvar)
        {
            _proxyTarget.PictureType = pvar;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Paste()
        {
            _proxyTarget.Paste();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Thickness()
        {
            return _proxyTarget.Thickness;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Thickness(System.Int32 RHS)
        {
            _proxyTarget.Thickness = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoPlotArea which adds IDispose to the interface
    /// </summary>
    public class IMsoPlotAreaProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoPlotArea _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoPlotArea which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoPlotAreaProxy(Microsoft.Office.Core.IMsoPlotArea proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Double pd)
        {
            _proxyTarget.Height = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double pd)
        {
            _proxyTarget.Left = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double pd)
        {
            _proxyTarget.Top = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Double pd)
        {
            _proxyTarget.Width = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_InsideLeft()
        {
            return _proxyTarget.InsideLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InsideLeft(System.Double pd)
        {
            _proxyTarget.InsideLeft = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_InsideTop()
        {
            return _proxyTarget.InsideTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InsideTop(System.Double pd)
        {
            _proxyTarget.InsideTop = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_InsideWidth()
        {
            return _proxyTarget.InsideWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InsideWidth(System.Double pd)
        {
            _proxyTarget.InsideWidth = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_InsideHeight()
        {
            return _proxyTarget.InsideHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InsideHeight(System.Double pd)
        {
            _proxyTarget.InsideHeight = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartElementPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlChartElementPosition pval)
        {
            _proxyTarget.Position = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoChartArea which adds IDispose to the interface
    /// </summary>
    public class IMsoChartAreaProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoChartArea _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoChartArea which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoChartAreaProxy(Microsoft.Office.Core.IMsoChartArea proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Clear()
        {
            return _proxyTarget.Clear();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearContents()
        {
            return _proxyTarget.ClearContents();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Copy()
        {
            return _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean pf)
        {
            _proxyTarget.Shadow = pf;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Height(System.Double pd)
        {
            _proxyTarget.Height = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double pd)
        {
            _proxyTarget.Left = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double pd)
        {
            _proxyTarget.Top = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Width(System.Double pd)
        {
            _proxyTarget.Width = pd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object pvar)
        {
            _proxyTarget.AutoScaleFont = pvar;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_RoundedCorners()
        {
            return _proxyTarget.RoundedCorners;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RoundedCorners(System.Boolean pval)
        {
            _proxyTarget.RoundedCorners = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoSeriesLines which adds IDispose to the interface
    /// </summary>
    public class IMsoSeriesLinesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoSeriesLines _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoSeriesLines which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoSeriesLinesProxy(Microsoft.Office.Core.IMsoSeriesLines proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoLeaderLines which adds IDispose to the interface
    /// </summary>
    public class IMsoLeaderLinesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoLeaderLines _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoLeaderLines which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoLeaderLinesProxy(Microsoft.Office.Core.IMsoLeaderLines proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select()
        {
            _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for GridLines which adds IDispose to the interface
    /// </summary>
    public class GridLinesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.GridLines _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.GridLines which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public GridLinesProxy(Microsoft.Office.Core.GridLines proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoUpBars which adds IDispose to the interface
    /// </summary>
    public class IMsoUpBarsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoUpBars _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoUpBars which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoUpBarsProxy(Microsoft.Office.Core.IMsoUpBars proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDownBars which adds IDispose to the interface
    /// </summary>
    public class IMsoDownBarsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDownBars _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDownBars which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDownBarsProxy(Microsoft.Office.Core.IMsoDownBars proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoInterior which adds IDispose to the interface
    /// </summary>
    public class IMsoInteriorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoInterior _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoInterior which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoInteriorProxy(Microsoft.Office.Core.IMsoInterior proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Color(System.Object pval)
        {
            _proxyTarget.Color = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Color()
        {
            return _proxyTarget.Color;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ColorIndex(System.Object pval)
        {
            _proxyTarget.ColorIndex = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ColorIndex()
        {
            return _proxyTarget.ColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InvertIfNegative(System.Object pval)
        {
            _proxyTarget.InvertIfNegative = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_InvertIfNegative()
        {
            return _proxyTarget.InvertIfNegative;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Pattern(System.Object pval)
        {
            _proxyTarget.Pattern = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Pattern()
        {
            return _proxyTarget.Pattern;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PatternColor(System.Object pval)
        {
            _proxyTarget.PatternColor = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_PatternColor()
        {
            return _proxyTarget.PatternColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PatternColorIndex(System.Object pval)
        {
            _proxyTarget.PatternColorIndex = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_PatternColorIndex()
        {
            return _proxyTarget.PatternColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ChartFillFormat which adds IDispose to the interface
    /// </summary>
    public class ChartFillFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ChartFillFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ChartFillFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ChartFillFormatProxy(Microsoft.Office.Core.ChartFillFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void OneColorGradient(System.Int32 Style, System.Int32 Variant, System.Single Degree)
        {
            _proxyTarget.OneColorGradient(Style, Variant, Degree);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void TwoColorGradient(System.Int32 Style, System.Int32 Variant)
        {
            _proxyTarget.TwoColorGradient(Style, Variant);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PresetTextured(System.Int32 PresetTexture)
        {
            _proxyTarget.PresetTextured(PresetTexture);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Solid()
        {
            _proxyTarget.Solid();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Patterned(System.Int32 Pattern)
        {
            _proxyTarget.Patterned(Pattern);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void UserPicture(System.Object PictureFile, System.Object PictureFormat, System.Object PictureStackUnit, System.Object PicturePlacement)
        {
            _proxyTarget.UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void UserTextured(System.String TextureFile)
        {
            _proxyTarget.UserTextured(TextureFile);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PresetGradient(System.Int32 Style, System.Int32 Variant, System.Int32 PresetGradientType)
        {
            _proxyTarget.PresetGradient(Style, Variant, PresetGradientType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartColorFormatProxy get_BackColor()
        {
            return new ChartColorFormatProxy(_proxyTarget.BackColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartColorFormatProxy get_ForeColor()
        {
            return new ChartColorFormatProxy(_proxyTarget.ForeColor);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_GradientColorType()
        {
            return _proxyTarget.GradientColorType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_GradientDegree()
        {
            return _proxyTarget.GradientDegree;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_GradientStyle()
        {
            return _proxyTarget.GradientStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_GradientVariant()
        {
            return _proxyTarget.GradientVariant;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Pattern()
        {
            return _proxyTarget.Pattern;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_PresetGradientType()
        {
            return _proxyTarget.PresetGradientType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_PresetTexture()
        {
            return _proxyTarget.PresetTexture;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_TextureName()
        {
            return _proxyTarget.TextureName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_TextureType()
        {
            return _proxyTarget.TextureType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(System.Int32 pval)
        {
            _proxyTarget.Visible = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for LegendEntries which adds IDispose to the interface
    /// </summary>
    public class LegendEntriesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.LegendEntries _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.LegendEntries which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public LegendEntriesProxy(Microsoft.Office.Core.LegendEntries proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual LegendEntryProxy Item(System.Object Index)
        {
            return new LegendEntryProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ChartFont which adds IDispose to the interface
    /// </summary>
    public class ChartFontProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ChartFont _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ChartFont which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ChartFontProxy(Microsoft.Office.Core.ChartFont proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Background(System.Object pval)
        {
            _proxyTarget.Background = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Background()
        {
            return _proxyTarget.Background;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Bold(System.Object pval)
        {
            _proxyTarget.Bold = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Bold()
        {
            return _proxyTarget.Bold;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Color(System.Object pval)
        {
            _proxyTarget.Color = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Color()
        {
            return _proxyTarget.Color;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ColorIndex(System.Object pval)
        {
            _proxyTarget.ColorIndex = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ColorIndex()
        {
            return _proxyTarget.ColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FontStyle(System.Object pval)
        {
            _proxyTarget.FontStyle = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_FontStyle()
        {
            return _proxyTarget.FontStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Italic(System.Object pval)
        {
            _proxyTarget.Italic = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Italic()
        {
            return _proxyTarget.Italic;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.Object pval)
        {
            _proxyTarget.Name = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OutlineFont(System.Object pval)
        {
            _proxyTarget.OutlineFont = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_OutlineFont()
        {
            return _proxyTarget.OutlineFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Object pval)
        {
            _proxyTarget.Shadow = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Size(System.Object pval)
        {
            _proxyTarget.Size = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Size()
        {
            return _proxyTarget.Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_StrikeThrough(System.Object pval)
        {
            _proxyTarget.StrikeThrough = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_StrikeThrough()
        {
            return _proxyTarget.StrikeThrough;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Subscript(System.Object pval)
        {
            _proxyTarget.Subscript = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Subscript()
        {
            return _proxyTarget.Subscript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Superscript(System.Object pval)
        {
            _proxyTarget.Superscript = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Superscript()
        {
            return _proxyTarget.Superscript;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Underline(System.Object pval)
        {
            _proxyTarget.Underline = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Underline()
        {
            return _proxyTarget.Underline;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ChartColorFormat which adds IDispose to the interface
    /// </summary>
    public class ChartColorFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ChartColorFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ChartColorFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ChartColorFormatProxy(Microsoft.Office.Core.ChartColorFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SchemeColor()
        {
            return _proxyTarget.SchemeColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SchemeColor(System.Int32 RHS)
        {
            _proxyTarget.SchemeColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_RGB()
        {
            return _proxyTarget.RGB;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RGB(System.Int32 RHS)
        {
            _proxyTarget.RGB = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for LegendEntry which adds IDispose to the interface
    /// </summary>
    public class LegendEntryProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.LegendEntry _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.LegendEntry which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public LegendEntryProxy(Microsoft.Office.Core.LegendEntry proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoLegendKeyProxy get_LegendKey()
        {
            return new IMsoLegendKeyProxy(_proxyTarget.LegendKey);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object RHS)
        {
            _proxyTarget.AutoScaleFont = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoLegendKey which adds IDispose to the interface
    /// </summary>
    public class IMsoLegendKeyProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoLegendKey _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoLegendKey which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoLegendKeyProxy(Microsoft.Office.Core.IMsoLegendKey proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean RHS)
        {
            _proxyTarget.Shadow = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_PictureUnit2()
        {
            return _proxyTarget.PictureUnit2;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit2(System.Double RHS)
        {
            _proxyTarget.PictureUnit2 = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_InvertIfNegative()
        {
            return _proxyTarget.InvertIfNegative;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InvertIfNegative(System.Boolean RHS)
        {
            _proxyTarget.InvertIfNegative = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerBackgroundColor()
        {
            return _proxyTarget.MarkerBackgroundColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerBackgroundColor(System.Int32 RHS)
        {
            _proxyTarget.MarkerBackgroundColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_MarkerBackgroundColorIndex()
        {
            return _proxyTarget.MarkerBackgroundColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerBackgroundColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.MarkerBackgroundColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerForegroundColor()
        {
            return _proxyTarget.MarkerForegroundColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerForegroundColor(System.Int32 RHS)
        {
            _proxyTarget.MarkerForegroundColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_MarkerForegroundColorIndex()
        {
            return _proxyTarget.MarkerForegroundColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerForegroundColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.MarkerForegroundColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerSize()
        {
            return _proxyTarget.MarkerSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerSize(System.Int32 RHS)
        {
            _proxyTarget.MarkerSize = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlMarkerStyle get_MarkerStyle()
        {
            return _proxyTarget.MarkerStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerStyle(Microsoft.Office.Core.XlMarkerStyle RHS)
        {
            _proxyTarget.MarkerStyle = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_PictureType()
        {
            return _proxyTarget.PictureType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureType(System.Int32 RHS)
        {
            _proxyTarget.PictureType = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_PictureUnit()
        {
            return _proxyTarget.PictureUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit(System.Double RHS)
        {
            _proxyTarget.PictureUnit = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Smooth()
        {
            return _proxyTarget.Smooth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Smooth(System.Boolean RHS)
        {
            _proxyTarget.Smooth = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SeriesCollection which adds IDispose to the interface
    /// </summary>
    public class SeriesCollectionProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SeriesCollection _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SeriesCollection which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SeriesCollectionProxy(Microsoft.Office.Core.SeriesCollection proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoSeriesProxy Add(System.Object Source, Microsoft.Office.Core.XlRowCol Rowcol, System.Object SeriesLabels, System.Object CategoryLabels, System.Object Replace)
        {
            return new IMsoSeriesProxy(_proxyTarget.Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Extend(System.Object Source, System.Object Rowcol, System.Object CategoryLabels)
        {
            return _proxyTarget.Extend(Source, Rowcol, CategoryLabels);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoSeriesProxy Item(System.Object Index)
        {
            return new IMsoSeriesProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Paste(Microsoft.Office.Core.XlRowCol Rowcol, System.Object SeriesLabels, System.Object CategoryLabels, System.Object Replace, System.Object NewSeries)
        {
            return _proxyTarget.Paste(Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoSeriesProxy NewSeries()
        {
            return new IMsoSeriesProxy(_proxyTarget.NewSeries());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoSeries which adds IDispose to the interface
    /// </summary>
    public class IMsoSeriesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoSeries _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoSeries which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoSeriesProxy(Microsoft.Office.Core.IMsoSeries proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_PictureUnit2()
        {
            return _proxyTarget.PictureUnit2;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit2(System.Double RHS)
        {
            _proxyTarget.PictureUnit2 = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_PlotColorIndex()
        {
            return _proxyTarget.PlotColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_InvertColor()
        {
            return _proxyTarget.InvertColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InvertColor(System.Int32 RHS)
        {
            _proxyTarget.InvertColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_InvertColorIndex()
        {
            return _proxyTarget.InvertColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InvertColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.InvertColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(System.Int32 RHS)
        {
            _proxyTarget.Type = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartType get_ChartType()
        {
            return _proxyTarget.ChartType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ChartType(Microsoft.Office.Core.XlChartType RHS)
        {
            _proxyTarget.ChartType = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ApplyCustomType(Microsoft.Office.Core.XlChartType ChartType)
        {
            _proxyTarget.ApplyCustomType(ChartType);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Values()
        {
            return _proxyTarget.Values;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Values(System.Object RHS)
        {
            _proxyTarget.Values = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_XValues()
        {
            return _proxyTarget.XValues;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_XValues(System.Object RHS)
        {
            _proxyTarget.XValues = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_BubbleSizes()
        {
            return _proxyTarget.BubbleSizes;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BubbleSizes(System.Object RHS)
        {
            _proxyTarget.BubbleSizes = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlBarShape get_BarShape()
        {
            return _proxyTarget.BarShape;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BarShape(Microsoft.Office.Core.XlBarShape RHS)
        {
            _proxyTarget.BarShape = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ApplyPictToSides()
        {
            return _proxyTarget.ApplyPictToSides;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ApplyPictToSides(System.Boolean RHS)
        {
            _proxyTarget.ApplyPictToSides = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ApplyPictToFront()
        {
            return _proxyTarget.ApplyPictToFront;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ApplyPictToFront(System.Boolean RHS)
        {
            _proxyTarget.ApplyPictToFront = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ApplyPictToEnd()
        {
            return _proxyTarget.ApplyPictToEnd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ApplyPictToEnd(System.Boolean RHS)
        {
            _proxyTarget.ApplyPictToEnd = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Has3DEffect()
        {
            return _proxyTarget.Has3DEffect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Has3DEffect(System.Boolean RHS)
        {
            _proxyTarget.Has3DEffect = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean RHS)
        {
            _proxyTarget.Shadow = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasLeaderLines()
        {
            return _proxyTarget.HasLeaderLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasLeaderLines(System.Boolean RHS)
        {
            _proxyTarget.HasLeaderLines = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoLeaderLinesProxy get_LeaderLines()
        {
            return new IMsoLeaderLinesProxy(_proxyTarget.LeaderLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ApplyDataLabels(Microsoft.Office.Core.XlDataLabelsType Type, System.Object IMsoLegendKey, System.Object AutoText, System.Object HasLeaderLines, System.Object ShowSeriesName, System.Object ShowCategoryName, System.Object ShowValue, System.Object ShowPercentage, System.Object ShowBubbleSize, System.Object Separator)
        {
            return _proxyTarget.ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InvertIfNegative(System.Boolean RHS)
        {
            _proxyTarget.InvertIfNegative = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerBackgroundColor()
        {
            return _proxyTarget.MarkerBackgroundColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerBackgroundColor(System.Int32 RHS)
        {
            _proxyTarget.MarkerBackgroundColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_MarkerBackgroundColorIndex()
        {
            return _proxyTarget.MarkerBackgroundColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerBackgroundColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.MarkerBackgroundColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerForegroundColor()
        {
            return _proxyTarget.MarkerForegroundColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerForegroundColor(System.Int32 RHS)
        {
            _proxyTarget.MarkerForegroundColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_MarkerForegroundColorIndex()
        {
            return _proxyTarget.MarkerForegroundColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerForegroundColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.MarkerForegroundColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerSize()
        {
            return _proxyTarget.MarkerSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerSize(System.Int32 RHS)
        {
            _proxyTarget.MarkerSize = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlMarkerStyle get_MarkerStyle()
        {
            return _proxyTarget.MarkerStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerStyle(Microsoft.Office.Core.XlMarkerStyle RHS)
        {
            _proxyTarget.MarkerStyle = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String RHS)
        {
            _proxyTarget.Name = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Paste()
        {
            return _proxyTarget.Paste();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartPictureType get_PictureType()
        {
            return _proxyTarget.PictureType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureType(Microsoft.Office.Core.XlChartPictureType RHS)
        {
            _proxyTarget.PictureType = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_PictureUnit()
        {
            return _proxyTarget.PictureUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit(System.Double RHS)
        {
            _proxyTarget.PictureUnit = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_PlotOrder()
        {
            return _proxyTarget.PlotOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PlotOrder(System.Int32 RHS)
        {
            _proxyTarget.PlotOrder = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Points(System.Object Index)
        {
            return _proxyTarget.Points(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Smooth()
        {
            return _proxyTarget.Smooth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Smooth(System.Boolean RHS)
        {
            _proxyTarget.Smooth = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Trendlines(System.Object Index)
        {
            return _proxyTarget.Trendlines(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object _ApplyDataLabels(Microsoft.Office.Core.XlDataLabelsType Type, System.Object IMsoLegendKey, System.Object AutoText, System.Object HasLeaderLines)
        {
            return _proxyTarget._ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlAxisGroup get_AxisGroup()
        {
            return _proxyTarget.AxisGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AxisGroup(Microsoft.Office.Core.XlAxisGroup RHS)
        {
            _proxyTarget.AxisGroup = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Copy()
        {
            return _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object DataLabels(System.Object Index)
        {
            return _proxyTarget.DataLabels(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ErrorBar(Microsoft.Office.Core.XlErrorBarDirection Direction, Microsoft.Office.Core.XlErrorBarInclude Include, Microsoft.Office.Core.XlErrorBarType Type, System.Object Amount, System.Object MinusValues)
        {
            return _proxyTarget.ErrorBar(Direction, Include, Type, Amount, MinusValues);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoErrorBarsProxy get_ErrorBars()
        {
            return new IMsoErrorBarsProxy(_proxyTarget.ErrorBars);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Explosion()
        {
            return _proxyTarget.Explosion;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Explosion(System.Int32 RHS)
        {
            _proxyTarget.Explosion = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Formula()
        {
            return _proxyTarget.Formula;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Formula(System.String RHS)
        {
            _proxyTarget.Formula = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaLocal()
        {
            return _proxyTarget.FormulaLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaLocal(System.String RHS)
        {
            _proxyTarget.FormulaLocal = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1()
        {
            return _proxyTarget.FormulaR1C1;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1(System.String RHS)
        {
            _proxyTarget.FormulaR1C1 = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1Local()
        {
            return _proxyTarget.FormulaR1C1Local;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1Local(System.String RHS)
        {
            _proxyTarget.FormulaR1C1Local = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasDataLabels()
        {
            return _proxyTarget.HasDataLabels;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasDataLabels(System.Boolean RHS)
        {
            _proxyTarget.HasDataLabels = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasErrorBars()
        {
            return _proxyTarget.HasErrorBars;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasErrorBars(System.Boolean RHS)
        {
            _proxyTarget.HasErrorBars = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_InvertIfNegative()
        {
            return _proxyTarget.InvertIfNegative;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoErrorBars which adds IDispose to the interface
    /// </summary>
    public class IMsoErrorBarsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoErrorBars _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoErrorBars which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoErrorBarsProxy(Microsoft.Office.Core.IMsoErrorBars proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlEndStyleCap get_EndStyle()
        {
            return _proxyTarget.EndStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_EndStyle(Microsoft.Office.Core.XlEndStyleCap RHS)
        {
            _proxyTarget.EndStyle = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoTrendline which adds IDispose to the interface
    /// </summary>
    public class IMsoTrendlineProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoTrendline _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoTrendline which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoTrendlineProxy(Microsoft.Office.Core.IMsoTrendline proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.XlTrendlineType RHS)
        {
            _proxyTarget.Type = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Backward2()
        {
            return _proxyTarget.Backward2;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Backward2(System.Double RHS)
        {
            _proxyTarget.Backward2 = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Forward2()
        {
            return _proxyTarget.Forward2;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Forward2(System.Double RHS)
        {
            _proxyTarget.Forward2 = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Backward()
        {
            return _proxyTarget.Backward;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Backward(System.Double RHS)
        {
            _proxyTarget.Backward = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDataLabelProxy get_DataLabel()
        {
            return new IMsoDataLabelProxy(_proxyTarget.DataLabel);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisplayEquation()
        {
            return _proxyTarget.DisplayEquation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayEquation(System.Boolean RHS)
        {
            _proxyTarget.DisplayEquation = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_DisplayRSquared()
        {
            return _proxyTarget.DisplayRSquared;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayRSquared(System.Boolean RHS)
        {
            _proxyTarget.DisplayRSquared = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Forward()
        {
            return _proxyTarget.Forward;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Forward(System.Double RHS)
        {
            _proxyTarget.Forward = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Intercept()
        {
            return _proxyTarget.Intercept;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Intercept(System.Double RHS)
        {
            _proxyTarget.Intercept = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_InterceptIsAuto()
        {
            return _proxyTarget.InterceptIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InterceptIsAuto(System.Boolean RHS)
        {
            _proxyTarget.InterceptIsAuto = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Name(System.String RHS)
        {
            _proxyTarget.Name = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_NameIsAuto()
        {
            return _proxyTarget.NameIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NameIsAuto(System.Boolean RHS)
        {
            _proxyTarget.NameIsAuto = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Order()
        {
            return _proxyTarget.Order;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Order(System.Int32 RHS)
        {
            _proxyTarget.Order = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Period()
        {
            return _proxyTarget.Period;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Period(System.Int32 RHS)
        {
            _proxyTarget.Period = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTrendlineType get_Type()
        {
            return _proxyTarget.Type;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Trendlines which adds IDispose to the interface
    /// </summary>
    public class TrendlinesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Trendlines _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Trendlines which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TrendlinesProxy(Microsoft.Office.Core.Trendlines proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoTrendlineProxy Add(Microsoft.Office.Core.XlTrendlineType Type, System.Object Order, System.Object Period, System.Object Forward, System.Object Backward, System.Object Intercept, System.Object DisplayEquation, System.Object DisplayRSquared, System.Object Name)
        {
            return new IMsoTrendlineProxy(_proxyTarget.Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoTrendlineProxy Item(System.Object Index)
        {
            return new IMsoTrendlineProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDataLabels which adds IDispose to the interface
    /// </summary>
    public class IMsoDataLabelsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDataLabels _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDataLabels which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDataLabelsProxy(Microsoft.Office.Core.IMsoDataLabels proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormatLocal(System.Object RHS)
        {
            _proxyTarget.NumberFormatLocal = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowLegendKey()
        {
            return _proxyTarget.ShowLegendKey;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowLegendKey(System.Boolean RHS)
        {
            _proxyTarget.ShowLegendKey = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(System.Object RHS)
        {
            _proxyTarget.Type = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlDataLabelPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlDataLabelPosition RHS)
        {
            _proxyTarget.Position = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowSeriesName()
        {
            return _proxyTarget.ShowSeriesName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowSeriesName(System.Boolean RHS)
        {
            _proxyTarget.ShowSeriesName = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowCategoryName()
        {
            return _proxyTarget.ShowCategoryName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowCategoryName(System.Boolean RHS)
        {
            _proxyTarget.ShowCategoryName = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowValue()
        {
            return _proxyTarget.ShowValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowValue(System.Boolean RHS)
        {
            _proxyTarget.ShowValue = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowPercentage()
        {
            return _proxyTarget.ShowPercentage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowPercentage(System.Boolean RHS)
        {
            _proxyTarget.ShowPercentage = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowBubbleSize()
        {
            return _proxyTarget.ShowBubbleSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowBubbleSize(System.Boolean RHS)
        {
            _proxyTarget.ShowBubbleSize = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Separator()
        {
            return _proxyTarget.Separator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Separator(System.Object RHS)
        {
            _proxyTarget.Separator = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoDataLabelProxy Item(System.Object Index)
        {
            return new IMsoDataLabelProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoCharactersProxy get_Characters(System.Object Start, System.Object Length)
        {
            return new IMsoCharactersProxy(_proxyTarget.Characters[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_HorizontalAlignment()
        {
            return _proxyTarget.HorizontalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HorizontalAlignment(System.Object RHS)
        {
            _proxyTarget.HorizontalAlignment = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(System.Object RHS)
        {
            _proxyTarget.Orientation = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean RHS)
        {
            _proxyTarget.Shadow = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_VerticalAlignment()
        {
            return _proxyTarget.VerticalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VerticalAlignment(System.Object RHS)
        {
            _proxyTarget.VerticalAlignment = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ReadingOrder()
        {
            return _proxyTarget.ReadingOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReadingOrder(System.Int32 RHS)
        {
            _proxyTarget.ReadingOrder = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object RHS)
        {
            _proxyTarget.AutoScaleFont = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AutoText()
        {
            return _proxyTarget.AutoText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoText(System.Boolean RHS)
        {
            _proxyTarget.AutoText = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NumberFormat()
        {
            return _proxyTarget.NumberFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormat(System.String RHS)
        {
            _proxyTarget.NumberFormat = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_NumberFormatLinked()
        {
            return _proxyTarget.NumberFormatLinked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormatLinked(System.Boolean RHS)
        {
            _proxyTarget.NumberFormatLinked = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_NumberFormatLocal()
        {
            return _proxyTarget.NumberFormatLocal;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDataLabel which adds IDispose to the interface
    /// </summary>
    public class IMsoDataLabelProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDataLabel _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDataLabel which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDataLabelProxy(Microsoft.Office.Core.IMsoDataLabel proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Formula(System.String pbstr)
        {
            _proxyTarget.Formula = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Formula()
        {
            return _proxyTarget.Formula;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1 = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1()
        {
            return _proxyTarget.FormulaR1C1;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaLocal(System.String pbstr)
        {
            _proxyTarget.FormulaLocal = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaLocal()
        {
            return _proxyTarget.FormulaLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1Local(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1Local = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1Local()
        {
            return _proxyTarget.FormulaR1C1Local;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object RHS)
        {
            _proxyTarget.AutoScaleFont = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AutoText()
        {
            return _proxyTarget.AutoText;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoText(System.Boolean RHS)
        {
            _proxyTarget.AutoText = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NumberFormat()
        {
            return _proxyTarget.NumberFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormat(System.String RHS)
        {
            _proxyTarget.NumberFormat = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_NumberFormatLinked()
        {
            return _proxyTarget.NumberFormatLinked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormatLinked(System.Boolean RHS)
        {
            _proxyTarget.NumberFormatLinked = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_NumberFormatLocal()
        {
            return _proxyTarget.NumberFormatLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormatLocal(System.Object RHS)
        {
            _proxyTarget.NumberFormatLocal = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowLegendKey()
        {
            return _proxyTarget.ShowLegendKey;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowLegendKey(System.Boolean RHS)
        {
            _proxyTarget.ShowLegendKey = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(System.Object RHS)
        {
            _proxyTarget.Type = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlDataLabelPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlDataLabelPosition RHS)
        {
            _proxyTarget.Position = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowSeriesName()
        {
            return _proxyTarget.ShowSeriesName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowSeriesName(System.Boolean RHS)
        {
            _proxyTarget.ShowSeriesName = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowCategoryName()
        {
            return _proxyTarget.ShowCategoryName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowCategoryName(System.Boolean RHS)
        {
            _proxyTarget.ShowCategoryName = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowValue()
        {
            return _proxyTarget.ShowValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowValue(System.Boolean RHS)
        {
            _proxyTarget.ShowValue = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowPercentage()
        {
            return _proxyTarget.ShowPercentage;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowPercentage(System.Boolean RHS)
        {
            _proxyTarget.ShowPercentage = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowBubbleSize()
        {
            return _proxyTarget.ShowBubbleSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowBubbleSize(System.Boolean RHS)
        {
            _proxyTarget.ShowBubbleSize = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Separator()
        {
            return _proxyTarget.Separator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Separator(System.Object RHS)
        {
            _proxyTarget.Separator = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String RHS)
        {
            _proxyTarget.Caption = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoCharactersProxy get_Characters(System.Object Start, System.Object Length)
        {
            return new IMsoCharactersProxy(_proxyTarget.Characters[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_HorizontalAlignment()
        {
            return _proxyTarget.HorizontalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HorizontalAlignment(System.Object RHS)
        {
            _proxyTarget.HorizontalAlignment = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double RHS)
        {
            _proxyTarget.Left = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(System.Object RHS)
        {
            _proxyTarget.Orientation = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean RHS)
        {
            _proxyTarget.Shadow = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String RHS)
        {
            _proxyTarget.Text = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double RHS)
        {
            _proxyTarget.Top = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_VerticalAlignment()
        {
            return _proxyTarget.VerticalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VerticalAlignment(System.Object RHS)
        {
            _proxyTarget.VerticalAlignment = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ReadingOrder()
        {
            return _proxyTarget.ReadingOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReadingOrder(System.Int32 RHS)
        {
            _proxyTarget.ReadingOrder = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Points which adds IDispose to the interface
    /// </summary>
    public class PointsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Points _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Points which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PointsProxy(Microsoft.Office.Core.Points proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual ChartPointProxy Item(System.Int32 Index)
        {
            return new ChartPointProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ChartPoint which adds IDispose to the interface
    /// </summary>
    public class ChartPointProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ChartPoint _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ChartPoint which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ChartPointProxy(Microsoft.Office.Core.ChartPoint proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Double PieSliceLocation(Microsoft.Office.Core.XlPieSliceLocation loc, Microsoft.Office.Core.XlPieSliceIndex Index)
        {
            return _proxyTarget.PieSliceLocation(loc, Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureType(Microsoft.Office.Core.XlChartPictureType RHS)
        {
            _proxyTarget.PictureType = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_PictureUnit()
        {
            return _proxyTarget.PictureUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit(System.Double RHS)
        {
            _proxyTarget.PictureUnit = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ApplyPictToSides()
        {
            return _proxyTarget.ApplyPictToSides;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ApplyPictToSides(System.Boolean RHS)
        {
            _proxyTarget.ApplyPictToSides = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ApplyPictToFront()
        {
            return _proxyTarget.ApplyPictToFront;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ApplyPictToFront(System.Boolean RHS)
        {
            _proxyTarget.ApplyPictToFront = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ApplyPictToEnd()
        {
            return _proxyTarget.ApplyPictToEnd;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ApplyPictToEnd(System.Boolean RHS)
        {
            _proxyTarget.ApplyPictToEnd = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean RHS)
        {
            _proxyTarget.Shadow = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_SecondaryPlot()
        {
            return _proxyTarget.SecondaryPlot;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SecondaryPlot(System.Boolean RHS)
        {
            _proxyTarget.SecondaryPlot = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ApplyDataLabels(Microsoft.Office.Core.XlDataLabelsType Type, System.Object IMsoLegendKey, System.Object AutoText, System.Object HasLeaderLines, System.Object ShowSeriesName, System.Object ShowCategoryName, System.Object ShowValue, System.Object ShowPercentage, System.Object ShowBubbleSize, System.Object Separator)
        {
            return _proxyTarget.ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Has3DEffect()
        {
            return _proxyTarget.Has3DEffect;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Has3DEffect(System.Boolean RHS)
        {
            _proxyTarget.Has3DEffect = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_PictureUnit2()
        {
            return _proxyTarget.PictureUnit2;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureUnit2(System.Double RHS)
        {
            _proxyTarget.PictureUnit2 = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object _ApplyDataLabels(Microsoft.Office.Core.XlDataLabelsType Type, System.Object IMsoLegendKey, System.Object AutoText, System.Object HasLeaderLines)
        {
            return _proxyTarget._ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object ClearFormats()
        {
            return _proxyTarget.ClearFormats();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Copy()
        {
            return _proxyTarget.Copy();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDataLabelProxy get_DataLabel()
        {
            return new IMsoDataLabelProxy(_proxyTarget.DataLabel);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Explosion()
        {
            return _proxyTarget.Explosion;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Explosion(System.Int32 RHS)
        {
            _proxyTarget.Explosion = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasDataLabel()
        {
            return _proxyTarget.HasDataLabel;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasDataLabel(System.Boolean RHS)
        {
            _proxyTarget.HasDataLabel = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_InvertIfNegative()
        {
            return _proxyTarget.InvertIfNegative;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_InvertIfNegative(System.Boolean RHS)
        {
            _proxyTarget.InvertIfNegative = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerBackgroundColor()
        {
            return _proxyTarget.MarkerBackgroundColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerBackgroundColor(System.Int32 RHS)
        {
            _proxyTarget.MarkerBackgroundColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_MarkerBackgroundColorIndex()
        {
            return _proxyTarget.MarkerBackgroundColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerBackgroundColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.MarkerBackgroundColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerForegroundColor()
        {
            return _proxyTarget.MarkerForegroundColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerForegroundColor(System.Int32 RHS)
        {
            _proxyTarget.MarkerForegroundColor = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlColorIndex get_MarkerForegroundColorIndex()
        {
            return _proxyTarget.MarkerForegroundColorIndex;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerForegroundColorIndex(Microsoft.Office.Core.XlColorIndex RHS)
        {
            _proxyTarget.MarkerForegroundColorIndex = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_MarkerSize()
        {
            return _proxyTarget.MarkerSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerSize(System.Int32 RHS)
        {
            _proxyTarget.MarkerSize = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlMarkerStyle get_MarkerStyle()
        {
            return _proxyTarget.MarkerStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MarkerStyle(Microsoft.Office.Core.XlMarkerStyle RHS)
        {
            _proxyTarget.MarkerStyle = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Paste()
        {
            return _proxyTarget.Paste();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartPictureType get_PictureType()
        {
            return _proxyTarget.PictureType;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Axes which adds IDispose to the interface
    /// </summary>
    public class AxesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Axes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Axes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public AxesProxy(Microsoft.Office.Core.Axes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual IMsoAxisProxy this[Microsoft.Office.Core.XlAxisType Type, Microsoft.Office.Core.XlAxisGroup AxisGroup]
		{
			get { return new IMsoAxisProxy(_proxyTarget[Type]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get__NewEnum()
        {
            return _proxyTarget._NewEnum;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoAxis which adds IDispose to the interface
    /// </summary>
    public class IMsoAxisProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoAxis _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoAxis which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoAxisProxy(Microsoft.Office.Core.IMsoAxis proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.XlAxisType pval)
        {
            _proxyTarget.Type = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTimeUnit get_BaseUnit()
        {
            return _proxyTarget.BaseUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BaseUnit(Microsoft.Office.Core.XlTimeUnit pval)
        {
            _proxyTarget.BaseUnit = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_BaseUnitIsAuto()
        {
            return _proxyTarget.BaseUnitIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BaseUnitIsAuto(System.Boolean pval)
        {
            _proxyTarget.BaseUnitIsAuto = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTimeUnit get_MajorUnitScale()
        {
            return _proxyTarget.MajorUnitScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MajorUnitScale(Microsoft.Office.Core.XlTimeUnit pval)
        {
            _proxyTarget.MajorUnitScale = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTimeUnit get_MinorUnitScale()
        {
            return _proxyTarget.MinorUnitScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MinorUnitScale(Microsoft.Office.Core.XlTimeUnit pval)
        {
            _proxyTarget.MinorUnitScale = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlCategoryType get_CategoryType()
        {
            return _proxyTarget.CategoryType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CategoryType(Microsoft.Office.Core.XlCategoryType pval)
        {
            _proxyTarget.CategoryType = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlDisplayUnit get_DisplayUnit()
        {
            return _proxyTarget.DisplayUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayUnit(Microsoft.Office.Core.XlDisplayUnit pval)
        {
            _proxyTarget.DisplayUnit = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_DisplayUnitCustom()
        {
            return _proxyTarget.DisplayUnitCustom;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayUnitCustom(System.Double pval)
        {
            _proxyTarget.DisplayUnitCustom = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasDisplayUnitLabel()
        {
            return _proxyTarget.HasDisplayUnitLabel;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasDisplayUnitLabel(System.Boolean pval)
        {
            _proxyTarget.HasDisplayUnitLabel = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDisplayUnitLabelProxy get_DisplayUnitLabel()
        {
            return new IMsoDisplayUnitLabelProxy(_proxyTarget.DisplayUnitLabel);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_MaximumScale()
        {
            return _proxyTarget.MaximumScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MaximumScale(System.Double pval)
        {
            _proxyTarget.MaximumScale = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MaximumScaleIsAuto()
        {
            return _proxyTarget.MaximumScaleIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MaximumScaleIsAuto(System.Boolean pval)
        {
            _proxyTarget.MaximumScaleIsAuto = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_MinimumScale()
        {
            return _proxyTarget.MinimumScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MinimumScale(System.Double pval)
        {
            _proxyTarget.MinimumScale = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MinimumScaleIsAuto()
        {
            return _proxyTarget.MinimumScaleIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MinimumScaleIsAuto(System.Boolean pval)
        {
            _proxyTarget.MinimumScaleIsAuto = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GridLinesProxy get_MinorGridlines()
        {
            return new GridLinesProxy(_proxyTarget.MinorGridlines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTickMark get_MinorTickMark()
        {
            return _proxyTarget.MinorTickMark;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MinorTickMark(Microsoft.Office.Core.XlTickMark pval)
        {
            _proxyTarget.MinorTickMark = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_MinorUnit()
        {
            return _proxyTarget.MinorUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MinorUnit(System.Double pval)
        {
            _proxyTarget.MinorUnit = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MinorUnitIsAuto()
        {
            return _proxyTarget.MinorUnitIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MinorUnitIsAuto(System.Boolean pval)
        {
            _proxyTarget.MinorUnitIsAuto = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ReversePlotOrder()
        {
            return _proxyTarget.ReversePlotOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReversePlotOrder(System.Boolean pval)
        {
            _proxyTarget.ReversePlotOrder = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlScaleType get_ScaleType()
        {
            return _proxyTarget.ScaleType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ScaleType(Microsoft.Office.Core.XlScaleType pval)
        {
            _proxyTarget.ScaleType = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTickLabelPosition get_TickLabelPosition()
        {
            return _proxyTarget.TickLabelPosition;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TickLabelPosition(Microsoft.Office.Core.XlTickLabelPosition pval)
        {
            _proxyTarget.TickLabelPosition = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoTickLabelsProxy get_TickLabels()
        {
            return new IMsoTickLabelsProxy(_proxyTarget.TickLabels);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_TickLabelSpacing()
        {
            return _proxyTarget.TickLabelSpacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TickLabelSpacing(System.Int32 pval)
        {
            _proxyTarget.TickLabelSpacing = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_TickMarkSpacing()
        {
            return _proxyTarget.TickMarkSpacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TickMarkSpacing(System.Int32 pval)
        {
            _proxyTarget.TickMarkSpacing = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlAxisType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_AxisBetweenCategories()
        {
            return _proxyTarget.AxisBetweenCategories;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AxisBetweenCategories(System.Boolean pval)
        {
            _proxyTarget.AxisBetweenCategories = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlAxisGroup get_AxisGroup()
        {
            return _proxyTarget.AxisGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoAxisTitleProxy get_AxisTitle()
        {
            return new IMsoAxisTitleProxy(_proxyTarget.AxisTitle);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_CategoryNames()
        {
            return _proxyTarget.CategoryNames;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CategoryNames(System.Object pval)
        {
            _proxyTarget.CategoryNames = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlAxisCrosses get_Crosses()
        {
            return _proxyTarget.Crosses;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Crosses(Microsoft.Office.Core.XlAxisCrosses pval)
        {
            _proxyTarget.Crosses = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_CrossesAt()
        {
            return _proxyTarget.CrossesAt;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_CrossesAt(System.Double pval)
        {
            _proxyTarget.CrossesAt = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasMajorGridlines()
        {
            return _proxyTarget.HasMajorGridlines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasMajorGridlines(System.Boolean pval)
        {
            _proxyTarget.HasMajorGridlines = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasMinorGridlines()
        {
            return _proxyTarget.HasMinorGridlines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasMinorGridlines(System.Boolean pval)
        {
            _proxyTarget.HasMinorGridlines = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasTitle()
        {
            return _proxyTarget.HasTitle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasTitle(System.Boolean pval)
        {
            _proxyTarget.HasTitle = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GridLinesProxy get_MajorGridlines()
        {
            return new GridLinesProxy(_proxyTarget.MajorGridlines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTickMark get_MajorTickMark()
        {
            return _proxyTarget.MajorTickMark;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MajorTickMark(Microsoft.Office.Core.XlTickMark pval)
        {
            _proxyTarget.MajorTickMark = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_MajorUnit()
        {
            return _proxyTarget.MajorUnit;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MajorUnit(System.Double pval)
        {
            _proxyTarget.MajorUnit = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_LogBase()
        {
            return _proxyTarget.LogBase;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LogBase(System.Double pval)
        {
            _proxyTarget.LogBase = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_TickLabelSpacingIsAuto()
        {
            return _proxyTarget.TickLabelSpacingIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_TickLabelSpacingIsAuto(System.Boolean pval)
        {
            _proxyTarget.TickLabelSpacingIsAuto = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MajorUnitIsAuto()
        {
            return _proxyTarget.MajorUnitIsAuto;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MajorUnitIsAuto(System.Boolean pval)
        {
            _proxyTarget.MajorUnitIsAuto = pval;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDataTable which adds IDispose to the interface
    /// </summary>
    public class IMsoDataTableProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDataTable _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDataTable which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDataTableProxy(Microsoft.Office.Core.IMsoDataTable proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowLegendKey(System.Boolean pfVisible)
        {
            _proxyTarget.ShowLegendKey = pfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowLegendKey()
        {
            return _proxyTarget.ShowLegendKey;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasBorderHorizontal(System.Boolean pfVisible)
        {
            _proxyTarget.HasBorderHorizontal = pfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasBorderHorizontal()
        {
            return _proxyTarget.HasBorderHorizontal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasBorderVertical(System.Boolean pfVisible)
        {
            _proxyTarget.HasBorderVertical = pfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasBorderVertical()
        {
            return _proxyTarget.HasBorderVertical;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasBorderOutline(System.Boolean pfVisible)
        {
            _proxyTarget.HasBorderOutline = pfVisible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasBorderOutline()
        {
            return _proxyTarget.HasBorderOutline;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select()
        {
            _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object RHS)
        {
            _proxyTarget.AutoScaleFont = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoChartTitle which adds IDispose to the interface
    /// </summary>
    public class IMsoChartTitleProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoChartTitle _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoChartTitle which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoChartTitleProxy(Microsoft.Office.Core.IMsoChartTitle proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IncludeInLayout()
        {
            return _proxyTarget.IncludeInLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_IncludeInLayout(System.Boolean RHS)
        {
            _proxyTarget.IncludeInLayout = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartElementPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlChartElementPosition pval)
        {
            _proxyTarget.Position = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Formula(System.String pbstr)
        {
            _proxyTarget.Formula = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Formula()
        {
            return _proxyTarget.Formula;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1 = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1()
        {
            return _proxyTarget.FormulaR1C1;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaLocal(System.String pbstr)
        {
            _proxyTarget.FormulaLocal = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaLocal()
        {
            return _proxyTarget.FormulaLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1Local(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1Local = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1Local()
        {
            return _proxyTarget.FormulaR1C1Local;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstr)
        {
            _proxyTarget.Caption = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoCharactersProxy get_Characters(System.Object Start, System.Object Length)
        {
            return new IMsoCharactersProxy(_proxyTarget.Characters[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HorizontalAlignment(System.Object Val)
        {
            _proxyTarget.HorizontalAlignment = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_HorizontalAlignment()
        {
            return _proxyTarget.HorizontalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double pval)
        {
            _proxyTarget.Left = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(System.Object Val)
        {
            _proxyTarget.Orientation = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean pval)
        {
            _proxyTarget.Shadow = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double pval)
        {
            _proxyTarget.Top = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VerticalAlignment(System.Object Val)
        {
            _proxyTarget.VerticalAlignment = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_VerticalAlignment()
        {
            return _proxyTarget.VerticalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ReadingOrder()
        {
            return _proxyTarget.ReadingOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReadingOrder(System.Int32 pval)
        {
            _proxyTarget.ReadingOrder = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object Val)
        {
            _proxyTarget.AutoScaleFont = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoAxisTitle which adds IDispose to the interface
    /// </summary>
    public class IMsoAxisTitleProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoAxisTitle _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoAxisTitle which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoAxisTitleProxy(Microsoft.Office.Core.IMsoAxisTitle proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IncludeInLayout()
        {
            return _proxyTarget.IncludeInLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_IncludeInLayout(System.Boolean RHS)
        {
            _proxyTarget.IncludeInLayout = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartElementPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlChartElementPosition pval)
        {
            _proxyTarget.Position = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Formula(System.String pbstr)
        {
            _proxyTarget.Formula = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Formula()
        {
            return _proxyTarget.Formula;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1 = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1()
        {
            return _proxyTarget.FormulaR1C1;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaLocal(System.String pbstr)
        {
            _proxyTarget.FormulaLocal = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaLocal()
        {
            return _proxyTarget.FormulaLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1Local(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1Local = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1Local()
        {
            return _proxyTarget.FormulaR1C1Local;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstr)
        {
            _proxyTarget.Caption = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoCharactersProxy get_Characters(System.Object Start, System.Object Length)
        {
            return new IMsoCharactersProxy(_proxyTarget.Characters[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HorizontalAlignment(System.Object Val)
        {
            _proxyTarget.HorizontalAlignment = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_HorizontalAlignment()
        {
            return _proxyTarget.HorizontalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double pval)
        {
            _proxyTarget.Left = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(System.Object Val)
        {
            _proxyTarget.Orientation = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean pval)
        {
            _proxyTarget.Shadow = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double pval)
        {
            _proxyTarget.Top = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VerticalAlignment(System.Object Val)
        {
            _proxyTarget.VerticalAlignment = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_VerticalAlignment()
        {
            return _proxyTarget.VerticalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ReadingOrder()
        {
            return _proxyTarget.ReadingOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReadingOrder(System.Int32 pval)
        {
            _proxyTarget.ReadingOrder = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object Val)
        {
            _proxyTarget.AutoScaleFont = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDisplayUnitLabel which adds IDispose to the interface
    /// </summary>
    public class IMsoDisplayUnitLabelProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDisplayUnitLabel _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDisplayUnitLabel which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDisplayUnitLabelProxy(Microsoft.Office.Core.IMsoDisplayUnitLabel proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IncludeInLayout()
        {
            return _proxyTarget.IncludeInLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_IncludeInLayout(System.Boolean RHS)
        {
            _proxyTarget.IncludeInLayout = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartElementPosition get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(Microsoft.Office.Core.XlChartElementPosition pval)
        {
            _proxyTarget.Position = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Height()
        {
            return _proxyTarget.Height;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Width()
        {
            return _proxyTarget.Width;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Formula(System.String pbstr)
        {
            _proxyTarget.Formula = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Formula()
        {
            return _proxyTarget.Formula;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1 = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1()
        {
            return _proxyTarget.FormulaR1C1;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaLocal(System.String pbstr)
        {
            _proxyTarget.FormulaLocal = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaLocal()
        {
            return _proxyTarget.FormulaLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FormulaR1C1Local(System.String pbstr)
        {
            _proxyTarget.FormulaR1C1Local = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_FormulaR1C1Local()
        {
            return _proxyTarget.FormulaR1C1Local;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String pbstr)
        {
            _proxyTarget.Caption = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoCharactersProxy get_Characters(System.Object Start, System.Object Length)
        {
            return new IMsoCharactersProxy(_proxyTarget.Characters[Start, Length]);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HorizontalAlignment(System.Object Val)
        {
            _proxyTarget.HorizontalAlignment = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_HorizontalAlignment()
        {
            return _proxyTarget.HorizontalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Left()
        {
            return _proxyTarget.Left;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Left(System.Double pval)
        {
            _proxyTarget.Left = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(System.Object Val)
        {
            _proxyTarget.Orientation = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Shadow()
        {
            return _proxyTarget.Shadow;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Shadow(System.Boolean pval)
        {
            _proxyTarget.Shadow = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String pbstr)
        {
            _proxyTarget.Text = pbstr;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Double get_Top()
        {
            return _proxyTarget.Top;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Top(System.Double pval)
        {
            _proxyTarget.Top = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VerticalAlignment(System.Object Val)
        {
            _proxyTarget.VerticalAlignment = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_VerticalAlignment()
        {
            return _proxyTarget.VerticalAlignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ReadingOrder()
        {
            return _proxyTarget.ReadingOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReadingOrder(System.Int32 pval)
        {
            _proxyTarget.ReadingOrder = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object Val)
        {
            _proxyTarget.AutoScaleFont = Val;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoInteriorProxy get_Interior()
        {
            return new IMsoInteriorProxy(_proxyTarget.Interior);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFillFormatProxy get_Fill()
        {
            return new ChartFillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoTickLabels which adds IDispose to the interface
    /// </summary>
    public class IMsoTickLabelsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoTickLabels _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoTickLabels which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoTickLabelsProxy(Microsoft.Office.Core.IMsoTickLabels proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_NumberFormat()
        {
            return _proxyTarget.NumberFormat;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormat(System.String pval)
        {
            _proxyTarget.NumberFormat = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_NumberFormatLinked()
        {
            return _proxyTarget.NumberFormatLinked;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormatLinked(System.Boolean pval)
        {
            _proxyTarget.NumberFormatLinked = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_NumberFormatLocal()
        {
            return _proxyTarget.NumberFormatLocal;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_NumberFormatLocal(System.Object pval)
        {
            _proxyTarget.NumberFormatLocal = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlTickLabelOrientation get_Orientation()
        {
            return _proxyTarget.Orientation;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Orientation(Microsoft.Office.Core.XlTickLabelOrientation pval)
        {
            _proxyTarget.Orientation = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Select()
        {
            return _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_ReadingOrder()
        {
            return _proxyTarget.ReadingOrder;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ReadingOrder(System.Int32 pval)
        {
            _proxyTarget.ReadingOrder = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_AutoScaleFont()
        {
            return _proxyTarget.AutoScaleFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AutoScaleFont(System.Object pval)
        {
            _proxyTarget.AutoScaleFont = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Depth()
        {
            return _proxyTarget.Depth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Offset()
        {
            return _proxyTarget.Offset;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Offset(System.Int32 pval)
        {
            _proxyTarget.Offset = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Alignment()
        {
            return _proxyTarget.Alignment;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Alignment(System.Int32 pval)
        {
            _proxyTarget.Alignment = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_MultiLevel()
        {
            return _proxyTarget.MultiLevel;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_MultiLevel(System.Boolean pval)
        {
            _proxyTarget.MultiLevel = pval;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoHyperlinks which adds IDispose to the interface
    /// </summary>
    public class IMsoHyperlinksProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoHyperlinks _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoHyperlinks which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoHyperlinksProxy(Microsoft.Office.Core.IMsoHyperlinks proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoDropLines which adds IDispose to the interface
    /// </summary>
    public class IMsoDropLinesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoDropLines _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoDropLines which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoDropLinesProxy(Microsoft.Office.Core.IMsoDropLines proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select()
        {
            _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoHiLoLines which adds IDispose to the interface
    /// </summary>
    public class IMsoHiLoLinesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoHiLoLines _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoHiLoLines which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoHiLoLinesProxy(Microsoft.Office.Core.IMsoHiLoLines proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Select()
        {
            _proxyTarget.Select();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoBorderProxy get_Border()
        {
            return new IMsoBorderProxy(_proxyTarget.Border);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoChartFormatProxy get_Format()
        {
            return new IMsoChartFormatProxy(_proxyTarget.Format);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoChartGroup which adds IDispose to the interface
    /// </summary>
    public class IMsoChartGroupProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoChartGroup _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoChartGroup which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoChartGroupProxy(Microsoft.Office.Core.IMsoChartGroup proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SubType()
        {
            return _proxyTarget.SubType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(System.Int32 ptype)
        {
            _proxyTarget.Type = ptype;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoUpBarsProxy get_UpBars()
        {
            return new IMsoUpBarsProxy(_proxyTarget.UpBars);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_VaryByCategories(System.Boolean pfVaryByCategories)
        {
            _proxyTarget.VaryByCategories = pfVaryByCategories;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_VaryByCategories()
        {
            return _proxyTarget.VaryByCategories;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlSizeRepresents get_SizeRepresents()
        {
            return _proxyTarget.SizeRepresents;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SizeRepresents(Microsoft.Office.Core.XlSizeRepresents pXlSizeRepresents)
        {
            _proxyTarget.SizeRepresents = pXlSizeRepresents;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_BubbleScale(System.Int32 pbubblescale)
        {
            _proxyTarget.BubbleScale = pbubblescale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_BubbleScale()
        {
            return _proxyTarget.BubbleScale;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShowNegativeBubbles(System.Boolean pfShowNegativeBubbles)
        {
            _proxyTarget.ShowNegativeBubbles = pfShowNegativeBubbles;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_ShowNegativeBubbles()
        {
            return _proxyTarget.ShowNegativeBubbles;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SplitType(Microsoft.Office.Core.XlChartSplitType pChartSplitType)
        {
            _proxyTarget.SplitType = pChartSplitType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.XlChartSplitType get_SplitType()
        {
            return _proxyTarget.SplitType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_SplitValue()
        {
            return _proxyTarget.SplitValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SplitValue(System.Object pSplitValue)
        {
            _proxyTarget.SplitValue = pSplitValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_SecondPlotSize()
        {
            return _proxyTarget.SecondPlotSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SecondPlotSize(System.Int32 pSecondPlotSize)
        {
            _proxyTarget.SecondPlotSize = pSecondPlotSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_Has3DShading()
        {
            return _proxyTarget.Has3DShading;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Has3DShading(System.Boolean RHS)
        {
            _proxyTarget.Has3DShading = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_AxisGroup(System.Int32 piGroup)
        {
            _proxyTarget.AxisGroup = piGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_AxisGroup()
        {
            return _proxyTarget.AxisGroup;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DoughnutHoleSize(System.Int32 pDoughnutHoleSize)
        {
            _proxyTarget.DoughnutHoleSize = pDoughnutHoleSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_DoughnutHoleSize()
        {
            return _proxyTarget.DoughnutHoleSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDownBarsProxy get_DownBars()
        {
            return new IMsoDownBarsProxy(_proxyTarget.DownBars);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoDropLinesProxy get_DropLines()
        {
            return new IMsoDropLinesProxy(_proxyTarget.DropLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FirstSliceAngle(System.Int32 pFirstSliceAngle)
        {
            _proxyTarget.FirstSliceAngle = pFirstSliceAngle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_FirstSliceAngle()
        {
            return _proxyTarget.FirstSliceAngle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_GapWidth(System.Int32 pGapWidth)
        {
            _proxyTarget.GapWidth = pGapWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_GapWidth()
        {
            return _proxyTarget.GapWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasDropLines(System.Boolean pfHasDropLines)
        {
            _proxyTarget.HasDropLines = pfHasDropLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasDropLines()
        {
            return _proxyTarget.HasDropLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasHiLoLines(System.Boolean pfHasHiLoLines)
        {
            _proxyTarget.HasHiLoLines = pfHasHiLoLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasHiLoLines()
        {
            return _proxyTarget.HasHiLoLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasRadarAxisLabels(System.Boolean pfHasRadarAxisLabels)
        {
            _proxyTarget.HasRadarAxisLabels = pfHasRadarAxisLabels;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasRadarAxisLabels()
        {
            return _proxyTarget.HasRadarAxisLabels;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasSeriesLines(System.Boolean pfHasSeriesLines)
        {
            _proxyTarget.HasSeriesLines = pfHasSeriesLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasSeriesLines()
        {
            return _proxyTarget.HasSeriesLines;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_HasUpDownBars(System.Boolean pfHasUpDownBars)
        {
            _proxyTarget.HasUpDownBars = pfHasUpDownBars;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_HasUpDownBars()
        {
            return _proxyTarget.HasUpDownBars;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoHiLoLinesProxy get_HiLoLines()
        {
            return new IMsoHiLoLinesProxy(_proxyTarget.HiLoLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Index()
        {
            return _proxyTarget.Index;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Overlap(System.Int32 pOverlap)
        {
            _proxyTarget.Overlap = pOverlap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Overlap()
        {
            return _proxyTarget.Overlap;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_RadarAxisLabels()
        {
            return _proxyTarget.RadarAxisLabels;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object SeriesCollection(System.Object Index)
        {
            return _proxyTarget.SeriesCollection(Index);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual IMsoSeriesLinesProxy get_SeriesLines()
        {
            return new IMsoSeriesLinesProxy(_proxyTarget.SeriesLines);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SubType(System.Int32 pSubType)
        {
            _proxyTarget.SubType = pSubType;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ChartGroups which adds IDispose to the interface
    /// </summary>
    public class ChartGroupsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ChartGroups _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ChartGroups which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ChartGroupsProxy(Microsoft.Office.Core.ChartGroups proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual IMsoChartGroupProxy Item(System.Object Index)
        {
            return new IMsoChartGroupProxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoCharacters which adds IDispose to the interface
    /// </summary>
    public class IMsoCharactersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoCharacters _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoCharacters which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoCharactersProxy(Microsoft.Office.Core.IMsoCharacters proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Caption()
        {
            return _proxyTarget.Caption;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Caption(System.String RHS)
        {
            _proxyTarget.Caption = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Delete()
        {
            return _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ChartFontProxy get_Font()
        {
            return new ChartFontProxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object Insert(System.String bstr)
        {
            return _proxyTarget.Insert(bstr);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Text()
        {
            return _proxyTarget.Text;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Text(System.String RHS)
        {
            _proxyTarget.Text = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_PhoneticCharacters()
        {
            return _proxyTarget.PhoneticCharacters;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PhoneticCharacters(System.String RHS)
        {
            _proxyTarget.PhoneticCharacters = RHS;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoChartFormat which adds IDispose to the interface
    /// </summary>
    public class IMsoChartFormatProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoChartFormat _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoChartFormat which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoChartFormatProxy(Microsoft.Office.Core.IMsoChartFormat proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual FillFormatProxy get_Fill()
        {
            return new FillFormatProxy(_proxyTarget.Fill);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual GlowFormatProxy get_Glow()
        {
            return new GlowFormatProxy(_proxyTarget.Glow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual LineFormatProxy get_Line()
        {
            return new LineFormatProxy(_proxyTarget.Line);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PictureFormatProxy get_PictureFormat()
        {
            return new PictureFormatProxy(_proxyTarget.PictureFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShadowFormatProxy get_Shadow()
        {
            return new ShadowFormatProxy(_proxyTarget.Shadow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SoftEdgeFormatProxy get_SoftEdge()
        {
            return new SoftEdgeFormatProxy(_proxyTarget.SoftEdge);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextFrame2Proxy get_TextFrame2()
        {
            return new TextFrame2Proxy(_proxyTarget.TextFrame2);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ThreeDFormatProxy get_ThreeD()
        {
            return new ThreeDFormatProxy(_proxyTarget.ThreeD);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for BulletFormat2 which adds IDispose to the interface
    /// </summary>
    public class BulletFormat2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.BulletFormat2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.BulletFormat2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public BulletFormat2Proxy(Microsoft.Office.Core.BulletFormat2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Character()
        {
            return _proxyTarget.Character;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Character(System.Int32 Character)
        {
            _proxyTarget.Character = Character;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Font2Proxy get_Font()
        {
            return new Font2Proxy(_proxyTarget.Font);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Number()
        {
            return _proxyTarget.Number;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Picture(System.String FileName)
        {
            _proxyTarget.Picture(FileName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_RelativeSize()
        {
            return _proxyTarget.RelativeSize;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_RelativeSize(System.Single Size)
        {
            _proxyTarget.RelativeSize = Size;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_StartValue()
        {
            return _proxyTarget.StartValue;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_StartValue(System.Int32 Start)
        {
            _proxyTarget.StartValue = Start;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoNumberedBulletStyle get_Style()
        {
            return _proxyTarget.Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Style(Microsoft.Office.Core.MsoNumberedBulletStyle Style)
        {
            _proxyTarget.Style = Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoBulletType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoBulletType Type)
        {
            _proxyTarget.Type = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_UseTextColor()
        {
            return _proxyTarget.UseTextColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_UseTextColor(Microsoft.Office.Core.MsoTriState UseTextColor)
        {
            _proxyTarget.UseTextColor = UseTextColor;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_UseTextFont()
        {
            return _proxyTarget.UseTextFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_UseTextFont(Microsoft.Office.Core.MsoTriState UseTextFont)
        {
            _proxyTarget.UseTextFont = UseTextFont;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TabStops2 which adds IDispose to the interface
    /// </summary>
    public class TabStops2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TabStops2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TabStops2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TabStops2Proxy(Microsoft.Office.Core.TabStops2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TabStop2Proxy Item(System.Object Index)
        {
            return new TabStop2Proxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual TabStop2Proxy Add(Microsoft.Office.Core.MsoTabStopType Type, System.Single Position)
        {
            return new TabStop2Proxy(_proxyTarget.Add(Type, Position));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_DefaultSpacing()
        {
            return _proxyTarget.DefaultSpacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DefaultSpacing(System.Single Spacing)
        {
            _proxyTarget.DefaultSpacing = Spacing;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for TabStop2 which adds IDispose to the interface
    /// </summary>
    public class TabStop2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.TabStop2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.TabStop2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public TabStop2Proxy(Microsoft.Office.Core.TabStop2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Clear()
        {
            _proxyTarget.Clear();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(System.Single Position)
        {
            _proxyTarget.Position = Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTabStopType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(Microsoft.Office.Core.MsoTabStopType Type)
        {
            _proxyTarget.Type = Type;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Ruler2 which adds IDispose to the interface
    /// </summary>
    public class Ruler2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Ruler2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Ruler2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public Ruler2Proxy(Microsoft.Office.Core.Ruler2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual RulerLevels2Proxy get_Levels()
        {
            return new RulerLevels2Proxy(_proxyTarget.Levels);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TabStops2Proxy get_TabStops()
        {
            return new TabStops2Proxy(_proxyTarget.TabStops);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for RulerLevels2 which adds IDispose to the interface
    /// </summary>
    public class RulerLevels2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.RulerLevels2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.RulerLevels2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public RulerLevels2Proxy(Microsoft.Office.Core.RulerLevels2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual RulerLevel2Proxy Item(System.Object Index)
        {
            return new RulerLevel2Proxy(_proxyTarget.Item(Index));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for RulerLevel2 which adds IDispose to the interface
    /// </summary>
    public class RulerLevel2Proxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.RulerLevel2 _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.RulerLevel2 which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public RulerLevel2Proxy(Microsoft.Office.Core.RulerLevel2 proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_FirstMargin()
        {
            return _proxyTarget.FirstMargin;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_FirstMargin(System.Single FirstMargin)
        {
            _proxyTarget.FirstMargin = FirstMargin;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_LeftMargin()
        {
            return _proxyTarget.LeftMargin;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_LeftMargin(System.Single LeftMargin)
        {
            _proxyTarget.LeftMargin = LeftMargin;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for EncryptionProvider which adds IDispose to the interface
    /// </summary>
    public class EncryptionProviderProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.EncryptionProvider _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.EncryptionProvider which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public EncryptionProviderProxy(Microsoft.Office.Core.EncryptionProvider proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Object GetProviderDetail(Microsoft.Office.Core.EncryptionProviderDetail encprovdet)
        {
            return _proxyTarget.GetProviderDetail(encprovdet);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 NewSession(System.Object ParentWindow)
        {
            return _proxyTarget.NewSession(ParentWindow);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Authenticate(System.Object ParentWindow, System.Object EncryptionData, out System.UInt32 PermissionsMask)
        {
            return _proxyTarget.Authenticate(ParentWindow, EncryptionData, out PermissionsMask);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 CloneSession(System.Int32 SessionHandle)
        {
            return _proxyTarget.CloneSession(SessionHandle);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EndSession(System.Int32 SessionHandle)
        {
            _proxyTarget.EndSession(SessionHandle);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Int32 Save(System.Int32 SessionHandle, System.Object EncryptionData)
        {
            return _proxyTarget.Save(SessionHandle, EncryptionData);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void EncryptStream(System.Int32 SessionHandle, System.String StreamName, System.Object UnencryptedStream, System.Object EncryptedStream)
        {
            _proxyTarget.EncryptStream(SessionHandle, StreamName, UnencryptedStream, EncryptedStream);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void DecryptStream(System.Int32 SessionHandle, System.String StreamName, System.Object EncryptedStream, System.Object UnencryptedStream)
        {
            _proxyTarget.DecryptStream(SessionHandle, StreamName, EncryptedStream, UnencryptedStream);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ShowSettings(System.Int32 SessionHandle, System.Object ParentWindow, System.Boolean ReadOnly, out System.Boolean Remove)
        {
            _proxyTarget.ShowSettings(SessionHandle, ParentWindow, ReadOnly, out Remove);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IBlogExtensibility which adds IDispose to the interface
    /// </summary>
    public class IBlogExtensibilityProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IBlogExtensibility _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IBlogExtensibility which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IBlogExtensibilityProxy(Microsoft.Office.Core.IBlogExtensibility proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void BlogProviderProperties(out System.String BlogProvider, out System.String FriendlyName, out Microsoft.Office.Core.MsoBlogCategorySupport CategorySupport, out System.Boolean Padding)
        {
            _proxyTarget.BlogProviderProperties(out BlogProvider, out FriendlyName, out CategorySupport, out Padding);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void SetupBlogAccount(System.String Account, System.Int32 ParentWindow, System.Object Document, System.Boolean NewAccount, out System.Boolean ShowPictureUI)
        {
            _proxyTarget.SetupBlogAccount(Account, ParentWindow, Document, NewAccount, out ShowPictureUI);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void GetUserBlogs(System.String Account, System.Int32 ParentWindow, System.Object Document, out System.Array BlogNames, out System.Array BlogIDs, out System.Array BlogURLs)
        {
            _proxyTarget.GetUserBlogs(Account, ParentWindow, Document, out BlogNames, out BlogIDs, out BlogURLs);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void GetRecentPosts(System.String Account, System.Int32 ParentWindow, System.Object Document, out System.Array PostTitles, out System.Array PostDates, out System.Array PostIDs)
        {
            _proxyTarget.GetRecentPosts(Account, ParentWindow, Document, out PostTitles, out PostDates, out PostIDs);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Open(System.String Account, System.String PostID, System.Int32 ParentWindow, out System.String xHTML, out System.String Title, out System.String DatePosted, out System.Array Categories)
        {
            _proxyTarget.Open(Account, PostID, ParentWindow, out xHTML, out Title, out DatePosted, out Categories);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PublishPost(System.String Account, System.Int32 ParentWindow, System.Object Document, System.String xHTML, System.String Title, System.String DateTime, System.Array Categories, System.Boolean Draft, out System.String PostID, out System.String PublishMessage)
        {
            _proxyTarget.PublishPost(Account, ParentWindow, Document, xHTML, Title, DateTime, Categories, Draft, out PostID, out PublishMessage);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void RepublishPost(System.String Account, System.Int32 ParentWindow, System.Object Document, System.String PostID, System.String xHTML, System.String Title, System.String DateTime, System.Array Categories, System.Boolean Draft, out System.String PublishMessage)
        {
            _proxyTarget.RepublishPost(Account, ParentWindow, Document, PostID, xHTML, Title, DateTime, Categories, Draft, out PublishMessage);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void GetCategories(System.String Account, System.Int32 ParentWindow, System.Object Document, out System.Array Categories)
        {
            _proxyTarget.GetCategories(Account, ParentWindow, Document, out Categories);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IBlogPictureExtensibility which adds IDispose to the interface
    /// </summary>
    public class IBlogPictureExtensibilityProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IBlogPictureExtensibility _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IBlogPictureExtensibility which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IBlogPictureExtensibilityProxy(Microsoft.Office.Core.IBlogPictureExtensibility proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void BlogPictureProviderProperties(out System.String BlogPictureProvider, out System.String FriendlyName)
        {
            _proxyTarget.BlogPictureProviderProperties(out BlogPictureProvider, out FriendlyName);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void CreatePictureAccount(System.String Account, System.String BlogProvider, System.Int32 ParentWindow, System.Object Document)
        {
            _proxyTarget.CreatePictureAccount(Account, BlogProvider, ParentWindow, Document);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void PublishPicture(System.String Account, System.Int32 ParentWindow, System.Object Document, System.Object Image, out System.String PictureURI, System.Int32 ImageType)
        {
            _proxyTarget.PublishPicture(Account, ParentWindow, Document, Image, out PictureURI, ImageType);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IConverterPreferences which adds IDispose to the interface
    /// </summary>
    public class IConverterPreferencesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IConverterPreferences _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IConverterPreferences which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IConverterPreferencesProxy(Microsoft.Office.Core.IConverterPreferences proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetMacroEnabled(out System.Int32 pfMacroEnabled)
        {
            _proxyTarget.HrGetMacroEnabled(out pfMacroEnabled);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrCheckFormat(out System.Int32 pFormat)
        {
            _proxyTarget.HrCheckFormat(out pFormat);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetLossySave(out System.Int32 pfLossySave)
        {
            _proxyTarget.HrGetLossySave(out pfLossySave);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IConverterApplicationPreferences which adds IDispose to the interface
    /// </summary>
    public class IConverterApplicationPreferencesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IConverterApplicationPreferences _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IConverterApplicationPreferences which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IConverterApplicationPreferencesProxy(Microsoft.Office.Core.IConverterApplicationPreferences proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetLcid(out System.UInt32 plcid)
        {
            _proxyTarget.HrGetLcid(out plcid);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetHwnd(out System.Int32 phwnd)
        {
            _proxyTarget.HrGetHwnd(out phwnd);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetApplication(out System.String pbstrApplication)
        {
            _proxyTarget.HrGetApplication(out pbstrApplication);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrCheckFormat(out System.Int32 pFormat)
        {
            _proxyTarget.HrCheckFormat(out pFormat);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IConverterUICallback which adds IDispose to the interface
    /// </summary>
    public class IConverterUICallbackProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IConverterUICallback _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IConverterUICallback which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IConverterUICallbackProxy(Microsoft.Office.Core.IConverterUICallback proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrReportProgress(System.UInt32 uPercentComplete)
        {
            _proxyTarget.HrReportProgress(uPercentComplete);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrMessageBox(System.String bstrText, System.String bstrCaption, System.UInt32 uType, out System.Int32 pidResult)
        {
            _proxyTarget.HrMessageBox(bstrText, bstrCaption, uType, out pidResult);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrInputBox(System.String bstrText, System.String bstrCaption, out System.String pbstrInput, System.Int32 fPassword)
        {
            _proxyTarget.HrInputBox(bstrText, bstrCaption, out pbstrInput, fPassword);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IConverter which adds IDispose to the interface
    /// </summary>
    public class IConverterProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IConverter _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IConverter which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IConverterProxy(Microsoft.Office.Core.IConverter proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrInitConverter(Microsoft.Office.Core.IConverterApplicationPreferences pcap, out Microsoft.Office.Core.IConverterPreferences ppcp, Microsoft.Office.Core.IConverterUICallback pcuic)
        {
            _proxyTarget.HrInitConverter(pcap, out ppcp, pcuic);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrUninitConverter(Microsoft.Office.Core.IConverterUICallback pcuic)
        {
            _proxyTarget.HrUninitConverter(pcuic);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrImport(System.String bstrSourcePath, System.String bstrDestPath, Microsoft.Office.Core.IConverterApplicationPreferences pcap, out Microsoft.Office.Core.IConverterPreferences ppcp, Microsoft.Office.Core.IConverterUICallback pcuic)
        {
            _proxyTarget.HrImport(bstrSourcePath, bstrDestPath, pcap, out ppcp, pcuic);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrExport(System.String bstrSourcePath, System.String bstrDestPath, System.String bstrClass, Microsoft.Office.Core.IConverterApplicationPreferences pcap, out Microsoft.Office.Core.IConverterPreferences ppcp, Microsoft.Office.Core.IConverterUICallback pcuic)
        {
            _proxyTarget.HrExport(bstrSourcePath, bstrDestPath, bstrClass, pcap, out ppcp, pcuic);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetFormat(System.String bstrPath, out System.String pbstrClass, Microsoft.Office.Core.IConverterApplicationPreferences pcap, out Microsoft.Office.Core.IConverterPreferences ppcp, Microsoft.Office.Core.IConverterUICallback pcuic)
        {
            _proxyTarget.HrGetFormat(bstrPath, out pbstrClass, pcap, out ppcp, pcuic);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void HrGetErrorString(System.Int32 hrErr, out System.String pbstrErrorMsg, Microsoft.Office.Core.IConverterApplicationPreferences pcap)
        {
            _proxyTarget.HrGetErrorString(hrErr, out pbstrErrorMsg, pcap);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArt which adds IDispose to the interface
    /// </summary>
    public class SmartArtProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArt _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArt which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtProxy(Microsoft.Office.Core.SmartArt proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtNodesProxy get_AllNodes()
        {
            return new SmartArtNodesProxy(_proxyTarget.AllNodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtNodesProxy get_Nodes()
        {
            return new SmartArtNodesProxy(_proxyTarget.Nodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtLayoutProxy get_Layout()
        {
            return new SmartArtLayoutProxy(_proxyTarget.Layout);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Layout(Microsoft.Office.Core.SmartArtLayout Layout)
        {
            _proxyTarget.Layout = Layout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtQuickStyleProxy get_QuickStyle()
        {
            return new SmartArtQuickStyleProxy(_proxyTarget.QuickStyle);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_QuickStyle(Microsoft.Office.Core.SmartArtQuickStyle Style)
        {
            _proxyTarget.QuickStyle = Style;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtColorProxy get_Color()
        {
            return new SmartArtColorProxy(_proxyTarget.Color);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Color(Microsoft.Office.Core.SmartArtColor ColorStyle)
        {
            _proxyTarget.Color = ColorStyle;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Reverse()
        {
            return _proxyTarget.Reverse;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Reverse(Microsoft.Office.Core.MsoTriState Reverse)
        {
            _proxyTarget.Reverse = Reverse;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Reset()
        {
            _proxyTarget.Reset();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtNodes which adds IDispose to the interface
    /// </summary>
    public class SmartArtNodesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtNodes _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtNodes which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtNodesProxy(Microsoft.Office.Core.SmartArtNodes proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SmartArtNodeProxy this[System.Object Index]
		{
			get { return new SmartArtNodeProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SmartArtNodeProxy Add()
        {
            return new SmartArtNodeProxy(_proxyTarget.Add());
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtNode which adds IDispose to the interface
    /// </summary>
    public class SmartArtNodeProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtNode _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtNode which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtNodeProxy(Microsoft.Office.Core.SmartArtNode proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual SmartArtNodeProxy AddNode(Microsoft.Office.Core.MsoSmartArtNodePosition Position, Microsoft.Office.Core.MsoSmartArtNodeType Type)
        {
            return new SmartArtNodeProxy(_proxyTarget.AddNode(Position, Type));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Promote()
        {
            _proxyTarget.Promote();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Demote()
        {
            _proxyTarget.Demote();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoOrgChartLayoutType get_OrgChartLayout()
        {
            return _proxyTarget.OrgChartLayout;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_OrgChartLayout(Microsoft.Office.Core.MsoOrgChartLayoutType Type)
        {
            _proxyTarget.OrgChartLayout = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual ShapeRangeProxy get_Shapes()
        {
            return new ShapeRangeProxy(_proxyTarget.Shapes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual TextFrame2Proxy get_TextFrame2()
        {
            return new TextFrame2Proxy(_proxyTarget.TextFrame2);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Larger()
        {
            _proxyTarget.Larger();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Smaller()
        {
            _proxyTarget.Smaller();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Level()
        {
            return _proxyTarget.Level;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Hidden()
        {
            return _proxyTarget.Hidden;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtNodesProxy get_Nodes()
        {
            return new SmartArtNodesProxy(_proxyTarget.Nodes);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual SmartArtNodeProxy get_ParentNode()
        {
            return new SmartArtNodeProxy(_proxyTarget.ParentNode);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoSmartArtNodeType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ReorderUp()
        {
            _proxyTarget.ReorderUp();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void ReorderDown()
        {
            _proxyTarget.ReorderDown();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtLayouts which adds IDispose to the interface
    /// </summary>
    public class SmartArtLayoutsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtLayouts _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtLayouts which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtLayoutsProxy(Microsoft.Office.Core.SmartArtLayouts proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SmartArtLayoutProxy this[System.Object Index]
		{
			get { return new SmartArtLayoutProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtLayout which adds IDispose to the interface
    /// </summary>
    public class SmartArtLayoutProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtLayout _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtLayout which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtLayoutProxy(Microsoft.Office.Core.SmartArtLayout proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Category()
        {
            return _proxyTarget.Category;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtQuickStyles which adds IDispose to the interface
    /// </summary>
    public class SmartArtQuickStylesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtQuickStyles _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtQuickStyles which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtQuickStylesProxy(Microsoft.Office.Core.SmartArtQuickStyles proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SmartArtQuickStyleProxy this[System.Object Index]
		{
			get { return new SmartArtQuickStyleProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtQuickStyle which adds IDispose to the interface
    /// </summary>
    public class SmartArtQuickStyleProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtQuickStyle _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtQuickStyle which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtQuickStyleProxy(Microsoft.Office.Core.SmartArtQuickStyle proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Category()
        {
            return _proxyTarget.Category;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtColors which adds IDispose to the interface
    /// </summary>
    public class SmartArtColorsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtColors _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtColors which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtColorsProxy(Microsoft.Office.Core.SmartArtColors proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual SmartArtColorProxy this[System.Object Index]
		{
			get { return new SmartArtColorProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for SmartArtColor which adds IDispose to the interface
    /// </summary>
    public class SmartArtColorProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.SmartArtColor _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.SmartArtColor which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public SmartArtColorProxy(Microsoft.Office.Core.SmartArtColor proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Description()
        {
            return _proxyTarget.Description;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Category()
        {
            return _proxyTarget.Category;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerField which adds IDispose to the interface
    /// </summary>
    public class PickerFieldProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerField _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerField which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerFieldProxy(Microsoft.Office.Core.PickerField proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPickerField get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Boolean get_IsHidden()
        {
            return _proxyTarget.IsHidden;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerFields which adds IDispose to the interface
    /// </summary>
    public class PickerFieldsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerFields _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerFields which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerFieldsProxy(Microsoft.Office.Core.PickerFields proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual PickerFieldProxy this[System.Int32 Index]
		{
			get { return new PickerFieldProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerProperty which adds IDispose to the interface
    /// </summary>
    public class PickerPropertyProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerProperty _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerProperty which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerPropertyProxy(Microsoft.Office.Core.PickerProperty proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Value()
        {
            return _proxyTarget.Value;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPickerField get_Type()
        {
            return _proxyTarget.Type;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerProperties which adds IDispose to the interface
    /// </summary>
    public class PickerPropertiesProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerProperties _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerProperties which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerPropertiesProxy(Microsoft.Office.Core.PickerProperties proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual PickerPropertyProxy this[System.Int32 Index]
		{
			get { return new PickerPropertyProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual PickerPropertyProxy Add(System.String Id, System.String Value, Microsoft.Office.Core.MsoPickerField Type)
        {
            return new PickerPropertyProxy(_proxyTarget.Add(Id, Value, Type));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Remove(System.String Id)
        {
            _proxyTarget.Remove(Id);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerResult which adds IDispose to the interface
    /// </summary>
    public class PickerResultProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerResult _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerResult which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerResultProxy(Microsoft.Office.Core.PickerResult proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Id()
        {
            return _proxyTarget.Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DisplayName()
        {
            return _proxyTarget.DisplayName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DisplayName(System.String DisplayName)
        {
            _proxyTarget.DisplayName = DisplayName;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Type(System.String Type)
        {
            _proxyTarget.Type = Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_SIPId()
        {
            return _proxyTarget.SIPId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SIPId(System.String SIPId)
        {
            _proxyTarget.SIPId = SIPId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_ItemData()
        {
            return _proxyTarget.ItemData;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ItemData(System.Object ItemData)
        {
            _proxyTarget.ItemData = ItemData;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_SubItems()
        {
            return _proxyTarget.SubItems;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_SubItems(System.Object SubItems)
        {
            _proxyTarget.SubItems = SubItems;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_DuplicateResults()
        {
            return _proxyTarget.DuplicateResults;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PickerFieldsProxy get_Fields()
        {
            return new PickerFieldsProxy(_proxyTarget.Fields);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Fields(Microsoft.Office.Core.PickerFields Fields)
        {
            _proxyTarget.Fields = Fields;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerResults which adds IDispose to the interface
    /// </summary>
    public class PickerResultsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerResults _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerResults which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerResultsProxy(Microsoft.Office.Core.PickerResults proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual PickerResultProxy this[System.Int32 Index]
		{
			get { return new PickerResultProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual PickerResultProxy Add(System.String Id, System.String DisplayName, System.String Type, System.String SIPId, System.Object ItemData, System.Object SubItems)
        {
            return new PickerResultProxy(_proxyTarget.Add(Id, DisplayName, Type, SIPId, ItemData, SubItems));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PickerDialog which adds IDispose to the interface
    /// </summary>
    public class PickerDialogProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PickerDialog _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PickerDialog which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PickerDialogProxy(Microsoft.Office.Core.PickerDialog proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_DataHandlerId()
        {
            return _proxyTarget.DataHandlerId;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_DataHandlerId(System.String Id)
        {
            _proxyTarget.DataHandlerId = Id;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Title()
        {
            return _proxyTarget.Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Title(System.String Title)
        {
            _proxyTarget.Title = Title;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual PickerPropertiesProxy get_Properties()
        {
            return new PickerPropertiesProxy(_proxyTarget.Properties);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual PickerResultsProxy CreatePickerResults()
        {
            return new PickerResultsProxy(_proxyTarget.CreatePickerResults());
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual PickerResultsProxy Show(System.Boolean IsMultiSelect, Microsoft.Office.Core.PickerResults ExistingResults)
        {
            return new PickerResultsProxy(_proxyTarget.Show(IsMultiSelect, ExistingResults));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual PickerResultsProxy Resolve(System.String TokenText, System.Int32 duplicateDlgMode)
        {
            return new PickerResultsProxy(_proxyTarget.Resolve(TokenText, duplicateDlgMode));
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for IMsoContactCard which adds IDispose to the interface
    /// </summary>
    public class IMsoContactCardProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.IMsoContactCard _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.IMsoContactCard which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public IMsoContactCardProxy(Microsoft.Office.Core.IMsoContactCard proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Address()
        {
            return _proxyTarget.Address;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoContactCardAddressType get_AddressType()
        {
            return _proxyTarget.AddressType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoContactCardType get_CardType()
        {
            return _proxyTarget.CardType;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Parent()
        {
            return _proxyTarget.Parent;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for EffectParameter which adds IDispose to the interface
    /// </summary>
    public class EffectParameterProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.EffectParameter _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.EffectParameter which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public EffectParameterProxy(Microsoft.Office.Core.EffectParameter proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.String get_Name()
        {
            return _proxyTarget.Name;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Value()
        {
            return _proxyTarget.Value;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Value(System.Object Value)
        {
            _proxyTarget.Value = Value;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for EffectParameters which adds IDispose to the interface
    /// </summary>
    public class EffectParametersProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.EffectParameters _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.EffectParameters which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public EffectParametersProxy(Microsoft.Office.Core.EffectParameters proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual EffectParameterProxy this[System.Object Index]
		{
			get { return new EffectParameterProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PictureEffect which adds IDispose to the interface
    /// </summary>
    public class PictureEffectProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PictureEffect _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PictureEffect which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PictureEffectProxy(Microsoft.Office.Core.PictureEffect proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoPictureEffectType get_Type()
        {
            return _proxyTarget.Type;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Position(System.Int32 Position)
        {
            _proxyTarget.Position = Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Position()
        {
            return _proxyTarget.Position;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete()
        {
            _proxyTarget.Delete();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual EffectParametersProxy get_EffectParameters()
        {
            return new EffectParametersProxy(_proxyTarget.EffectParameters);
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_Visible(Microsoft.Office.Core.MsoTriState Visible)
        {
            _proxyTarget.Visible = Visible;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual Microsoft.Office.Core.MsoTriState get_Visible()
        {
            return _proxyTarget.Visible;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for PictureEffects which adds IDispose to the interface
    /// </summary>
    public class PictureEffectsProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.PictureEffects _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.PictureEffects which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public PictureEffectsProxy(Microsoft.Office.Core.PictureEffects proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
		public virtual PictureEffectProxy this[System.Int32 Index]
		{
			get { return new PictureEffectProxy(_proxyTarget[Index]); }
		}
		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Count()
        {
            return _proxyTarget.Count;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return _proxyTarget.GetEnumerator();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual PictureEffectProxy Insert(Microsoft.Office.Core.MsoPictureEffectType EffectType, System.Int32 Position)
        {
            return new PictureEffectProxy(_proxyTarget.Insert(EffectType, Position));
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Delete(System.Int32 Index)
        {
            _proxyTarget.Delete(Index);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for Crop which adds IDispose to the interface
    /// </summary>
    public class CropProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.Crop _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.Crop which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public CropProxy(Microsoft.Office.Core.Crop proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_PictureOffsetX()
        {
            return _proxyTarget.PictureOffsetX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureOffsetX(System.Single PictureOffsetX)
        {
            _proxyTarget.PictureOffsetX = PictureOffsetX;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_PictureOffsetY()
        {
            return _proxyTarget.PictureOffsetY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureOffsetY(System.Single PictureOffsetY)
        {
            _proxyTarget.PictureOffsetY = PictureOffsetY;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_PictureWidth()
        {
            return _proxyTarget.PictureWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureWidth(System.Single PictureWidth)
        {
            _proxyTarget.PictureWidth = PictureWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_PictureHeight()
        {
            return _proxyTarget.PictureHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_PictureHeight(System.Single PictureHeight)
        {
            _proxyTarget.PictureHeight = PictureHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_ShapeLeft()
        {
            return _proxyTarget.ShapeLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShapeLeft(System.Single ShapeLeft)
        {
            _proxyTarget.ShapeLeft = ShapeLeft;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_ShapeTop()
        {
            return _proxyTarget.ShapeTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShapeTop(System.Single ShapeTop)
        {
            _proxyTarget.ShapeTop = ShapeTop;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_ShapeWidth()
        {
            return _proxyTarget.ShapeWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShapeWidth(System.Single ShapeWidth)
        {
            _proxyTarget.ShapeWidth = ShapeWidth;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Single get_ShapeHeight()
        {
            return _proxyTarget.ShapeHeight;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual void set_ShapeHeight(System.Single ShapeHeight)
        {
            _proxyTarget.ShapeHeight = ShapeHeight;
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
    /// <summary>
    /// Wrapper interface for ContactCard which adds IDispose to the interface
    /// </summary>
    public class ContactCardProxy : System.IDisposable
    {
        private readonly Microsoft.Office.Core.ContactCard _proxyTarget; 

        /// <summary>
        /// Creates a new wrapper for Microsoft.Office.Core.ContactCard which calls Marshal.ReleaseComObject when disposed
        /// </summary>
        /// <param name="proxyTarget">Instance to wrap</param>
        public ContactCardProxy(Microsoft.Office.Core.ContactCard proxyTarget)
        {
            _proxyTarget = proxyTarget;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Object get_Application()
        {
            return _proxyTarget.Application;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
        public virtual System.Int32 get_Creator()
        {
            return _proxyTarget.Creator;
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Close()
        {
            _proxyTarget.Close();
        }

		/// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual void Show(Microsoft.Office.Core.MsoContactCardStyle CardStyle, System.Int32 RectangleLeft, System.Int32 RectangleRight, System.Int32 RectangleTop, System.Int32 RectangleBottom, System.Int32 HorizontalPosition, System.Boolean ShowWithDelay)
        {
            _proxyTarget.Show(CardStyle, RectangleLeft, RectangleRight, RectangleTop, RectangleBottom, HorizontalPosition, ShowWithDelay);
        }

        public void Dispose()
        {
            _proxyTarget.ReleaseComObject();
        }
    }
}
// ReSharper enable InconsistentNaming

